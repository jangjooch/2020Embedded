
0716_AtmegaTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800100  00800100  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000958  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031a  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	eb c0       	rjmp	.+470    	; 0x1dc <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	a8 c0       	rjmp	.+336    	; 0x18a <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 32       	cpi	r26, 0x2C	; 44
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	46 c1       	rjmp	.+652    	; 0x338 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

int main(void)
{
	
	
	TCCR1B = 0x02;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);
  b2:	87 b7       	in	r24, 0x37	; 55
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	87 bf       	out	0x37, r24	; 55
	TCNT1 =-2000;
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	9d bd       	out	0x2d, r25	; 45
  be:	8c bd       	out	0x2c, r24	; 44
	
	TCCR3A = 0x82;
  c0:	82 e8       	ldi	r24, 0x82	; 130
  c2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x1A;
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
  cc:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	
	ICR3 = 40000;
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	9c e9       	ldi	r25, 0x9C	; 156
  d4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	DDRE = 0x0F;
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	82 b9       	out	0x02, r24	; 2
	// OC3A 출력  -> PE3
	// INT 4 입력 -> PE4
	
	EICRA = 0x55;
  e0:	85 e5       	ldi	r24, 0x55	; 85
  e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	// ISC31 ISC30 ISC21 ISC20 | ISC11 ISC10 ISC01 ISC00
	// INT 3, 2, 1, 0
	// Change 설정//
	EICRB = 0x01;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8a bf       	out	0x3a, r24	; 58
	// INT 4
	// Change 설정 Change -> 0 1
	EIMSK = 0x1F;
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	89 bf       	out	0x39, r24	; 57
	// INT 0, 1, 2, 3, 4 Enable
	
	sei();
  ee:	78 94       	sei
	
	DDRD = 0x00;
  f0:	11 ba       	out	0x11, r1	; 17
	// INT 0, 1, 2, 3 INPUT;
	
	DDRB = 0x03;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	87 bb       	out	0x17, r24	; 23
	// PB0 : break
	// PB1 : CW/CCW
	/* Replace with your application code */
	PORTB = 0x03;
  f6:	88 bb       	out	0x18, r24	; 24
	
	
    /* Replace with your application code */
    while (1) 
    {
		long result = 1500 - pwm_value[0];
  f8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 104:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 108:	8c ed       	ldi	r24, 0xDC	; 220
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	84 1b       	sub	r24, r20
 112:	95 0b       	sbc	r25, r21
 114:	a6 0b       	sbc	r26, r22
 116:	b7 0b       	sbc	r27, r23
		if(result < 0){
 118:	52 f4       	brpl	.+20     	; 0x12e <main+0x80>
		result = -result;
 11a:	b0 95       	com	r27
 11c:	a0 95       	com	r26
 11e:	90 95       	com	r25
 120:	81 95       	neg	r24
 122:	9f 4f       	sbci	r25, 0xFF	; 255
 124:	af 4f       	sbci	r26, 0xFF	; 255
 126:	bf 4f       	sbci	r27, 0xFF	; 255
			PORTB = 0x01;
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	28 bb       	out	0x18, r18	; 24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x84>
		}
		else{
			PORTB = 0x03;
 12e:	23 e0       	ldi	r18, 0x03	; 3
 130:	28 bb       	out	0x18, r18	; 24
		}
		if(result < 100){
 132:	84 36       	cpi	r24, 0x64	; 100
 134:	91 05       	cpc	r25, r1
 136:	a1 05       	cpc	r26, r1
 138:	b1 05       	cpc	r27, r1
 13a:	1c f4       	brge	.+6      	; 0x142 <main+0x94>
			result = 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	dc 01       	movw	r26, r24
 142:	bb 23       	and	r27, r27
 144:	1c f4       	brge	.+6      	; 0x14c <main+0x9e>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	dc 01       	movw	r26, r24
		}
		OCR3A = map(result, 0, 400, 1000, 5000);
 14c:	9c 01       	movw	r18, r24
 14e:	ad 01       	movw	r20, r26
 150:	21 39       	cpi	r18, 0x91	; 145
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	38 07       	cpc	r19, r24
 156:	41 05       	cpc	r20, r1
 158:	51 05       	cpc	r21, r1
 15a:	24 f0       	brlt	.+8      	; 0x164 <main+0xb6>
 15c:	20 e9       	ldi	r18, 0x90	; 144
 15e:	31 e0       	ldi	r19, 0x01	; 1
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	a0 ea       	ldi	r26, 0xA0	; 160
 166:	bf e0       	ldi	r27, 0x0F	; 15
 168:	ac d0       	rcall	.+344    	; 0x2c2 <__muluhisi3>
 16a:	20 e9       	ldi	r18, 0x90	; 144
 16c:	31 e0       	ldi	r19, 0x01	; 1
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	8b d0       	rcall	.+278    	; 0x28a <__divmodsi4>
 174:	da 01       	movw	r26, r20
 176:	c9 01       	movw	r24, r18
 178:	88 51       	subi	r24, 0x18	; 24
 17a:	9c 4f       	sbci	r25, 0xFC	; 252
 17c:	af 4f       	sbci	r26, 0xFF	; 255
 17e:	bf 4f       	sbci	r27, 0xFF	; 255
 180:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 184:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0xda>

0000018a <__vector_14>:
    }
	
	
}

ISR(TIMER1_OVF_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
	
	TCNT1 = -20000;
 19c:	80 ee       	ldi	r24, 0xE0	; 224
 19e:	91 eb       	ldi	r25, 0xB1	; 177
 1a0:	9d bd       	out	0x2d, r25	; 45
 1a2:	8c bd       	out	0x2c, r24	; 44
	idx1  = idx1 + 1;
 1a4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <idx1>
 1a8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <idx1+0x1>
 1ac:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <idx1+0x2>
 1b0:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <idx1+0x3>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	a1 1d       	adc	r26, r1
 1b8:	b1 1d       	adc	r27, r1
 1ba:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <idx1>
 1be:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <idx1+0x1>
 1c2:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <idx1+0x2>
 1c6:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <idx1+0x3>
}
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_1>:

ISR(INT0_vect){
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
	if(PIND & 0x01){
 1fe:	80 9b       	sbis	0x10, 0	; 16
 200:	11 c0       	rjmp	.+34     	; 0x224 <__vector_1+0x48>
		timer[0] = idx1;
 202:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <idx1>
 206:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <idx1+0x1>
 20a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <idx1+0x2>
 20e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <idx1+0x3>
 212:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer>
 216:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer+0x1>
 21a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer+0x2>
 21e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer+0x3>
 222:	22 c0       	rjmp	.+68     	; 0x268 <__vector_1+0x8c>
	}
	else{
		if(timer[0] != 0){
 224:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer>
 228:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer+0x1>
 22c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer+0x2>
 230:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer+0x3>
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	a1 05       	cpc	r26, r1
 238:	b1 05       	cpc	r27, r1
 23a:	b1 f0       	breq	.+44     	; 0x268 <__vector_1+0x8c>
			pwm_value[0] = idx1 - timer[0];
 23c:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <idx1>
 240:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <idx1+0x1>
 244:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <idx1+0x2>
 248:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <idx1+0x3>
 24c:	8a 01       	movw	r16, r20
 24e:	9b 01       	movw	r18, r22
 250:	08 1b       	sub	r16, r24
 252:	19 0b       	sbc	r17, r25
 254:	2a 0b       	sbc	r18, r26
 256:	3b 0b       	sbc	r19, r27
 258:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 260:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 264:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
	}
	
}
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__divmodsi4>:
 28a:	05 2e       	mov	r0, r21
 28c:	97 fb       	bst	r25, 7
 28e:	16 f4       	brtc	.+4      	; 0x294 <__divmodsi4+0xa>
 290:	00 94       	com	r0
 292:	0f d0       	rcall	.+30     	; 0x2b2 <__negsi2>
 294:	57 fd       	sbrc	r21, 7
 296:	05 d0       	rcall	.+10     	; 0x2a2 <__divmodsi4_neg2>
 298:	1e d0       	rcall	.+60     	; 0x2d6 <__udivmodsi4>
 29a:	07 fc       	sbrc	r0, 7
 29c:	02 d0       	rcall	.+4      	; 0x2a2 <__divmodsi4_neg2>
 29e:	46 f4       	brtc	.+16     	; 0x2b0 <__divmodsi4_exit>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <__negsi2>

000002a2 <__divmodsi4_neg2>:
 2a2:	50 95       	com	r21
 2a4:	40 95       	com	r20
 2a6:	30 95       	com	r19
 2a8:	21 95       	neg	r18
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
 2ac:	4f 4f       	sbci	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255

000002b0 <__divmodsi4_exit>:
 2b0:	08 95       	ret

000002b2 <__negsi2>:
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__muluhisi3>:
 2c2:	2b d0       	rcall	.+86     	; 0x31a <__umulhisi3>
 2c4:	a5 9f       	mul	r26, r21
 2c6:	90 0d       	add	r25, r0
 2c8:	b4 9f       	mul	r27, r20
 2ca:	90 0d       	add	r25, r0
 2cc:	a4 9f       	mul	r26, r20
 2ce:	80 0d       	add	r24, r0
 2d0:	91 1d       	adc	r25, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	08 95       	ret

000002d6 <__udivmodsi4>:
 2d6:	a1 e2       	ldi	r26, 0x21	; 33
 2d8:	1a 2e       	mov	r1, r26
 2da:	aa 1b       	sub	r26, r26
 2dc:	bb 1b       	sub	r27, r27
 2de:	fd 01       	movw	r30, r26
 2e0:	0d c0       	rjmp	.+26     	; 0x2fc <__udivmodsi4_ep>

000002e2 <__udivmodsi4_loop>:
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	ee 1f       	adc	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	a2 17       	cp	r26, r18
 2ec:	b3 07       	cpc	r27, r19
 2ee:	e4 07       	cpc	r30, r20
 2f0:	f5 07       	cpc	r31, r21
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__udivmodsi4_ep>
 2f4:	a2 1b       	sub	r26, r18
 2f6:	b3 0b       	sbc	r27, r19
 2f8:	e4 0b       	sbc	r30, r20
 2fa:	f5 0b       	sbc	r31, r21

000002fc <__udivmodsi4_ep>:
 2fc:	66 1f       	adc	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a 94       	dec	r1
 306:	69 f7       	brne	.-38     	; 0x2e2 <__udivmodsi4_loop>
 308:	60 95       	com	r22
 30a:	70 95       	com	r23
 30c:	80 95       	com	r24
 30e:	90 95       	com	r25
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	bd 01       	movw	r22, r26
 316:	cf 01       	movw	r24, r30
 318:	08 95       	ret

0000031a <__umulhisi3>:
 31a:	a2 9f       	mul	r26, r18
 31c:	b0 01       	movw	r22, r0
 31e:	b3 9f       	mul	r27, r19
 320:	c0 01       	movw	r24, r0
 322:	a3 9f       	mul	r26, r19
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	b2 9f       	mul	r27, r18
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
