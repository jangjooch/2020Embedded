
0714_ControlTest01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800100  00800100  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c5  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__vector_1>
   6:	00 00       	nop
   8:	c5 c1       	rjmp	.+906    	; 0x394 <__vector_2>
   a:	00 00       	nop
   c:	42 c2       	rjmp	.+1156   	; 0x492 <__vector_3>
   e:	00 00       	nop
  10:	c2 c2       	rjmp	.+1412   	; 0x596 <__vector_4>
  12:	00 00       	nop
  14:	3f c3       	rjmp	.+1662   	; 0x694 <__vector_5>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	c4 c0       	rjmp	.+392    	; 0x1ca <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 33       	cpi	r26, 0x32	; 50
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	8e c3       	rjmp	.+1820   	; 0x7c8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
char flag02 = 0;
char flag03 = 0;
char flag04 = 0;

int main(void)
{
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0xe>
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x10>
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	// 데이터 전송 USART0
	UCSR0A = 0x00;
  c2:	8b e2       	ldi	r24, 0x2B	; 43
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	UCSR0B = 0x18;
  ca:	8a e2       	ldi	r24, 0x2A	; 42
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	28 e1       	ldi	r18, 0x18	; 24
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	UCSR0C = 0x06;
  d4:	85 e9       	ldi	r24, 0x95	; 149
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	26 e0       	ldi	r18, 0x06	; 6
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	UBRR0H = 0;
  de:	80 e9       	ldi	r24, 0x90	; 144
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
	UBRR0L = 103;
  e6:	89 e2       	ldi	r24, 0x29	; 41
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	27 e6       	ldi	r18, 0x67	; 103
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
	
	// 50 NanoSec 용
	TCCR0 = 0x06;
  f0:	83 e5       	ldi	r24, 0x53	; 83
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	// FOC0 WGM00 COM01 COM00 WGM01 CS02 CS01 CS00
	// Normal // 출력비교 없음
	// 분주율 8
	TIMSK |= 0x01;
  fa:	87 e5       	ldi	r24, 0x57	; 87
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	27 e5       	ldi	r18, 0x57	; 87
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	21 60       	ori	r18, 0x01	; 1
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	// OCIE2 TOIE2 TICIE1 OCIE1A | OCIE1B TOIE1 <OCIE0 TOIE0>
	// OverFlow Interrupt Enable
	TCNT0 = 155; // 256 - 131 = 100
 10c:	82 e5       	ldi	r24, 0x52	; 82
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2b e9       	ldi	r18, 0x9B	; 155
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	// 1/16 * 8 * 100 = 50
	
	
	// Motor 제어 Duty Cycle 생성 16bit timer
	TCCR3A = 0x82;
 116:	8b e8       	ldi	r24, 0x8B	; 139
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	22 e8       	ldi	r18, 0x82	; 130
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	// COMA1 COMA0 : 1 0 -> ICR1을 만나면 Clear
	// WGM11 WGM10 : 1 0 -> 14번모드 1 1 1 0 을 위함
	TCCR3B = 0x1A;
 120:	8a e8       	ldi	r24, 0x8A	; 138
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	2a e1       	ldi	r18, 0x1A	; 26
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	// WGM13 WGM12 : 1 1 -> 14번모드 1 1 1 0 을 위함
	// CS12 CS11 CS10 : 분주율 8 -> 0 1 0 을 위함
	TCCR3C = 0x00;
 12a:	8c e8       	ldi	r24, 0x8C	; 140
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	10 82       	st	Z, r1
	// PWM모드에서는 출력할 것이 없다.
	ICR3 = 40000;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	20 e4       	ldi	r18, 0x40	; 64
 138:	3c e9       	ldi	r19, 0x9C	; 156
 13a:	fc 01       	movw	r30, r24
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	20 83       	st	Z, r18
	// TOP 설정
	// 분주 = 1/16 * 8 * 40000 = 20000nanoSec = 20ms
	// Duty Cycle 설정
	DDRE = 0x0F;
 140:	82 e2       	ldi	r24, 0x22	; 34
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2f e0       	ldi	r18, 0x0F	; 15
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	// OC3A 출력  -> PE3
	// INT 4 입력 -> PE4
	
	// pwm 입력측정을 위한 외부 Interrupt
	EICRA = 0x55;
 14a:	8a e6       	ldi	r24, 0x6A	; 106
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	25 e5       	ldi	r18, 0x55	; 85
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
	// ISC31 ISC30 ISC21 ISC20 | ISC11 ISC10 ISC01 ISC00
	// INT 3, 2, 1, 0
	// Change 설정
	EICRB = 0x01;
 154:	8a e5       	ldi	r24, 0x5A	; 90
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	// INT 4
	// Change 설정 Change -> 0 1
	EIMSK = 0b00011111;
 15e:	89 e5       	ldi	r24, 0x59	; 89
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2f e1       	ldi	r18, 0x1F	; 31
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	// INT 4, 3, 2, 1, 0 Enable
	
	sei();
 168:	78 94       	sei
	
	DDRF = 0x01;
 16a:	81 e6       	ldi	r24, 0x61	; 97
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	PORTF = 0x00;
 174:	82 e6       	ldi	r24, 0x62	; 98
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1

	
    while (1) 
    {
		//test++;
		unsigned long pasted = idx;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 188:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	ab 83       	std	Y+3, r26	; 0x03
 192:	bc 83       	std	Y+4, r27	; 0x04
		//UART_Putchar(pwm_value[2]& 0xFF);
		//UART_Putchar(pwm_value[2] >> 8);
		//UART_Putchar(pwm_value[3]& 0xFF);
		//UART_Putchar(pwm_value[3] >> 8);
		
		while(idx - pasted < 500){
 194:	00 00       	nop
 196:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	9a 81       	ldd	r25, Y+2	; 0x02
 1aa:	ab 81       	ldd	r26, Y+3	; 0x03
 1ac:	bc 81       	ldd	r27, Y+4	; 0x04
 1ae:	79 01       	movw	r14, r18
 1b0:	8a 01       	movw	r16, r20
 1b2:	e8 1a       	sub	r14, r24
 1b4:	f9 0a       	sbc	r15, r25
 1b6:	0a 0b       	sbc	r16, r26
 1b8:	1b 0b       	sbc	r17, r27
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	84 3f       	cpi	r24, 0xF4	; 244
 1c0:	91 40       	sbci	r25, 0x01	; 1
 1c2:	a1 05       	cpc	r26, r1
 1c4:	b1 05       	cpc	r27, r1
 1c6:	38 f3       	brcs	.-50     	; 0x196 <main+0xe8>
			;
		}
    }
 1c8:	d9 cf       	rjmp	.-78     	; 0x17c <main+0xce>

000001ca <__vector_16>:
}

ISR(TIMER0_OVF_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
	idx = idx + 1;
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fe:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	a1 1d       	adc	r26, r1
 206:	b1 1d       	adc	r27, r1
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 214:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	TCNT0 = 131;
 218:	82 e5       	ldi	r24, 0x52	; 82
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	23 e8       	ldi	r18, 0x83	; 131
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
}
 222:	00 00       	nop
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 23c:	0f 90       	pop	r0
 23e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_1>:
// PD0
ISR(INT0_vect){
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 258:	0f 92       	push	r0
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	if( (PIND & 0x01) == 0x01 ){
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	99 27       	eor	r25, r25
 292:	89 2b       	or	r24, r25
 294:	b1 f0       	breq	.+44     	; 0x2c2 <__vector_1+0x7a>
		timer[0] = idx;
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2a2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer>
 2aa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer+0x1>
 2ae:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer+0x2>
 2b2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer+0x3>
		PORTF = 0x01;
 2b6:	82 e6       	ldi	r24, 0x62	; 98
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	33 c0       	rjmp	.+102    	; 0x328 <__vector_1+0xe0>
	}
	else{
		if(timer[0] != 0){
 2c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer>
 2c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer+0x1>
 2ca:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer+0x2>
 2ce:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer+0x3>
 2d2:	89 2b       	or	r24, r25
 2d4:	8a 2b       	or	r24, r26
 2d6:	8b 2b       	or	r24, r27
 2d8:	39 f1       	breq	.+78     	; 0x328 <__vector_1+0xe0>
			PORTF = 0x00;
 2da:	82 e6       	ldi	r24, 0x62	; 98
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	10 82       	st	Z, r1
			pwm_value[0] = idx - timer[0];
 2e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ee:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer>
 2f6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer+0x1>
 2fa:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer+0x2>
 2fe:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer+0x3>
 302:	79 01       	movw	r14, r18
 304:	8a 01       	movw	r16, r20
 306:	e8 1a       	sub	r14, r24
 308:	f9 0a       	sbc	r15, r25
 30a:	0a 0b       	sbc	r16, r26
 30c:	1b 0b       	sbc	r17, r27
 30e:	d8 01       	movw	r26, r16
 310:	c7 01       	movw	r24, r14
 312:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pwm_value>
 316:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <pwm_value+0x1>
 31a:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <pwm_value+0x2>
 31e:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <pwm_value+0x3>
			flag00 = 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <flag00>
		}
	}
	UART_Putchar(idx);
 328:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 32c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 330:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 334:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 338:	bc 01       	movw	r22, r24
 33a:	cd 01       	movw	r24, r26
 33c:	2a d2       	rcall	.+1108   	; 0x792 <UART_Putchar>
	UART_Putchar(idx>>8);
 33e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 342:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 346:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 34a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 34e:	89 2f       	mov	r24, r25
 350:	9a 2f       	mov	r25, r26
 352:	ab 2f       	mov	r26, r27
 354:	bb 27       	eor	r27, r27
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	1b d2       	rcall	.+1078   	; 0x792 <UART_Putchar>
}
 35c:	00 00       	nop
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	0f 90       	pop	r0
 384:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 388:	0f 90       	pop	r0
 38a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_2>:
// PD1
ISR(INT1_vect){
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3a4:	0f 92       	push	r0
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
	if((PIND & (1 << 1))){
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	88 2f       	mov	r24, r24
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	82 70       	andi	r24, 0x02	; 2
 3d8:	99 27       	eor	r25, r25
 3da:	89 2b       	or	r24, r25
 3dc:	89 f0       	breq	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
		timer[1] = idx;
 3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer+0x4>
 3f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer+0x5>
 3f6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer+0x6>
 3fa:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer+0x7>
		if(timer[1] != 0){
			pwm_value[1] = idx - timer[1];
			flag01 = 1;
		}
	}
}
 3fe:	2f c0       	rjmp	.+94     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
ISR(INT1_vect){
	if((PIND & (1 << 1))){
		timer[1] = idx;
	}
	else{
		if(timer[1] != 0){
 400:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer+0x4>
 404:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer+0x5>
 408:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer+0x6>
 40c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer+0x7>
 410:	89 2b       	or	r24, r25
 412:	8a 2b       	or	r24, r26
 414:	8b 2b       	or	r24, r27
 416:	19 f1       	breq	.+70     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			pwm_value[1] = idx - timer[1];
 418:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 420:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 424:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 428:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer+0x4>
 42c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer+0x5>
 430:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer+0x6>
 434:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer+0x7>
 438:	79 01       	movw	r14, r18
 43a:	8a 01       	movw	r16, r20
 43c:	e8 1a       	sub	r14, r24
 43e:	f9 0a       	sbc	r15, r25
 440:	0a 0b       	sbc	r16, r26
 442:	1b 0b       	sbc	r17, r27
 444:	d8 01       	movw	r26, r16
 446:	c7 01       	movw	r24, r14
 448:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <pwm_value+0x4>
 44c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <pwm_value+0x5>
 450:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <pwm_value+0x6>
 454:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <pwm_value+0x7>
			flag01 = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <flag01>
		}
	}
}
 45e:	00 00       	nop
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	0f 90       	pop	r0
 482:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 486:	0f 90       	pop	r0
 488:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_3>:
// PD2
ISR(INT2_vect){
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4a2:	0f 92       	push	r0
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
	if((PIND & (1 << 2))){
 4c8:	80 e3       	ldi	r24, 0x30	; 48
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	84 70       	andi	r24, 0x04	; 4
 4d6:	99 27       	eor	r25, r25
 4d8:	89 2b       	or	r24, r25
 4da:	a1 f0       	breq	.+40     	; 0x504 <__vector_3+0x72>
		timer[0] = idx;
 4dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4ec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer>
 4f0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer+0x1>
 4f4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer+0x2>
 4f8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer+0x3>
		test = 5;
 4fc:	85 e0       	ldi	r24, 0x05	; 5
 4fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <test>
		if(timer[2] != 0){
			pwm_value[2] = idx - timer[2];
			flag02 = 1;
		}
	}
}
 502:	2f c0       	rjmp	.+94     	; 0x562 <__vector_3+0xd0>
	if((PIND & (1 << 2))){
		timer[0] = idx;
		test = 5;
	}
	else{
		if(timer[2] != 0){
 504:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer+0x8>
 508:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer+0x9>
 50c:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer+0xa>
 510:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer+0xb>
 514:	89 2b       	or	r24, r25
 516:	8a 2b       	or	r24, r26
 518:	8b 2b       	or	r24, r27
 51a:	19 f1       	breq	.+70     	; 0x562 <__vector_3+0xd0>
			pwm_value[2] = idx - timer[2];
 51c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 520:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 524:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 528:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 52c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer+0x8>
 530:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer+0x9>
 534:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer+0xa>
 538:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer+0xb>
 53c:	79 01       	movw	r14, r18
 53e:	8a 01       	movw	r16, r20
 540:	e8 1a       	sub	r14, r24
 542:	f9 0a       	sbc	r15, r25
 544:	0a 0b       	sbc	r16, r26
 546:	1b 0b       	sbc	r17, r27
 548:	d8 01       	movw	r26, r16
 54a:	c7 01       	movw	r24, r14
 54c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <pwm_value+0x8>
 550:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <pwm_value+0x9>
 554:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <pwm_value+0xa>
 558:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <pwm_value+0xb>
			flag02 = 1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <flag02>
		}
	}
}
 562:	00 00       	nop
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	0f 90       	pop	r0
 586:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 58a:	0f 90       	pop	r0
 58c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_4>:
// PD3
ISR(INT3_vect){
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 5a6:	0f 92       	push	r0
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
	if((PIND & (1 << 3))){
 5cc:	80 e3       	ldi	r24, 0x30	; 48
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	88 70       	andi	r24, 0x08	; 8
 5da:	99 27       	eor	r25, r25
 5dc:	89 2b       	or	r24, r25
 5de:	89 f0       	breq	.+34     	; 0x602 <__vector_4+0x6c>
		timer[3] = idx;
 5e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5ec:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5f0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer+0xc>
 5f4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <timer+0xd>
 5f8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <timer+0xe>
 5fc:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <timer+0xf>
		if(timer[3] != 0){
			pwm_value[3] = idx - timer[3];
			flag03 = 1;
		}
	}
}
 600:	2f c0       	rjmp	.+94     	; 0x660 <__vector_4+0xca>
ISR(INT3_vect){
	if((PIND & (1 << 3))){
		timer[3] = idx;
	}
	else{
		if(timer[3] != 0){
 602:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer+0xc>
 606:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer+0xd>
 60a:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer+0xe>
 60e:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer+0xf>
 612:	89 2b       	or	r24, r25
 614:	8a 2b       	or	r24, r26
 616:	8b 2b       	or	r24, r27
 618:	19 f1       	breq	.+70     	; 0x660 <__vector_4+0xca>
			pwm_value[3] = idx - timer[3];
 61a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 61e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 622:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 626:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 62a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer+0xc>
 62e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer+0xd>
 632:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer+0xe>
 636:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer+0xf>
 63a:	79 01       	movw	r14, r18
 63c:	8a 01       	movw	r16, r20
 63e:	e8 1a       	sub	r14, r24
 640:	f9 0a       	sbc	r15, r25
 642:	0a 0b       	sbc	r16, r26
 644:	1b 0b       	sbc	r17, r27
 646:	d8 01       	movw	r26, r16
 648:	c7 01       	movw	r24, r14
 64a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <pwm_value+0xc>
 64e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <pwm_value+0xd>
 652:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <pwm_value+0xe>
 656:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <pwm_value+0xf>
			flag03 = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <flag03>
		}
	}
}
 660:	00 00       	nop
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	ff 90       	pop	r15
 680:	ef 90       	pop	r14
 682:	0f 90       	pop	r0
 684:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 688:	0f 90       	pop	r0
 68a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_5>:
// PE4
ISR(INT4_vect){
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 6a4:	0f 92       	push	r0
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
	if((PINE & (1 << 4))){
 6ca:	81 e2       	ldi	r24, 0x21	; 33
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	80 81       	ld	r24, Z
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	80 71       	andi	r24, 0x10	; 16
 6d8:	99 27       	eor	r25, r25
 6da:	89 2b       	or	r24, r25
 6dc:	89 f0       	breq	.+34     	; 0x700 <__vector_5+0x6c>
		timer[4] = idx;
 6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6ee:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer+0x10>
 6f2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <timer+0x11>
 6f6:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <timer+0x12>
 6fa:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <timer+0x13>
		if(timer[4] != 0){
			pwm_value[4] = idx - timer[4];
			flag04 = 1;
		}
	}
}
 6fe:	2f c0       	rjmp	.+94     	; 0x75e <__vector_5+0xca>
ISR(INT4_vect){
	if((PINE & (1 << 4))){
		timer[4] = idx;
	}
	else{
		if(timer[4] != 0){
 700:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer+0x10>
 704:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer+0x11>
 708:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timer+0x12>
 70c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timer+0x13>
 710:	89 2b       	or	r24, r25
 712:	8a 2b       	or	r24, r26
 714:	8b 2b       	or	r24, r27
 716:	19 f1       	breq	.+70     	; 0x75e <__vector_5+0xca>
			pwm_value[4] = idx - timer[4];
 718:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 71c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 720:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 724:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 728:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer+0x10>
 72c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer+0x11>
 730:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timer+0x12>
 734:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timer+0x13>
 738:	79 01       	movw	r14, r18
 73a:	8a 01       	movw	r16, r20
 73c:	e8 1a       	sub	r14, r24
 73e:	f9 0a       	sbc	r15, r25
 740:	0a 0b       	sbc	r16, r26
 742:	1b 0b       	sbc	r17, r27
 744:	d8 01       	movw	r26, r16
 746:	c7 01       	movw	r24, r14
 748:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pwm_value+0x10>
 74c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pwm_value+0x11>
 750:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <pwm_value+0x12>
 754:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <pwm_value+0x13>
			flag04 = 1;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <flag04>
		}
	}
}
 75e:	00 00       	nop
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	0f 90       	pop	r0
 782:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 786:	0f 90       	pop	r0
 788:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <UART_Putchar>:

void UART_Putchar(unsigned char data){
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	1f 92       	push	r1
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR0A & 0x20) == 0x0){
 79e:	00 00       	nop
 7a0:	8b e2       	ldi	r24, 0x2B	; 43
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	80 81       	ld	r24, Z
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	80 72       	andi	r24, 0x20	; 32
 7ae:	99 27       	eor	r25, r25
 7b0:	89 2b       	or	r24, r25
 7b2:	b1 f3       	breq	.-20     	; 0x7a0 <UART_Putchar+0xe>
		// UDRE0 이 1이 될때가지 대기
		// 즉 데이터 전송 버퍼가 비일때까지 대기
		// 전송버퍼가 비인다면 1로 Set 됨
		;
	}
	UDR0 = data;
 7b4:	8c e2       	ldi	r24, 0x2C	; 44
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	29 81       	ldd	r18, Y+1	; 0x01
 7ba:	fc 01       	movw	r30, r24
 7bc:	20 83       	st	Z, r18
	//데이터 씀
 7be:	00 00       	nop
 7c0:	0f 90       	pop	r0
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
