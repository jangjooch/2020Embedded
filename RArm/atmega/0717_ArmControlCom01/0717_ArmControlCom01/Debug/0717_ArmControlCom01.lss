
0717_ArmControlCom01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005a0  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800114  00800114  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a62  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004de  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002949  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ca c1       	rjmp	.+916    	; 0x39a <__vector_1>
   6:	00 00       	nop
   8:	1d c2       	rjmp	.+1082   	; 0x444 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	70 c1       	rjmp	.+736    	; 0x31a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	6b c2       	rjmp	.+1238   	; 0x59c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:


int main(void)
{
	
	TCCR1B = 0x01;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e bd       	out	0x2e, r24	; 46
	// 1 분주율
	TIMSK |= (1<<TOIE1);
  cc:	87 b7       	in	r24, 0x37	; 55
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	87 bf       	out	0x37, r24	; 55
	TCNT1 = -300;
  d2:	84 ed       	ldi	r24, 0xD4	; 212
  d4:	9e ef       	ldi	r25, 0xFE	; 254
  d6:	9d bd       	out	0x2d, r25	; 45
  d8:	8c bd       	out	0x2c, r24	; 44
	
	TCCR3A = 0x82;
  da:	82 e8       	ldi	r24, 0x82	; 130
  dc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x1A;
  e0:	8a e1       	ldi	r24, 0x1A	; 26
  e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
  e6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	ICR3 = 40000;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	9c e9       	ldi	r25, 0x9C	; 156
  ee:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	DDRE |= 0x08;
  f6:	13 9a       	sbi	0x02, 3	; 2
	
	EICRA = 0x55;
  f8:	85 e5       	ldi	r24, 0x55	; 85
  fa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x0F;
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	89 bf       	out	0x39, r24	; 57
	
	DDRB = 0xF0;
 102:	80 ef       	ldi	r24, 0xF0	; 240
 104:	87 bb       	out	0x17, r24	; 23
	
	sei();
 106:	78 94       	sei
		int maxIdx = 0;
		
		long dis1 = 0;		
		long dis2 = 0;
		
		if(pwmValue[maxIdx] < 70){
 108:	c4 e1       	ldi	r28, 0x14	; 20
 10a:	d1 e0       	ldi	r29, 0x01	; 1
			dis1 = 70 - pwmValue[maxIdx];
 10c:	0f 2e       	mov	r0, r31
 10e:	f6 e4       	ldi	r31, 0x46	; 70
 110:	8f 2e       	mov	r8, r31
 112:	91 2c       	mov	r9, r1
 114:	a1 2c       	mov	r10, r1
 116:	b1 2c       	mov	r11, r1
 118:	f0 2d       	mov	r31, r0
		if(dis1 < dis2){
			maxIdx = 1;
			PORTB = 0x40;
		}
		else{
			PORTB = 0x80;
 11a:	68 94       	set
 11c:	77 24       	eor	r7, r7
 11e:	77 f8       	bld	r7, 7
			dis2 = pwmValue[1] - 70;
		}

		if(dis1 < dis2){
			maxIdx = 1;
			PORTB = 0x40;
 120:	68 94       	set
 122:	66 24       	eor	r6, r6
 124:	66 f8       	bld	r6, 6
		else if(pwmValue[maxIdx] < 60){
			setAngel[maxIdx] = setAngel[maxIdx] - 1;
		}
		
		if(setAngel[maxIdx] > 180)
			setAngel[maxIdx] = 180;
 126:	0f 2e       	mov	r0, r31
 128:	f4 eb       	ldi	r31, 0xB4	; 180
 12a:	cf 2e       	mov	r12, r31
 12c:	d1 2c       	mov	r13, r1
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
 132:	f0 2d       	mov	r31, r0
		
		else if(setAngel[maxIdx] < 0)
			setAngel[maxIdx] = 0;
		
		OCR3A = mapping(setAngel[maxIdx], 0, 180, 1000, 5000);
 134:	06 e8       	ldi	r16, 0x86	; 134
 136:	10 e0       	ldi	r17, 0x00	; 0
		int maxIdx = 0;
		
		long dis1 = 0;		
		long dis2 = 0;
		
		if(pwmValue[maxIdx] < 70){
 138:	88 81       	ld	r24, Y
 13a:	99 81       	ldd	r25, Y+1	; 0x01
 13c:	aa 81       	ldd	r26, Y+2	; 0x02
 13e:	bb 81       	ldd	r27, Y+3	; 0x03
 140:	86 34       	cpi	r24, 0x46	; 70
 142:	91 05       	cpc	r25, r1
 144:	a1 05       	cpc	r26, r1
 146:	b1 05       	cpc	r27, r1
 148:	58 f4       	brcc	.+22     	; 0x160 <main+0x98>
			dis1 = 70 - pwmValue[maxIdx];
 14a:	88 81       	ld	r24, Y
 14c:	99 81       	ldd	r25, Y+1	; 0x01
 14e:	aa 81       	ldd	r26, Y+2	; 0x02
 150:	bb 81       	ldd	r27, Y+3	; 0x03
 152:	b5 01       	movw	r22, r10
 154:	a4 01       	movw	r20, r8
 156:	48 1b       	sub	r20, r24
 158:	59 0b       	sbc	r21, r25
 15a:	6a 0b       	sbc	r22, r26
 15c:	7b 0b       	sbc	r23, r27
 15e:	08 c0       	rjmp	.+16     	; 0x170 <main+0xa8>
		}
		else{
			dis1 = pwmValue[maxIdx] - 70;
 160:	48 81       	ld	r20, Y
 162:	59 81       	ldd	r21, Y+1	; 0x01
 164:	6a 81       	ldd	r22, Y+2	; 0x02
 166:	7b 81       	ldd	r23, Y+3	; 0x03
 168:	46 54       	subi	r20, 0x46	; 70
 16a:	51 09       	sbc	r21, r1
 16c:	61 09       	sbc	r22, r1
 16e:	71 09       	sbc	r23, r1
		}

		if(pwmValue[1] < 70){
 170:	8c 81       	ldd	r24, Y+4	; 0x04
 172:	9d 81       	ldd	r25, Y+5	; 0x05
 174:	ae 81       	ldd	r26, Y+6	; 0x06
 176:	bf 81       	ldd	r27, Y+7	; 0x07
 178:	86 34       	cpi	r24, 0x46	; 70
 17a:	91 05       	cpc	r25, r1
 17c:	a1 05       	cpc	r26, r1
 17e:	b1 05       	cpc	r27, r1
 180:	68 f4       	brcc	.+26     	; 0x19c <main+0xd4>
			dis2 = 70 - pwmValue[1];
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	9d 81       	ldd	r25, Y+5	; 0x05
 186:	ae 81       	ldd	r26, Y+6	; 0x06
 188:	bf 81       	ldd	r27, Y+7	; 0x07
 18a:	14 01       	movw	r2, r8
 18c:	25 01       	movw	r4, r10
 18e:	28 1a       	sub	r2, r24
 190:	39 0a       	sbc	r3, r25
 192:	4a 0a       	sbc	r4, r26
 194:	5b 0a       	sbc	r5, r27
 196:	d2 01       	movw	r26, r4
 198:	c1 01       	movw	r24, r2
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <main+0xe4>
		}
		else{
			dis2 = pwmValue[1] - 70;
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	9d 81       	ldd	r25, Y+5	; 0x05
 1a0:	ae 81       	ldd	r26, Y+6	; 0x06
 1a2:	bf 81       	ldd	r27, Y+7	; 0x07
 1a4:	86 54       	subi	r24, 0x46	; 70
 1a6:	91 09       	sbc	r25, r1
 1a8:	a1 09       	sbc	r26, r1
 1aa:	b1 09       	sbc	r27, r1
		}

		if(dis1 < dis2){
 1ac:	48 17       	cp	r20, r24
 1ae:	59 07       	cpc	r21, r25
 1b0:	6a 07       	cpc	r22, r26
 1b2:	7b 07       	cpc	r23, r27
 1b4:	24 f4       	brge	.+8      	; 0x1be <main+0xf6>
			maxIdx = 1;
			PORTB = 0x40;
 1b6:	68 ba       	out	0x18, r6	; 24
		else{
			dis2 = pwmValue[1] - 70;
		}

		if(dis1 < dis2){
			maxIdx = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0xfc>
			PORTB = 0x40;
		}
		else{
			PORTB = 0x80;
 1be:	78 ba       	out	0x18, r7	; 24
	sei();
	
    /* Replace with your application code */
    while (1) 
    {
		int maxIdx = 0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			PORTB = 0x80;
		}
		
		if(pwmValue[maxIdx] > 80){
 1c4:	fc 01       	movw	r30, r24
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ec 5e       	subi	r30, 0xEC	; 236
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	40 81       	ld	r20, Z
 1d4:	51 81       	ldd	r21, Z+1	; 0x01
 1d6:	62 81       	ldd	r22, Z+2	; 0x02
 1d8:	73 81       	ldd	r23, Z+3	; 0x03
 1da:	41 35       	cpi	r20, 0x51	; 81
 1dc:	51 05       	cpc	r21, r1
 1de:	61 05       	cpc	r22, r1
 1e0:	71 05       	cpc	r23, r1
 1e2:	a0 f0       	brcs	.+40     	; 0x20c <main+0x144>
			setAngel[maxIdx] = setAngel[maxIdx] + 1;
 1e4:	fc 01       	movw	r30, r24
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	40 81       	ld	r20, Z
 1f4:	51 81       	ldd	r21, Z+1	; 0x01
 1f6:	62 81       	ldd	r22, Z+2	; 0x02
 1f8:	73 81       	ldd	r23, Z+3	; 0x03
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
 1fe:	6f 4f       	sbci	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	40 83       	st	Z, r20
 204:	51 83       	std	Z+1, r21	; 0x01
 206:	62 83       	std	Z+2, r22	; 0x02
 208:	73 83       	std	Z+3, r23	; 0x03
 20a:	23 c0       	rjmp	.+70     	; 0x252 <main+0x18a>
		}
		else if(pwmValue[maxIdx] < 60){
 20c:	fc 01       	movw	r30, r24
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	ec 5e       	subi	r30, 0xEC	; 236
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	40 81       	ld	r20, Z
 21c:	51 81       	ldd	r21, Z+1	; 0x01
 21e:	62 81       	ldd	r22, Z+2	; 0x02
 220:	73 81       	ldd	r23, Z+3	; 0x03
 222:	4c 33       	cpi	r20, 0x3C	; 60
 224:	51 05       	cpc	r21, r1
 226:	61 05       	cpc	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	98 f4       	brcc	.+38     	; 0x252 <main+0x18a>
			setAngel[maxIdx] = setAngel[maxIdx] - 1;
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e0 50       	subi	r30, 0x00	; 0
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	40 81       	ld	r20, Z
 23c:	51 81       	ldd	r21, Z+1	; 0x01
 23e:	62 81       	ldd	r22, Z+2	; 0x02
 240:	73 81       	ldd	r23, Z+3	; 0x03
 242:	41 50       	subi	r20, 0x01	; 1
 244:	51 09       	sbc	r21, r1
 246:	61 09       	sbc	r22, r1
 248:	71 09       	sbc	r23, r1
 24a:	40 83       	st	Z, r20
 24c:	51 83       	std	Z+1, r21	; 0x01
 24e:	62 83       	std	Z+2, r22	; 0x02
 250:	73 83       	std	Z+3, r23	; 0x03
		}
		
		if(setAngel[maxIdx] > 180)
 252:	fc 01       	movw	r30, r24
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	40 81       	ld	r20, Z
 262:	51 81       	ldd	r21, Z+1	; 0x01
 264:	62 81       	ldd	r22, Z+2	; 0x02
 266:	73 81       	ldd	r23, Z+3	; 0x03
 268:	45 3b       	cpi	r20, 0xB5	; 181
 26a:	51 05       	cpc	r21, r1
 26c:	61 05       	cpc	r22, r1
 26e:	71 05       	cpc	r23, r1
 270:	64 f0       	brlt	.+24     	; 0x28a <main+0x1c2>
			setAngel[maxIdx] = 180;
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	e0 50       	subi	r30, 0x00	; 0
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	c0 82       	st	Z, r12
 282:	d1 82       	std	Z+1, r13	; 0x01
 284:	e2 82       	std	Z+2, r14	; 0x02
 286:	f3 82       	std	Z+3, r15	; 0x03
 288:	18 c0       	rjmp	.+48     	; 0x2ba <main+0x1f2>
		
		else if(setAngel[maxIdx] < 0)
 28a:	fc 01       	movw	r30, r24
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	e0 50       	subi	r30, 0x00	; 0
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	40 81       	ld	r20, Z
 29a:	51 81       	ldd	r21, Z+1	; 0x01
 29c:	62 81       	ldd	r22, Z+2	; 0x02
 29e:	73 81       	ldd	r23, Z+3	; 0x03
 2a0:	77 23       	and	r23, r23
 2a2:	5c f4       	brge	.+22     	; 0x2ba <main+0x1f2>
			setAngel[maxIdx] = 0;
 2a4:	fc 01       	movw	r30, r24
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	e0 50       	subi	r30, 0x00	; 0
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	10 82       	st	Z, r1
 2b4:	11 82       	std	Z+1, r1	; 0x01
 2b6:	12 82       	std	Z+2, r1	; 0x02
 2b8:	13 82       	std	Z+3, r1	; 0x03
		
		OCR3A = mapping(setAngel[maxIdx], 0, 180, 1000, 5000);
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	fc 01       	movw	r30, r24
 2c4:	e0 50       	subi	r30, 0x00	; 0
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	80 81       	ld	r24, Z
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	a2 81       	ldd	r26, Z+2	; 0x02
 2ce:	b3 81       	ldd	r27, Z+3	; 0x03
 2d0:	bb 23       	and	r27, r27
 2d2:	24 f4       	brge	.+8      	; 0x2dc <main+0x214>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	9c 01       	movw	r18, r24
 2de:	ad 01       	movw	r20, r26
 2e0:	85 3b       	cpi	r24, 0xB5	; 181
 2e2:	91 05       	cpc	r25, r1
 2e4:	a1 05       	cpc	r26, r1
 2e6:	b1 05       	cpc	r27, r1
 2e8:	14 f0       	brlt	.+4      	; 0x2ee <main+0x226>
 2ea:	a7 01       	movw	r20, r14
 2ec:	96 01       	movw	r18, r12
 2ee:	a0 ea       	ldi	r26, 0xA0	; 160
 2f0:	bf e0       	ldi	r27, 0x0F	; 15
 2f2:	19 d1       	rcall	.+562    	; 0x526 <__muluhisi3>
 2f4:	a7 01       	movw	r20, r14
 2f6:	96 01       	movw	r18, r12
 2f8:	fa d0       	rcall	.+500    	; 0x4ee <__divmodsi4>
 2fa:	da 01       	movw	r26, r20
 2fc:	c9 01       	movw	r24, r18
 2fe:	88 51       	subi	r24, 0x18	; 24
 300:	9c 4f       	sbci	r25, 0xFC	; 252
 302:	af 4f       	sbci	r26, 0xFF	; 255
 304:	bf 4f       	sbci	r27, 0xFF	; 255
 306:	f8 01       	movw	r30, r16
 308:	91 83       	std	Z+1, r25	; 0x01
 30a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	87 ea       	ldi	r24, 0xA7	; 167
 30e:	91 e6       	ldi	r25, 0x61	; 97
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x248>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x24e>
 316:	00 00       	nop
 318:	0f cf       	rjmp	.-482    	; 0x138 <main+0x70>

0000031a <__vector_14>:
}




ISR(TIMER1_OVF_vect){
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
	TCNT1 = -300;
 32e:	84 ed       	ldi	r24, 0xD4	; 212
 330:	9e ef       	ldi	r25, 0xFE	; 254
 332:	9d bd       	out	0x2d, r25	; 45
 334:	8c bd       	out	0x2c, r24	; 44
	idx = idx + 1;
 336:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 33a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 33e:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 342:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <idx>
 350:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <idx+0x1>
 354:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <idx+0x2>
 358:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <idx+0x3>
	if(idx > 60000){
 35c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 360:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 364:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 368:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 36c:	81 36       	cpi	r24, 0x61	; 97
 36e:	9a 4e       	sbci	r25, 0xEA	; 234
 370:	a1 05       	cpc	r26, r1
 372:	b1 05       	cpc	r27, r1
 374:	40 f0       	brcs	.+16     	; 0x386 <__vector_14+0x6c>
		idx = 0;
 376:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <idx>
 37a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <idx+0x1>
 37e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <idx+0x2>
 382:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <idx+0x3>
	}
}
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_1>:


ISR(INT0_vect){
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
		if( (PIND & 0x01 ) ){
 3b4:	80 9b       	sbis	0x10, 0	; 16
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <__vector_1+0x40>
			timer[0] = idx;
 3b8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 3bc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 3c0:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 3c4:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 3c8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <timer>
 3cc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <timer+0x1>
 3d0:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <timer+0x2>
 3d4:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <timer+0x3>
 3d8:	28 c0       	rjmp	.+80     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else{
			if(timer[0] != 0){
 3da:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <timer>
 3de:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <timer+0x1>
 3e2:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <timer+0x2>
 3e6:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <timer+0x3>
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	e1 f0       	breq	.+56     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				pwmValue[0] = idx - timer[0];
 3f2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 3f6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 3fa:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 3fe:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 402:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <timer>
 406:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <timer+0x1>
 40a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <timer+0x2>
 40e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <timer+0x3>
 412:	84 1b       	sub	r24, r20
 414:	95 0b       	sbc	r25, r21
 416:	a6 0b       	sbc	r26, r22
 418:	b7 0b       	sbc	r27, r23
 41a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 41e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 422:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 426:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
			}
		}
}
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_2>:

ISR(INT1_vect){
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
		if( (PIND & ( 0x02 ) ) ){
 45e:	81 9b       	sbis	0x10, 1	; 16
 460:	11 c0       	rjmp	.+34     	; 0x484 <__vector_2+0x40>
			timer[1] = idx;
 462:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 466:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 46a:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 46e:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 472:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timer+0x4>
 476:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timer+0x5>
 47a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timer+0x6>
 47e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timer+0x7>
 482:	28 c0       	rjmp	.+80     	; 0x4d4 <__vector_2+0x90>
		}
		else{
			if(timer[1] != 0){
 484:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <timer+0x4>
 488:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <timer+0x5>
 48c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <timer+0x6>
 490:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <timer+0x7>
 494:	89 2b       	or	r24, r25
 496:	8a 2b       	or	r24, r26
 498:	8b 2b       	or	r24, r27
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <__vector_2+0x90>
				pwmValue[1] = idx - timer[1];
 49c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 4a0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 4a4:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 4a8:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 4ac:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <timer+0x4>
 4b0:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <timer+0x5>
 4b4:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <timer+0x6>
 4b8:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <timer+0x7>
 4bc:	84 1b       	sub	r24, r20
 4be:	95 0b       	sbc	r25, r21
 4c0:	a6 0b       	sbc	r26, r22
 4c2:	b7 0b       	sbc	r27, r23
 4c4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x4>
 4c8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x5>
 4cc:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x6>
 4d0:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x7>
			}
		}
}
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	7f 91       	pop	r23
 4de:	6f 91       	pop	r22
 4e0:	5f 91       	pop	r21
 4e2:	4f 91       	pop	r20
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__divmodsi4>:
 4ee:	05 2e       	mov	r0, r21
 4f0:	97 fb       	bst	r25, 7
 4f2:	16 f4       	brtc	.+4      	; 0x4f8 <__divmodsi4+0xa>
 4f4:	00 94       	com	r0
 4f6:	0f d0       	rcall	.+30     	; 0x516 <__negsi2>
 4f8:	57 fd       	sbrc	r21, 7
 4fa:	05 d0       	rcall	.+10     	; 0x506 <__divmodsi4_neg2>
 4fc:	1e d0       	rcall	.+60     	; 0x53a <__udivmodsi4>
 4fe:	07 fc       	sbrc	r0, 7
 500:	02 d0       	rcall	.+4      	; 0x506 <__divmodsi4_neg2>
 502:	46 f4       	brtc	.+16     	; 0x514 <__divmodsi4_exit>
 504:	08 c0       	rjmp	.+16     	; 0x516 <__negsi2>

00000506 <__divmodsi4_neg2>:
 506:	50 95       	com	r21
 508:	40 95       	com	r20
 50a:	30 95       	com	r19
 50c:	21 95       	neg	r18
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	4f 4f       	sbci	r20, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255

00000514 <__divmodsi4_exit>:
 514:	08 95       	ret

00000516 <__negsi2>:
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__muluhisi3>:
 526:	2b d0       	rcall	.+86     	; 0x57e <__umulhisi3>
 528:	a5 9f       	mul	r26, r21
 52a:	90 0d       	add	r25, r0
 52c:	b4 9f       	mul	r27, r20
 52e:	90 0d       	add	r25, r0
 530:	a4 9f       	mul	r26, r20
 532:	80 0d       	add	r24, r0
 534:	91 1d       	adc	r25, r1
 536:	11 24       	eor	r1, r1
 538:	08 95       	ret

0000053a <__udivmodsi4>:
 53a:	a1 e2       	ldi	r26, 0x21	; 33
 53c:	1a 2e       	mov	r1, r26
 53e:	aa 1b       	sub	r26, r26
 540:	bb 1b       	sub	r27, r27
 542:	fd 01       	movw	r30, r26
 544:	0d c0       	rjmp	.+26     	; 0x560 <__udivmodsi4_ep>

00000546 <__udivmodsi4_loop>:
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	ee 1f       	adc	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	a2 17       	cp	r26, r18
 550:	b3 07       	cpc	r27, r19
 552:	e4 07       	cpc	r30, r20
 554:	f5 07       	cpc	r31, r21
 556:	20 f0       	brcs	.+8      	; 0x560 <__udivmodsi4_ep>
 558:	a2 1b       	sub	r26, r18
 55a:	b3 0b       	sbc	r27, r19
 55c:	e4 0b       	sbc	r30, r20
 55e:	f5 0b       	sbc	r31, r21

00000560 <__udivmodsi4_ep>:
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	1a 94       	dec	r1
 56a:	69 f7       	brne	.-38     	; 0x546 <__udivmodsi4_loop>
 56c:	60 95       	com	r22
 56e:	70 95       	com	r23
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	bd 01       	movw	r22, r26
 57a:	cf 01       	movw	r24, r30
 57c:	08 95       	ret

0000057e <__umulhisi3>:
 57e:	a2 9f       	mul	r26, r18
 580:	b0 01       	movw	r22, r0
 582:	b3 9f       	mul	r27, r19
 584:	c0 01       	movw	r24, r0
 586:	a3 9f       	mul	r26, r19
 588:	70 0d       	add	r23, r0
 58a:	81 1d       	adc	r24, r1
 58c:	11 24       	eor	r1, r1
 58e:	91 1d       	adc	r25, r1
 590:	b2 9f       	mul	r27, r18
 592:	70 0d       	add	r23, r0
 594:	81 1d       	adc	r24, r1
 596:	11 24       	eor	r1, r1
 598:	91 1d       	adc	r25, r1
 59a:	08 95       	ret

0000059c <_exit>:
 59c:	f8 94       	cli

0000059e <__stop_program>:
 59e:	ff cf       	rjmp	.-2      	; 0x59e <__stop_program>
