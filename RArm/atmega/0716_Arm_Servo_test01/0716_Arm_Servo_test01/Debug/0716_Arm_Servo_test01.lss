
0716_Arm_Servo_test01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000600  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ea  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000334  00000000  00000000  00002029  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	d6 c0       	rjmp	.+428    	; 0x1b2 <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c1       	rjmp	.+642    	; 0x2bc <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	6e c2       	rjmp	.+1244   	; 0x588 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
volatile unsigned long pwmValue = 0;

long mapping(long x, long in_min, long in_max, long out_min, long out_max);

int main(void)
{
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	
	TCCR1B = 0x01;
  ca:	8e e4       	ldi	r24, 0x4E	; 78
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	// 8분주율
	TIMSK = (1<<TOIE1);
  d4:	87 e5       	ldi	r24, 0x57	; 87
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	24 e0       	ldi	r18, 0x04	; 4
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	// TImer 1 Overflow Enable
	TCNT1 = -300;
  de:	8c e4       	ldi	r24, 0x4C	; 76
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	24 ed       	ldi	r18, 0xD4	; 212
  e4:	3e ef       	ldi	r19, 0xFE	; 254
  e6:	fc 01       	movw	r30, r24
  e8:	31 83       	std	Z+1, r19	; 0x01
  ea:	20 83       	st	Z, r18

	// 1분주율 -8000 -> 1/16 * 1 * 8000 = 500;
	// 50 ~ 90. 중간 : 70
	
	// Motor 제어 Duty Cycle 생성 16bit timer
	TCCR3A = 0x82;
  ec:	8b e8       	ldi	r24, 0x8B	; 139
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	22 e8       	ldi	r18, 0x82	; 130
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	// COMA1 COMA0 : 1 0 -> ICR1을 만나면 Clear
	// WGM11 WGM10 : 1 0 -> 14번모드 1 1 1 0 을 위함
	TCCR3B = 0x1A;
  f6:	8a e8       	ldi	r24, 0x8A	; 138
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2a e1       	ldi	r18, 0x1A	; 26
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	// WGM13 WGM12 : 1 1 -> 14번모드 1 1 1 0 을 위함
	// CS12 CS11 CS10 : 분주율 8 -> 0 1 0 을 위함
	TCCR3C = 0x00;
 100:	8c e8       	ldi	r24, 0x8C	; 140
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	10 82       	st	Z, r1
	// PWM모드에서는 출력할 것이 없다.
	ICR3 = 40000;
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	20 e4       	ldi	r18, 0x40	; 64
 10e:	3c e9       	ldi	r19, 0x9C	; 156
 110:	fc 01       	movw	r30, r24
 112:	31 83       	std	Z+1, r19	; 0x01
 114:	20 83       	st	Z, r18
	// TOP 설정
	// 분주 = 1/16 * 8 * 40000 = 20000nanoSec = 20ms
	// Duty Cycle 설정
	DDRE = 0x0F;
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	2f e0       	ldi	r18, 0x0F	; 15
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	// OC3A 출력  -> PE3
	// INT 4 입력 -> PE4
	DDRC = 0xF0;
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 ef       	ldi	r18, 0xF0	; 240
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	
	// pwm 입력측정을 위한 외부 Interrupt
	EICRA = 0x01;
 12a:	8a e6       	ldi	r24, 0x6A	; 106
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	// INT 3, 2, 1, 0
	// Change 설정
	//EICRB = 0x01;
	// INT 4
	// Change 설정 Change -> 0 1
	EIMSK = 0x01;
 134:	89 e5       	ldi	r24, 0x59	; 89
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	// INT 4, 3, 2, 1, 0 Enable
	
	sei();
 13e:	78 94       	sei
	
    while (1) 
    {
		if(pwmValue <0){
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pwmValue>
 144:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <pwmValue+0x1>
 148:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <pwmValue+0x2>
 14c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <pwmValue+0x3>
			pwmValue = -pwmValue;
		}
		//OCR3A = mapping(idx, 50, 60000, 1000, 5000);
		OCR3A = mapping(pwmValue, 50, 90, 1000, 5000);
 150:	0f 2e       	mov	r0, r31
 152:	f6 e8       	ldi	r31, 0x86	; 134
 154:	8f 2e       	mov	r8, r31
 156:	91 2c       	mov	r9, r1
 158:	f0 2d       	mov	r31, r0
 15a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pwmValue>
 15e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <pwmValue+0x1>
 162:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <pwmValue+0x2>
 166:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <pwmValue+0x3>
 16a:	1f 92       	push	r1
 16c:	1f 92       	push	r1
 16e:	23 e1       	ldi	r18, 0x13	; 19
 170:	2f 93       	push	r18
 172:	28 e8       	ldi	r18, 0x88	; 136
 174:	2f 93       	push	r18
 176:	0f 2e       	mov	r0, r31
 178:	f8 ee       	ldi	r31, 0xE8	; 232
 17a:	af 2e       	mov	r10, r31
 17c:	f3 e0       	ldi	r31, 0x03	; 3
 17e:	bf 2e       	mov	r11, r31
 180:	c1 2c       	mov	r12, r1
 182:	d1 2c       	mov	r13, r1
 184:	f0 2d       	mov	r31, r0
 186:	1a e5       	ldi	r17, 0x5A	; 90
 188:	e1 2e       	mov	r14, r17
 18a:	f1 2c       	mov	r15, r1
 18c:	00 e0       	ldi	r16, 0x00	; 0
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	22 e3       	ldi	r18, 0x32	; 50
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	e7 d0       	rcall	.+462    	; 0x36c <mapping>
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	dc 01       	movw	r26, r24
 1a8:	cb 01       	movw	r24, r22
 1aa:	f4 01       	movw	r30, r8
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
		//OCR3A = 5000;
    }
 1b0:	c7 cf       	rjmp	.-114    	; 0x140 <main+0x92>

000001b2 <__vector_1>:
}
// PD0
ISR(INT0_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1c2:	0f 92       	push	r0
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	if( (PIND & 0x01) == 0x01 ){
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	99 27       	eor	r25, r25
 1f8:	89 2b       	or	r24, r25
 1fa:	b1 f0       	breq	.+44     	; 0x228 <__vector_1+0x76>
		PORTC = 0x80;
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	20 e8       	ldi	r18, 0x80	; 128
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
		timerSet = idx;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 216:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timerSet>
 21a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timerSet+0x1>
 21e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timerSet+0x2>
 222:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timerSet+0x3>
		PORTC = 0x00;
		if(timerSet != 0){
			pwmValue = idx - timerSet;
		}
	}
}
 226:	30 c0       	rjmp	.+96     	; 0x288 <__vector_1+0xd6>
	if( (PIND & 0x01) == 0x01 ){
		PORTC = 0x80;
		timerSet = idx;
	}
	else{
		PORTC = 0x00;
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
		if(timerSet != 0){
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerSet>
 234:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerSet+0x1>
 238:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerSet+0x2>
 23c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerSet+0x3>
 240:	89 2b       	or	r24, r25
 242:	8a 2b       	or	r24, r26
 244:	8b 2b       	or	r24, r27
 246:	01 f1       	breq	.+64     	; 0x288 <__vector_1+0xd6>
			pwmValue = idx - timerSet;
 248:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 250:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 254:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 258:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerSet>
 25c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerSet+0x1>
 260:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timerSet+0x2>
 264:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timerSet+0x3>
 268:	79 01       	movw	r14, r18
 26a:	8a 01       	movw	r16, r20
 26c:	e8 1a       	sub	r14, r24
 26e:	f9 0a       	sbc	r15, r25
 270:	0a 0b       	sbc	r16, r26
 272:	1b 0b       	sbc	r17, r27
 274:	d8 01       	movw	r26, r16
 276:	c7 01       	movw	r24, r14
 278:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pwmValue>
 27c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <pwmValue+0x1>
 280:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <pwmValue+0x2>
 284:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <pwmValue+0x3>
		}
	}
}
 288:	00 00       	nop
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	0f 90       	pop	r0
 2ac:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2b0:	0f 90       	pop	r0
 2b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_14>:

ISR(TIMER1_OVF_vect){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2cc:	0f 92       	push	r0
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = -300;
 2e6:	8c e4       	ldi	r24, 0x4C	; 76
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	24 ed       	ldi	r18, 0xD4	; 212
 2ec:	3e ef       	ldi	r19, 0xFE	; 254
 2ee:	fc 01       	movw	r30, r24
 2f0:	31 83       	std	Z+1, r19	; 0x01
 2f2:	20 83       	st	Z, r18
	idx = idx + 1;
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 300:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	b1 1d       	adc	r27, r1
 30a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 30e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 312:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 316:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if(idx > 60000){
 31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 322:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 326:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 32a:	81 36       	cpi	r24, 0x61	; 97
 32c:	9a 4e       	sbci	r25, 0xEA	; 234
 32e:	a1 05       	cpc	r26, r1
 330:	b1 05       	cpc	r27, r1
 332:	40 f0       	brcs	.+16     	; 0x344 <__vector_14+0x88>
		idx = 0;
 334:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 338:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 33c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 340:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}
}
 344:	00 00       	nop
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 360:	0f 90       	pop	r0
 362:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <mapping>:

long mapping(long x, long in_min, long in_max, long out_min, long out_max)
{
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	64 97       	sbiw	r28, 0x14	; 20
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	6d 83       	std	Y+5, r22	; 0x05
 392:	7e 83       	std	Y+6, r23	; 0x06
 394:	8f 83       	std	Y+7, r24	; 0x07
 396:	98 87       	std	Y+8, r25	; 0x08
 398:	29 87       	std	Y+9, r18	; 0x09
 39a:	3a 87       	std	Y+10, r19	; 0x0a
 39c:	4b 87       	std	Y+11, r20	; 0x0b
 39e:	5c 87       	std	Y+12, r21	; 0x0c
 3a0:	ed 86       	std	Y+13, r14	; 0x0d
 3a2:	fe 86       	std	Y+14, r15	; 0x0e
 3a4:	0f 87       	std	Y+15, r16	; 0x0f
 3a6:	18 8b       	std	Y+16, r17	; 0x10
 3a8:	a9 8a       	std	Y+17, r10	; 0x11
 3aa:	ba 8a       	std	Y+18, r11	; 0x12
 3ac:	cb 8a       	std	Y+19, r12	; 0x13
 3ae:	dc 8a       	std	Y+20, r13	; 0x14
	if(x > in_max){
 3b0:	2d 81       	ldd	r18, Y+5	; 0x05
 3b2:	3e 81       	ldd	r19, Y+6	; 0x06
 3b4:	4f 81       	ldd	r20, Y+7	; 0x07
 3b6:	58 85       	ldd	r21, Y+8	; 0x08
 3b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 3bc:	af 85       	ldd	r26, Y+15	; 0x0f
 3be:	b8 89       	ldd	r27, Y+16	; 0x10
 3c0:	82 17       	cp	r24, r18
 3c2:	93 07       	cpc	r25, r19
 3c4:	a4 07       	cpc	r26, r20
 3c6:	b5 07       	cpc	r27, r21
 3c8:	4c f4       	brge	.+18     	; 0x3dc <mapping+0x70>
		x = in_max;
 3ca:	8d 85       	ldd	r24, Y+13	; 0x0d
 3cc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ce:	af 85       	ldd	r26, Y+15	; 0x0f
 3d0:	b8 89       	ldd	r27, Y+16	; 0x10
 3d2:	8d 83       	std	Y+5, r24	; 0x05
 3d4:	9e 83       	std	Y+6, r25	; 0x06
 3d6:	af 83       	std	Y+7, r26	; 0x07
 3d8:	b8 87       	std	Y+8, r27	; 0x08
 3da:	15 c0       	rjmp	.+42     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	}
	else if(x < in_min){
 3dc:	2d 81       	ldd	r18, Y+5	; 0x05
 3de:	3e 81       	ldd	r19, Y+6	; 0x06
 3e0:	4f 81       	ldd	r20, Y+7	; 0x07
 3e2:	58 85       	ldd	r21, Y+8	; 0x08
 3e4:	89 85       	ldd	r24, Y+9	; 0x09
 3e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e8:	ab 85       	ldd	r26, Y+11	; 0x0b
 3ea:	bc 85       	ldd	r27, Y+12	; 0x0c
 3ec:	28 17       	cp	r18, r24
 3ee:	39 07       	cpc	r19, r25
 3f0:	4a 07       	cpc	r20, r26
 3f2:	5b 07       	cpc	r21, r27
 3f4:	44 f4       	brge	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		x = in_min;
 3f6:	89 85       	ldd	r24, Y+9	; 0x09
 3f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 3fa:	ab 85       	ldd	r26, Y+11	; 0x0b
 3fc:	bc 85       	ldd	r27, Y+12	; 0x0c
 3fe:	8d 83       	std	Y+5, r24	; 0x05
 400:	9e 83       	std	Y+6, r25	; 0x06
 402:	af 83       	std	Y+7, r26	; 0x07
 404:	b8 87       	std	Y+8, r27	; 0x08
	}
	unsigned long result = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 406:	2d 81       	ldd	r18, Y+5	; 0x05
 408:	3e 81       	ldd	r19, Y+6	; 0x06
 40a:	4f 81       	ldd	r20, Y+7	; 0x07
 40c:	58 85       	ldd	r21, Y+8	; 0x08
 40e:	89 85       	ldd	r24, Y+9	; 0x09
 410:	9a 85       	ldd	r25, Y+10	; 0x0a
 412:	ab 85       	ldd	r26, Y+11	; 0x0b
 414:	bc 85       	ldd	r27, Y+12	; 0x0c
 416:	79 01       	movw	r14, r18
 418:	8a 01       	movw	r16, r20
 41a:	e8 1a       	sub	r14, r24
 41c:	f9 0a       	sbc	r15, r25
 41e:	0a 0b       	sbc	r16, r26
 420:	1b 0b       	sbc	r17, r27
 422:	29 a1       	ldd	r18, Y+33	; 0x21
 424:	3a a1       	ldd	r19, Y+34	; 0x22
 426:	4b a1       	ldd	r20, Y+35	; 0x23
 428:	5c a1       	ldd	r21, Y+36	; 0x24
 42a:	89 89       	ldd	r24, Y+17	; 0x11
 42c:	9a 89       	ldd	r25, Y+18	; 0x12
 42e:	ab 89       	ldd	r26, Y+19	; 0x13
 430:	bc 89       	ldd	r27, Y+20	; 0x14
 432:	59 01       	movw	r10, r18
 434:	6a 01       	movw	r12, r20
 436:	a8 1a       	sub	r10, r24
 438:	b9 0a       	sbc	r11, r25
 43a:	ca 0a       	sbc	r12, r26
 43c:	db 0a       	sbc	r13, r27
 43e:	d6 01       	movw	r26, r12
 440:	c5 01       	movw	r24, r10
 442:	a8 01       	movw	r20, r16
 444:	97 01       	movw	r18, r14
 446:	bc 01       	movw	r22, r24
 448:	cd 01       	movw	r24, r26
 44a:	38 d0       	rcall	.+112    	; 0x4bc <__mulsi3>
 44c:	7b 01       	movw	r14, r22
 44e:	8c 01       	movw	r16, r24
 450:	2d 85       	ldd	r18, Y+13	; 0x0d
 452:	3e 85       	ldd	r19, Y+14	; 0x0e
 454:	4f 85       	ldd	r20, Y+15	; 0x0f
 456:	58 89       	ldd	r21, Y+16	; 0x10
 458:	89 85       	ldd	r24, Y+9	; 0x09
 45a:	9a 85       	ldd	r25, Y+10	; 0x0a
 45c:	ab 85       	ldd	r26, Y+11	; 0x0b
 45e:	bc 85       	ldd	r27, Y+12	; 0x0c
 460:	28 1b       	sub	r18, r24
 462:	39 0b       	sbc	r19, r25
 464:	4a 0b       	sbc	r20, r26
 466:	5b 0b       	sbc	r21, r27
 468:	c8 01       	movw	r24, r16
 46a:	b7 01       	movw	r22, r14
 46c:	36 d0       	rcall	.+108    	; 0x4da <__divmodsi4>
 46e:	da 01       	movw	r26, r20
 470:	c9 01       	movw	r24, r18
 472:	9c 01       	movw	r18, r24
 474:	ad 01       	movw	r20, r26
 476:	89 89       	ldd	r24, Y+17	; 0x11
 478:	9a 89       	ldd	r25, Y+18	; 0x12
 47a:	ab 89       	ldd	r26, Y+19	; 0x13
 47c:	bc 89       	ldd	r27, Y+20	; 0x14
 47e:	82 0f       	add	r24, r18
 480:	93 1f       	adc	r25, r19
 482:	a4 1f       	adc	r26, r20
 484:	b5 1f       	adc	r27, r21
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	9a 83       	std	Y+2, r25	; 0x02
 48a:	ab 83       	std	Y+3, r26	; 0x03
 48c:	bc 83       	std	Y+4, r27	; 0x04
	return result;
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	ab 81       	ldd	r26, Y+3	; 0x03
 494:	bc 81       	ldd	r27, Y+4	; 0x04
}
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	64 96       	adiw	r28, 0x14	; 20
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	08 95       	ret

000004bc <__mulsi3>:
 4bc:	db 01       	movw	r26, r22
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	27 d0       	rcall	.+78     	; 0x512 <__muluhisi3>
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	a2 9f       	mul	r26, r18
 4ca:	80 0d       	add	r24, r0
 4cc:	91 1d       	adc	r25, r1
 4ce:	a3 9f       	mul	r26, r19
 4d0:	90 0d       	add	r25, r0
 4d2:	b2 9f       	mul	r27, r18
 4d4:	90 0d       	add	r25, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	08 95       	ret

000004da <__divmodsi4>:
 4da:	05 2e       	mov	r0, r21
 4dc:	97 fb       	bst	r25, 7
 4de:	16 f4       	brtc	.+4      	; 0x4e4 <__divmodsi4+0xa>
 4e0:	00 94       	com	r0
 4e2:	0f d0       	rcall	.+30     	; 0x502 <__negsi2>
 4e4:	57 fd       	sbrc	r21, 7
 4e6:	05 d0       	rcall	.+10     	; 0x4f2 <__divmodsi4_neg2>
 4e8:	1e d0       	rcall	.+60     	; 0x526 <__udivmodsi4>
 4ea:	07 fc       	sbrc	r0, 7
 4ec:	02 d0       	rcall	.+4      	; 0x4f2 <__divmodsi4_neg2>
 4ee:	46 f4       	brtc	.+16     	; 0x500 <__divmodsi4_exit>
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <__negsi2>

000004f2 <__divmodsi4_neg2>:
 4f2:	50 95       	com	r21
 4f4:	40 95       	com	r20
 4f6:	30 95       	com	r19
 4f8:	21 95       	neg	r18
 4fa:	3f 4f       	sbci	r19, 0xFF	; 255
 4fc:	4f 4f       	sbci	r20, 0xFF	; 255
 4fe:	5f 4f       	sbci	r21, 0xFF	; 255

00000500 <__divmodsi4_exit>:
 500:	08 95       	ret

00000502 <__negsi2>:
 502:	90 95       	com	r25
 504:	80 95       	com	r24
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <__muluhisi3>:
 512:	2b d0       	rcall	.+86     	; 0x56a <__umulhisi3>
 514:	a5 9f       	mul	r26, r21
 516:	90 0d       	add	r25, r0
 518:	b4 9f       	mul	r27, r20
 51a:	90 0d       	add	r25, r0
 51c:	a4 9f       	mul	r26, r20
 51e:	80 0d       	add	r24, r0
 520:	91 1d       	adc	r25, r1
 522:	11 24       	eor	r1, r1
 524:	08 95       	ret

00000526 <__udivmodsi4>:
 526:	a1 e2       	ldi	r26, 0x21	; 33
 528:	1a 2e       	mov	r1, r26
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	fd 01       	movw	r30, r26
 530:	0d c0       	rjmp	.+26     	; 0x54c <__udivmodsi4_ep>

00000532 <__udivmodsi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	ee 1f       	adc	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	a2 17       	cp	r26, r18
 53c:	b3 07       	cpc	r27, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__udivmodsi4_ep>
 544:	a2 1b       	sub	r26, r18
 546:	b3 0b       	sbc	r27, r19
 548:	e4 0b       	sbc	r30, r20
 54a:	f5 0b       	sbc	r31, r21

0000054c <__udivmodsi4_ep>:
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a 94       	dec	r1
 556:	69 f7       	brne	.-38     	; 0x532 <__udivmodsi4_loop>
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	bd 01       	movw	r22, r26
 566:	cf 01       	movw	r24, r30
 568:	08 95       	ret

0000056a <__umulhisi3>:
 56a:	a2 9f       	mul	r26, r18
 56c:	b0 01       	movw	r22, r0
 56e:	b3 9f       	mul	r27, r19
 570:	c0 01       	movw	r24, r0
 572:	a3 9f       	mul	r26, r19
 574:	70 0d       	add	r23, r0
 576:	81 1d       	adc	r24, r1
 578:	11 24       	eor	r1, r1
 57a:	91 1d       	adc	r25, r1
 57c:	b2 9f       	mul	r27, r18
 57e:	70 0d       	add	r23, r0
 580:	81 1d       	adc	r24, r1
 582:	11 24       	eor	r1, r1
 584:	91 1d       	adc	r25, r1
 586:	08 95       	ret

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
