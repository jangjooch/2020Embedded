
0717_ArmControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  00000a56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fc  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000447  00000000  00000000  00001d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	3b c2       	rjmp	.+1142   	; 0x47c <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	c9 c1       	rjmp	.+914    	; 0x3cc <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	7a c4       	rjmp	.+2292   	; 0x9ba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
volatile long setAngel = 90;
	
long mapping(long x, long in_min, long in_max, long out_min, long out_max);

int main(void)
{
  c8:	8f 92       	push	r8
  ca:	9f 92       	push	r9
  cc:	af 92       	push	r10
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	62 97       	sbiw	r28, 0x12	; 18
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	
		UCSR0A = 0x00;
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	10 82       	st	Z, r1
		UCSR0B = 0x18;
  f8:	8a e2       	ldi	r24, 0x2A	; 42
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	28 e1       	ldi	r18, 0x18	; 24
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
		UCSR0C = 0x06;
 102:	85 e9       	ldi	r24, 0x95	; 149
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	26 e0       	ldi	r18, 0x06	; 6
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		UBRR0H = 0;
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
		UBRR0L = 103;
 114:	89 e2       	ldi	r24, 0x29	; 41
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	27 e6       	ldi	r18, 0x67	; 103
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
	
    /* Replace with your application code */
	
	TCCR1B = 0x01;
 11e:	8e e4       	ldi	r24, 0x4E	; 78
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
	// 1 분주율
	TIMSK |= (1<<TOIE1);
 128:	87 e5       	ldi	r24, 0x57	; 87
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	27 e5       	ldi	r18, 0x57	; 87
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	24 60       	ori	r18, 0x04	; 4
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	TCNT1 = -300;
 13a:	8c e4       	ldi	r24, 0x4C	; 76
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	24 ed       	ldi	r18, 0xD4	; 212
 140:	3e ef       	ldi	r19, 0xFE	; 254
 142:	fc 01       	movw	r30, r24
 144:	31 83       	std	Z+1, r19	; 0x01
 146:	20 83       	st	Z, r18
	
	TCCR3A = 0x82;
 148:	8b e8       	ldi	r24, 0x8B	; 139
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	22 e8       	ldi	r18, 0x82	; 130
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	TCCR3B = 0x1A;
 152:	8a e8       	ldi	r24, 0x8A	; 138
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2a e1       	ldi	r18, 0x1A	; 26
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	TCCR3C = 0x00;
 15c:	8c e8       	ldi	r24, 0x8C	; 140
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
	ICR3 = 40000;
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 e4       	ldi	r18, 0x40	; 64
 16a:	3c e9       	ldi	r19, 0x9C	; 156
 16c:	fc 01       	movw	r30, r24
 16e:	31 83       	std	Z+1, r19	; 0x01
 170:	20 83       	st	Z, r18
	DDRE |= 0x08;
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	22 e2       	ldi	r18, 0x22	; 34
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	28 60       	ori	r18, 0x08	; 8
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	
	EICRA = 0x01;
 184:	8a e6       	ldi	r24, 0x6A	; 106
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	EIMSK = 0x01;
 18e:	89 e5       	ldi	r24, 0x59	; 89
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	
	DDRC = 0xF0;
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	20 ef       	ldi	r18, 0xF0	; 240
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	
	sei();
 1a2:	78 94       	sei
	
    while (1) 
    {
		unsigned long past = idx;
 1a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1ac:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1b0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	ab 83       	std	Y+3, r26	; 0x03
 1ba:	bc 83       	std	Y+4, r27	; 0x04
		if(pwmValue > 80){
 1bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pwmValue>
 1c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pwmValue+0x1>
 1c4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <pwmValue+0x2>
 1c8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <pwmValue+0x3>
 1cc:	81 35       	cpi	r24, 0x51	; 81
 1ce:	91 05       	cpc	r25, r1
 1d0:	a1 05       	cpc	r26, r1
 1d2:	b1 05       	cpc	r27, r1
 1d4:	a0 f0       	brcs	.+40     	; 0x1fe <main+0x136>
			setAngel = setAngel + 1;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	a1 1d       	adc	r26, r1
 1ea:	b1 1d       	adc	r27, r1
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <main+0x174>
		}
		else if(pwmValue < 60){
 1fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pwmValue>
 202:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <pwmValue+0x1>
 206:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <pwmValue+0x2>
 20a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <pwmValue+0x3>
 20e:	cc 97       	sbiw	r24, 0x3c	; 60
 210:	a1 05       	cpc	r26, r1
 212:	b1 05       	cpc	r27, r1
 214:	98 f4       	brcc	.+38     	; 0x23c <main+0x174>
			setAngel = setAngel - 1;
 216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 222:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	a1 09       	sbc	r26, r1
 22a:	b1 09       	sbc	r27, r1
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 234:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 238:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
		
		if(setAngel > 180)
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 244:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 248:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 24c:	85 3b       	cpi	r24, 0xB5	; 181
 24e:	91 05       	cpc	r25, r1
 250:	a1 05       	cpc	r26, r1
 252:	b1 05       	cpc	r27, r1
 254:	6c f0       	brlt	.+26     	; 0x270 <main+0x1a8>
		    setAngel = 180;
 256:	84 eb       	ldi	r24, 0xB4	; 180
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 266:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 26a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 26e:	12 c0       	rjmp	.+36     	; 0x294 <main+0x1cc>
		else if(setAngel < 0)
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 278:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 27c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 280:	bb 23       	and	r27, r27
 282:	44 f4       	brge	.+16     	; 0x294 <main+0x1cc>
		    setAngel = 0;
 284:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 290:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		
		//UART_Putchar(setAngel);
		//OCR3A = mapping(pwmValue, 50, 90, 1000, 5000);
		OCR3A = mapping(setAngel, 0, 180, 1000, 5000);
 294:	0f 2e       	mov	r0, r31
 296:	f6 e8       	ldi	r31, 0x86	; 134
 298:	8f 2e       	mov	r8, r31
 29a:	91 2c       	mov	r9, r1
 29c:	f0 2d       	mov	r31, r0
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2aa:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2ae:	1f 92       	push	r1
 2b0:	1f 92       	push	r1
 2b2:	23 e1       	ldi	r18, 0x13	; 19
 2b4:	2f 93       	push	r18
 2b6:	28 e8       	ldi	r18, 0x88	; 136
 2b8:	2f 93       	push	r18
 2ba:	0f 2e       	mov	r0, r31
 2bc:	f8 ee       	ldi	r31, 0xE8	; 232
 2be:	af 2e       	mov	r10, r31
 2c0:	f3 e0       	ldi	r31, 0x03	; 3
 2c2:	bf 2e       	mov	r11, r31
 2c4:	c1 2c       	mov	r12, r1
 2c6:	d1 2c       	mov	r13, r1
 2c8:	f0 2d       	mov	r31, r0
 2ca:	14 eb       	ldi	r17, 0xB4	; 180
 2cc:	e1 2e       	mov	r14, r17
 2ce:	f1 2c       	mov	r15, r1
 2d0:	00 e0       	ldi	r16, 0x00	; 0
 2d2:	10 e0       	ldi	r17, 0x00	; 0
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	a9 01       	movw	r20, r18
 2da:	bc 01       	movw	r22, r24
 2dc:	cd 01       	movw	r24, r26
 2de:	53 d1       	rcall	.+678    	; 0x586 <mapping>
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	dc 01       	movw	r26, r24
 2ea:	cb 01       	movw	r24, r22
 2ec:	f4 01       	movw	r30, r8
 2ee:	91 83       	std	Z+1, r25	; 0x01
 2f0:	80 83       	st	Z, r24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a8 ec       	ldi	r26, 0xC8	; 200
 2f8:	b2 e4       	ldi	r27, 0x42	; 66
 2fa:	8d 83       	std	Y+5, r24	; 0x05
 2fc:	9e 83       	std	Y+6, r25	; 0x06
 2fe:	af 83       	std	Y+7, r26	; 0x07
 300:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	4a e7       	ldi	r20, 0x7A	; 122
 308:	55 e4       	ldi	r21, 0x45	; 69
 30a:	6d 81       	ldd	r22, Y+5	; 0x05
 30c:	7e 81       	ldd	r23, Y+6	; 0x06
 30e:	8f 81       	ldd	r24, Y+7	; 0x07
 310:	98 85       	ldd	r25, Y+8	; 0x08
 312:	62 d2       	rcall	.+1220   	; 0x7d8 <__mulsf3>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	89 87       	std	Y+9, r24	; 0x09
 31a:	9a 87       	std	Y+10, r25	; 0x0a
 31c:	ab 87       	std	Y+11, r26	; 0x0b
 31e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	5f e3       	ldi	r21, 0x3F	; 63
 328:	69 85       	ldd	r22, Y+9	; 0x09
 32a:	7a 85       	ldd	r23, Y+10	; 0x0a
 32c:	8b 85       	ldd	r24, Y+11	; 0x0b
 32e:	9c 85       	ldd	r25, Y+12	; 0x0c
 330:	d2 d1       	rcall	.+932    	; 0x6d6 <__cmpsf2>
 332:	88 23       	and	r24, r24
 334:	2c f4       	brge	.+10     	; 0x340 <main+0x278>
		__ticks = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	9e 87       	std	Y+14, r25	; 0x0e
 33c:	8d 87       	std	Y+13, r24	; 0x0d
 33e:	3b c0       	rjmp	.+118    	; 0x3b6 <main+0x2ee>
	else if (__tmp > 65535)
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	4f e7       	ldi	r20, 0x7F	; 127
 346:	57 e4       	ldi	r21, 0x47	; 71
 348:	69 85       	ldd	r22, Y+9	; 0x09
 34a:	7a 85       	ldd	r23, Y+10	; 0x0a
 34c:	8b 85       	ldd	r24, Y+11	; 0x0b
 34e:	9c 85       	ldd	r25, Y+12	; 0x0c
 350:	3f d2       	rcall	.+1150   	; 0x7d0 <__gesf2>
 352:	18 16       	cp	r1, r24
 354:	3c f5       	brge	.+78     	; 0x3a4 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 e2       	ldi	r20, 0x20	; 32
 35c:	51 e4       	ldi	r21, 0x41	; 65
 35e:	6d 81       	ldd	r22, Y+5	; 0x05
 360:	7e 81       	ldd	r23, Y+6	; 0x06
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	98 85       	ldd	r25, Y+8	; 0x08
 366:	38 d2       	rcall	.+1136   	; 0x7d8 <__mulsf3>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	b6 d1       	rcall	.+876    	; 0x6de <__fixunssfsi>
 372:	dc 01       	movw	r26, r24
 374:	cb 01       	movw	r24, r22
 376:	9e 87       	std	Y+14, r25	; 0x0e
 378:	8d 87       	std	Y+13, r24	; 0x0d
 37a:	0f c0       	rjmp	.+30     	; 0x39a <main+0x2d2>
 37c:	80 e9       	ldi	r24, 0x90	; 144
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	98 8b       	std	Y+16, r25	; 0x10
 382:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 384:	8f 85       	ldd	r24, Y+15	; 0x0f
 386:	98 89       	ldd	r25, Y+16	; 0x10
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x2c0>
 38c:	98 8b       	std	Y+16, r25	; 0x10
 38e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 390:	8d 85       	ldd	r24, Y+13	; 0x0d
 392:	9e 85       	ldd	r25, Y+14	; 0x0e
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	9e 87       	std	Y+14, r25	; 0x0e
 398:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 39a:	8d 85       	ldd	r24, Y+13	; 0x0d
 39c:	9e 85       	ldd	r25, Y+14	; 0x0e
 39e:	89 2b       	or	r24, r25
 3a0:	69 f7       	brne	.-38     	; 0x37c <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3a2:	13 c0       	rjmp	.+38     	; 0x3ca <main+0x302>
 3a4:	69 85       	ldd	r22, Y+9	; 0x09
 3a6:	7a 85       	ldd	r23, Y+10	; 0x0a
 3a8:	8b 85       	ldd	r24, Y+11	; 0x0b
 3aa:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ac:	98 d1       	rcall	.+816    	; 0x6de <__fixunssfsi>
 3ae:	dc 01       	movw	r26, r24
 3b0:	cb 01       	movw	r24, r22
 3b2:	9e 87       	std	Y+14, r25	; 0x0e
 3b4:	8d 87       	std	Y+13, r24	; 0x0d
 3b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b8:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ba:	9a 8b       	std	Y+18, r25	; 0x12
 3bc:	89 8b       	std	Y+17, r24	; 0x11
 3be:	89 89       	ldd	r24, Y+17	; 0x11
 3c0:	9a 89       	ldd	r25, Y+18	; 0x12
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x2fa>
 3c6:	9a 8b       	std	Y+18, r25	; 0x12
 3c8:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(100);
    }
 3ca:	ec ce       	rjmp	.-552    	; 0x1a4 <main+0xdc>

000003cc <__vector_14>:
}

ISR(TIMER1_OVF_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3dc:	0f 92       	push	r0
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = -300;
 3f6:	8c e4       	ldi	r24, 0x4C	; 76
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	24 ed       	ldi	r18, 0xD4	; 212
 3fc:	3e ef       	ldi	r19, 0xFE	; 254
 3fe:	fc 01       	movw	r30, r24
 400:	31 83       	std	Z+1, r19	; 0x01
 402:	20 83       	st	Z, r18
	idx = idx + 1;
 404:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 408:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 40c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 410:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	a1 1d       	adc	r26, r1
 418:	b1 1d       	adc	r27, r1
 41a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 41e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 422:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 426:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if(idx > 60000){
 42a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 42e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 432:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 436:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 43a:	81 36       	cpi	r24, 0x61	; 97
 43c:	9a 4e       	sbci	r25, 0xEA	; 234
 43e:	a1 05       	cpc	r26, r1
 440:	b1 05       	cpc	r27, r1
 442:	40 f0       	brcs	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		idx = 0;
 444:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 448:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 44c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end+0x2>
 450:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x3>
	}
}
 454:	00 00       	nop
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 470:	0f 90       	pop	r0
 472:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_1>:


ISR(INT0_vect){
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 48c:	0f 92       	push	r0
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
 4a2:	af 93       	push	r26
 4a4:	bf 93       	push	r27
 4a6:	ef 93       	push	r30
 4a8:	ff 93       	push	r31
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	if( (PIND & 0x01) ){
 4b2:	80 e3       	ldi	r24, 0x30	; 48
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	81 70       	andi	r24, 0x01	; 1
 4c0:	99 27       	eor	r25, r25
 4c2:	89 2b       	or	r24, r25
 4c4:	b1 f0       	breq	.+44     	; 0x4f2 <__vector_1+0x76>
		PORTC = 0x80;
 4c6:	85 e3       	ldi	r24, 0x35	; 53
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	20 e8       	ldi	r18, 0x80	; 128
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
		timer = idx;
 4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 4d8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 4dc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 4e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timer>
 4e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timer+0x1>
 4e8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timer+0x2>
 4ec:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timer+0x3>
		PORTC = 0x00;
		if(timer != 0){
			pwmValue = idx - timer;
		}
	}
}
 4f0:	30 c0       	rjmp	.+96     	; 0x552 <__vector_1+0xd6>
	if( (PIND & 0x01) ){
		PORTC = 0x80;
		timer = idx;
	}
	else{
		PORTC = 0x00;
 4f2:	85 e3       	ldi	r24, 0x35	; 53
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	fc 01       	movw	r30, r24
 4f8:	10 82       	st	Z, r1
		if(timer != 0){
 4fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timer>
 4fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timer+0x1>
 502:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timer+0x2>
 506:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timer+0x3>
 50a:	89 2b       	or	r24, r25
 50c:	8a 2b       	or	r24, r26
 50e:	8b 2b       	or	r24, r27
 510:	01 f1       	breq	.+64     	; 0x552 <__vector_1+0xd6>
			pwmValue = idx - timer;
 512:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 516:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 51a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end+0x2>
 51e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x3>
 522:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timer>
 526:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timer+0x1>
 52a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <timer+0x2>
 52e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <timer+0x3>
 532:	79 01       	movw	r14, r18
 534:	8a 01       	movw	r16, r20
 536:	e8 1a       	sub	r14, r24
 538:	f9 0a       	sbc	r15, r25
 53a:	0a 0b       	sbc	r16, r26
 53c:	1b 0b       	sbc	r17, r27
 53e:	d8 01       	movw	r26, r16
 540:	c7 01       	movw	r24, r14
 542:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pwmValue>
 546:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <pwmValue+0x1>
 54a:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <pwmValue+0x2>
 54e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <pwmValue+0x3>
		}
	}
}
 552:	00 00       	nop
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	0f 90       	pop	r0
 576:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 57a:	0f 90       	pop	r0
 57c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <mapping>:


long mapping(long x, long in_min, long in_max, long out_min, long out_max)
{
 586:	af 92       	push	r10
 588:	bf 92       	push	r11
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	64 97       	sbiw	r28, 0x14	; 20
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	6d 83       	std	Y+5, r22	; 0x05
 5ac:	7e 83       	std	Y+6, r23	; 0x06
 5ae:	8f 83       	std	Y+7, r24	; 0x07
 5b0:	98 87       	std	Y+8, r25	; 0x08
 5b2:	29 87       	std	Y+9, r18	; 0x09
 5b4:	3a 87       	std	Y+10, r19	; 0x0a
 5b6:	4b 87       	std	Y+11, r20	; 0x0b
 5b8:	5c 87       	std	Y+12, r21	; 0x0c
 5ba:	ed 86       	std	Y+13, r14	; 0x0d
 5bc:	fe 86       	std	Y+14, r15	; 0x0e
 5be:	0f 87       	std	Y+15, r16	; 0x0f
 5c0:	18 8b       	std	Y+16, r17	; 0x10
 5c2:	a9 8a       	std	Y+17, r10	; 0x11
 5c4:	ba 8a       	std	Y+18, r11	; 0x12
 5c6:	cb 8a       	std	Y+19, r12	; 0x13
 5c8:	dc 8a       	std	Y+20, r13	; 0x14
	if(x > in_max){
 5ca:	2d 81       	ldd	r18, Y+5	; 0x05
 5cc:	3e 81       	ldd	r19, Y+6	; 0x06
 5ce:	4f 81       	ldd	r20, Y+7	; 0x07
 5d0:	58 85       	ldd	r21, Y+8	; 0x08
 5d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 5d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 5d6:	af 85       	ldd	r26, Y+15	; 0x0f
 5d8:	b8 89       	ldd	r27, Y+16	; 0x10
 5da:	82 17       	cp	r24, r18
 5dc:	93 07       	cpc	r25, r19
 5de:	a4 07       	cpc	r26, r20
 5e0:	b5 07       	cpc	r27, r21
 5e2:	4c f4       	brge	.+18     	; 0x5f6 <mapping+0x70>
		x = in_max;
 5e4:	8d 85       	ldd	r24, Y+13	; 0x0d
 5e6:	9e 85       	ldd	r25, Y+14	; 0x0e
 5e8:	af 85       	ldd	r26, Y+15	; 0x0f
 5ea:	b8 89       	ldd	r27, Y+16	; 0x10
 5ec:	8d 83       	std	Y+5, r24	; 0x05
 5ee:	9e 83       	std	Y+6, r25	; 0x06
 5f0:	af 83       	std	Y+7, r26	; 0x07
 5f2:	b8 87       	std	Y+8, r27	; 0x08
 5f4:	15 c0       	rjmp	.+42     	; 0x620 <mapping+0x9a>
	}
	else if(x < in_min){
 5f6:	2d 81       	ldd	r18, Y+5	; 0x05
 5f8:	3e 81       	ldd	r19, Y+6	; 0x06
 5fa:	4f 81       	ldd	r20, Y+7	; 0x07
 5fc:	58 85       	ldd	r21, Y+8	; 0x08
 5fe:	89 85       	ldd	r24, Y+9	; 0x09
 600:	9a 85       	ldd	r25, Y+10	; 0x0a
 602:	ab 85       	ldd	r26, Y+11	; 0x0b
 604:	bc 85       	ldd	r27, Y+12	; 0x0c
 606:	28 17       	cp	r18, r24
 608:	39 07       	cpc	r19, r25
 60a:	4a 07       	cpc	r20, r26
 60c:	5b 07       	cpc	r21, r27
 60e:	44 f4       	brge	.+16     	; 0x620 <mapping+0x9a>
		x = in_min;
 610:	89 85       	ldd	r24, Y+9	; 0x09
 612:	9a 85       	ldd	r25, Y+10	; 0x0a
 614:	ab 85       	ldd	r26, Y+11	; 0x0b
 616:	bc 85       	ldd	r27, Y+12	; 0x0c
 618:	8d 83       	std	Y+5, r24	; 0x05
 61a:	9e 83       	std	Y+6, r25	; 0x06
 61c:	af 83       	std	Y+7, r26	; 0x07
 61e:	b8 87       	std	Y+8, r27	; 0x08
	}
	unsigned long result = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 620:	2d 81       	ldd	r18, Y+5	; 0x05
 622:	3e 81       	ldd	r19, Y+6	; 0x06
 624:	4f 81       	ldd	r20, Y+7	; 0x07
 626:	58 85       	ldd	r21, Y+8	; 0x08
 628:	89 85       	ldd	r24, Y+9	; 0x09
 62a:	9a 85       	ldd	r25, Y+10	; 0x0a
 62c:	ab 85       	ldd	r26, Y+11	; 0x0b
 62e:	bc 85       	ldd	r27, Y+12	; 0x0c
 630:	79 01       	movw	r14, r18
 632:	8a 01       	movw	r16, r20
 634:	e8 1a       	sub	r14, r24
 636:	f9 0a       	sbc	r15, r25
 638:	0a 0b       	sbc	r16, r26
 63a:	1b 0b       	sbc	r17, r27
 63c:	29 a1       	ldd	r18, Y+33	; 0x21
 63e:	3a a1       	ldd	r19, Y+34	; 0x22
 640:	4b a1       	ldd	r20, Y+35	; 0x23
 642:	5c a1       	ldd	r21, Y+36	; 0x24
 644:	89 89       	ldd	r24, Y+17	; 0x11
 646:	9a 89       	ldd	r25, Y+18	; 0x12
 648:	ab 89       	ldd	r26, Y+19	; 0x13
 64a:	bc 89       	ldd	r27, Y+20	; 0x14
 64c:	59 01       	movw	r10, r18
 64e:	6a 01       	movw	r12, r20
 650:	a8 1a       	sub	r10, r24
 652:	b9 0a       	sbc	r11, r25
 654:	ca 0a       	sbc	r12, r26
 656:	db 0a       	sbc	r13, r27
 658:	d6 01       	movw	r26, r12
 65a:	c5 01       	movw	r24, r10
 65c:	a8 01       	movw	r20, r16
 65e:	97 01       	movw	r18, r14
 660:	bc 01       	movw	r22, r24
 662:	cd 01       	movw	r24, r26
 664:	44 d1       	rcall	.+648    	; 0x8ee <__mulsi3>
 666:	7b 01       	movw	r14, r22
 668:	8c 01       	movw	r16, r24
 66a:	2d 85       	ldd	r18, Y+13	; 0x0d
 66c:	3e 85       	ldd	r19, Y+14	; 0x0e
 66e:	4f 85       	ldd	r20, Y+15	; 0x0f
 670:	58 89       	ldd	r21, Y+16	; 0x10
 672:	89 85       	ldd	r24, Y+9	; 0x09
 674:	9a 85       	ldd	r25, Y+10	; 0x0a
 676:	ab 85       	ldd	r26, Y+11	; 0x0b
 678:	bc 85       	ldd	r27, Y+12	; 0x0c
 67a:	28 1b       	sub	r18, r24
 67c:	39 0b       	sbc	r19, r25
 67e:	4a 0b       	sbc	r20, r26
 680:	5b 0b       	sbc	r21, r27
 682:	c8 01       	movw	r24, r16
 684:	b7 01       	movw	r22, r14
 686:	42 d1       	rcall	.+644    	; 0x90c <__divmodsi4>
 688:	da 01       	movw	r26, r20
 68a:	c9 01       	movw	r24, r18
 68c:	9c 01       	movw	r18, r24
 68e:	ad 01       	movw	r20, r26
 690:	89 89       	ldd	r24, Y+17	; 0x11
 692:	9a 89       	ldd	r25, Y+18	; 0x12
 694:	ab 89       	ldd	r26, Y+19	; 0x13
 696:	bc 89       	ldd	r27, Y+20	; 0x14
 698:	82 0f       	add	r24, r18
 69a:	93 1f       	adc	r25, r19
 69c:	a4 1f       	adc	r26, r20
 69e:	b5 1f       	adc	r27, r21
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	9a 83       	std	Y+2, r25	; 0x02
 6a4:	ab 83       	std	Y+3, r26	; 0x03
 6a6:	bc 83       	std	Y+4, r27	; 0x04
	return result;
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	9a 81       	ldd	r25, Y+2	; 0x02
 6ac:	ab 81       	ldd	r26, Y+3	; 0x03
 6ae:	bc 81       	ldd	r27, Y+4	; 0x04
}
 6b0:	bc 01       	movw	r22, r24
 6b2:	cd 01       	movw	r24, r26
 6b4:	64 96       	adiw	r28, 0x14	; 20
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	f8 94       	cli
 6ba:	de bf       	out	0x3e, r29	; 62
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	cd bf       	out	0x3d, r28	; 61
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	ff 90       	pop	r15
 6ca:	ef 90       	pop	r14
 6cc:	df 90       	pop	r13
 6ce:	cf 90       	pop	r12
 6d0:	bf 90       	pop	r11
 6d2:	af 90       	pop	r10
 6d4:	08 95       	ret

000006d6 <__cmpsf2>:
 6d6:	2f d0       	rcall	.+94     	; 0x736 <__fp_cmp>
 6d8:	08 f4       	brcc	.+2      	; 0x6dc <__cmpsf2+0x6>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	08 95       	ret

000006de <__fixunssfsi>:
 6de:	57 d0       	rcall	.+174    	; 0x78e <__fp_splitA>
 6e0:	88 f0       	brcs	.+34     	; 0x704 <__fixunssfsi+0x26>
 6e2:	9f 57       	subi	r25, 0x7F	; 127
 6e4:	90 f0       	brcs	.+36     	; 0x70a <__fixunssfsi+0x2c>
 6e6:	b9 2f       	mov	r27, r25
 6e8:	99 27       	eor	r25, r25
 6ea:	b7 51       	subi	r27, 0x17	; 23
 6ec:	a0 f0       	brcs	.+40     	; 0x716 <__fixunssfsi+0x38>
 6ee:	d1 f0       	breq	.+52     	; 0x724 <__fixunssfsi+0x46>
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	1a f0       	brmi	.+6      	; 0x700 <__fixunssfsi+0x22>
 6fa:	ba 95       	dec	r27
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__fixunssfsi+0x12>
 6fe:	12 c0       	rjmp	.+36     	; 0x724 <__fixunssfsi+0x46>
 700:	b1 30       	cpi	r27, 0x01	; 1
 702:	81 f0       	breq	.+32     	; 0x724 <__fixunssfsi+0x46>
 704:	5e d0       	rcall	.+188    	; 0x7c2 <__fp_zero>
 706:	b1 e0       	ldi	r27, 0x01	; 1
 708:	08 95       	ret
 70a:	5b c0       	rjmp	.+182    	; 0x7c2 <__fp_zero>
 70c:	67 2f       	mov	r22, r23
 70e:	78 2f       	mov	r23, r24
 710:	88 27       	eor	r24, r24
 712:	b8 5f       	subi	r27, 0xF8	; 248
 714:	39 f0       	breq	.+14     	; 0x724 <__fixunssfsi+0x46>
 716:	b9 3f       	cpi	r27, 0xF9	; 249
 718:	cc f3       	brlt	.-14     	; 0x70c <__fixunssfsi+0x2e>
 71a:	86 95       	lsr	r24
 71c:	77 95       	ror	r23
 71e:	67 95       	ror	r22
 720:	b3 95       	inc	r27
 722:	d9 f7       	brne	.-10     	; 0x71a <__fixunssfsi+0x3c>
 724:	3e f4       	brtc	.+14     	; 0x734 <__fixunssfsi+0x56>
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <__fp_cmp>:
 736:	99 0f       	add	r25, r25
 738:	00 08       	sbc	r0, r0
 73a:	55 0f       	add	r21, r21
 73c:	aa 0b       	sbc	r26, r26
 73e:	e0 e8       	ldi	r30, 0x80	; 128
 740:	fe ef       	ldi	r31, 0xFE	; 254
 742:	16 16       	cp	r1, r22
 744:	17 06       	cpc	r1, r23
 746:	e8 07       	cpc	r30, r24
 748:	f9 07       	cpc	r31, r25
 74a:	c0 f0       	brcs	.+48     	; 0x77c <__fp_cmp+0x46>
 74c:	12 16       	cp	r1, r18
 74e:	13 06       	cpc	r1, r19
 750:	e4 07       	cpc	r30, r20
 752:	f5 07       	cpc	r31, r21
 754:	98 f0       	brcs	.+38     	; 0x77c <__fp_cmp+0x46>
 756:	62 1b       	sub	r22, r18
 758:	73 0b       	sbc	r23, r19
 75a:	84 0b       	sbc	r24, r20
 75c:	95 0b       	sbc	r25, r21
 75e:	39 f4       	brne	.+14     	; 0x76e <__fp_cmp+0x38>
 760:	0a 26       	eor	r0, r26
 762:	61 f0       	breq	.+24     	; 0x77c <__fp_cmp+0x46>
 764:	23 2b       	or	r18, r19
 766:	24 2b       	or	r18, r20
 768:	25 2b       	or	r18, r21
 76a:	21 f4       	brne	.+8      	; 0x774 <__fp_cmp+0x3e>
 76c:	08 95       	ret
 76e:	0a 26       	eor	r0, r26
 770:	09 f4       	brne	.+2      	; 0x774 <__fp_cmp+0x3e>
 772:	a1 40       	sbci	r26, 0x01	; 1
 774:	a6 95       	lsr	r26
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	81 1d       	adc	r24, r1
 77a:	81 1d       	adc	r24, r1
 77c:	08 95       	ret

0000077e <__fp_split3>:
 77e:	57 fd       	sbrc	r21, 7
 780:	90 58       	subi	r25, 0x80	; 128
 782:	44 0f       	add	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	59 f0       	breq	.+22     	; 0x79e <__fp_splitA+0x10>
 788:	5f 3f       	cpi	r21, 0xFF	; 255
 78a:	71 f0       	breq	.+28     	; 0x7a8 <__fp_splitA+0x1a>
 78c:	47 95       	ror	r20

0000078e <__fp_splitA>:
 78e:	88 0f       	add	r24, r24
 790:	97 fb       	bst	r25, 7
 792:	99 1f       	adc	r25, r25
 794:	61 f0       	breq	.+24     	; 0x7ae <__fp_splitA+0x20>
 796:	9f 3f       	cpi	r25, 0xFF	; 255
 798:	79 f0       	breq	.+30     	; 0x7b8 <__fp_splitA+0x2a>
 79a:	87 95       	ror	r24
 79c:	08 95       	ret
 79e:	12 16       	cp	r1, r18
 7a0:	13 06       	cpc	r1, r19
 7a2:	14 06       	cpc	r1, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	f2 cf       	rjmp	.-28     	; 0x78c <__fp_split3+0xe>
 7a8:	46 95       	lsr	r20
 7aa:	f1 df       	rcall	.-30     	; 0x78e <__fp_splitA>
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <__fp_splitA+0x30>
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	f1 cf       	rjmp	.-30     	; 0x79a <__fp_splitA+0xc>
 7b8:	86 95       	lsr	r24
 7ba:	71 05       	cpc	r23, r1
 7bc:	61 05       	cpc	r22, r1
 7be:	08 94       	sec
 7c0:	08 95       	ret

000007c2 <__fp_zero>:
 7c2:	e8 94       	clt

000007c4 <__fp_szero>:
 7c4:	bb 27       	eor	r27, r27
 7c6:	66 27       	eor	r22, r22
 7c8:	77 27       	eor	r23, r23
 7ca:	cb 01       	movw	r24, r22
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__gesf2>:
 7d0:	b2 df       	rcall	.-156    	; 0x736 <__fp_cmp>
 7d2:	08 f4       	brcc	.+2      	; 0x7d6 <__gesf2+0x6>
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__mulsf3>:
 7d8:	0b d0       	rcall	.+22     	; 0x7f0 <__mulsf3x>
 7da:	78 c0       	rjmp	.+240    	; 0x8cc <__fp_round>
 7dc:	69 d0       	rcall	.+210    	; 0x8b0 <__fp_pscA>
 7de:	28 f0       	brcs	.+10     	; 0x7ea <__mulsf3+0x12>
 7e0:	6e d0       	rcall	.+220    	; 0x8be <__fp_pscB>
 7e2:	18 f0       	brcs	.+6      	; 0x7ea <__mulsf3+0x12>
 7e4:	95 23       	and	r25, r21
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__mulsf3+0x12>
 7e8:	5a c0       	rjmp	.+180    	; 0x89e <__fp_inf>
 7ea:	5f c0       	rjmp	.+190    	; 0x8aa <__fp_nan>
 7ec:	11 24       	eor	r1, r1
 7ee:	ea cf       	rjmp	.-44     	; 0x7c4 <__fp_szero>

000007f0 <__mulsf3x>:
 7f0:	c6 df       	rcall	.-116    	; 0x77e <__fp_split3>
 7f2:	a0 f3       	brcs	.-24     	; 0x7dc <__mulsf3+0x4>

000007f4 <__mulsf3_pse>:
 7f4:	95 9f       	mul	r25, r21
 7f6:	d1 f3       	breq	.-12     	; 0x7ec <__mulsf3+0x14>
 7f8:	95 0f       	add	r25, r21
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	55 1f       	adc	r21, r21
 7fe:	62 9f       	mul	r22, r18
 800:	f0 01       	movw	r30, r0
 802:	72 9f       	mul	r23, r18
 804:	bb 27       	eor	r27, r27
 806:	f0 0d       	add	r31, r0
 808:	b1 1d       	adc	r27, r1
 80a:	63 9f       	mul	r22, r19
 80c:	aa 27       	eor	r26, r26
 80e:	f0 0d       	add	r31, r0
 810:	b1 1d       	adc	r27, r1
 812:	aa 1f       	adc	r26, r26
 814:	64 9f       	mul	r22, r20
 816:	66 27       	eor	r22, r22
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	66 1f       	adc	r22, r22
 81e:	82 9f       	mul	r24, r18
 820:	22 27       	eor	r18, r18
 822:	b0 0d       	add	r27, r0
 824:	a1 1d       	adc	r26, r1
 826:	62 1f       	adc	r22, r18
 828:	73 9f       	mul	r23, r19
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	62 1f       	adc	r22, r18
 830:	83 9f       	mul	r24, r19
 832:	a0 0d       	add	r26, r0
 834:	61 1d       	adc	r22, r1
 836:	22 1f       	adc	r18, r18
 838:	74 9f       	mul	r23, r20
 83a:	33 27       	eor	r19, r19
 83c:	a0 0d       	add	r26, r0
 83e:	61 1d       	adc	r22, r1
 840:	23 1f       	adc	r18, r19
 842:	84 9f       	mul	r24, r20
 844:	60 0d       	add	r22, r0
 846:	21 1d       	adc	r18, r1
 848:	82 2f       	mov	r24, r18
 84a:	76 2f       	mov	r23, r22
 84c:	6a 2f       	mov	r22, r26
 84e:	11 24       	eor	r1, r1
 850:	9f 57       	subi	r25, 0x7F	; 127
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	8a f0       	brmi	.+34     	; 0x878 <__mulsf3_pse+0x84>
 856:	e1 f0       	breq	.+56     	; 0x890 <__mulsf3_pse+0x9c>
 858:	88 23       	and	r24, r24
 85a:	4a f0       	brmi	.+18     	; 0x86e <__mulsf3_pse+0x7a>
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	bb 1f       	adc	r27, r27
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	91 50       	subi	r25, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	a9 f7       	brne	.-22     	; 0x858 <__mulsf3_pse+0x64>
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	51 05       	cpc	r21, r1
 872:	70 f0       	brcs	.+28     	; 0x890 <__mulsf3_pse+0x9c>
 874:	14 c0       	rjmp	.+40     	; 0x89e <__fp_inf>
 876:	a6 cf       	rjmp	.-180    	; 0x7c4 <__fp_szero>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	ec f3       	brlt	.-6      	; 0x876 <__mulsf3_pse+0x82>
 87c:	98 3e       	cpi	r25, 0xE8	; 232
 87e:	dc f3       	brlt	.-10     	; 0x876 <__mulsf3_pse+0x82>
 880:	86 95       	lsr	r24
 882:	77 95       	ror	r23
 884:	67 95       	ror	r22
 886:	b7 95       	ror	r27
 888:	f7 95       	ror	r31
 88a:	e7 95       	ror	r30
 88c:	9f 5f       	subi	r25, 0xFF	; 255
 88e:	c1 f7       	brne	.-16     	; 0x880 <__mulsf3_pse+0x8c>
 890:	fe 2b       	or	r31, r30
 892:	88 0f       	add	r24, r24
 894:	91 1d       	adc	r25, r1
 896:	96 95       	lsr	r25
 898:	87 95       	ror	r24
 89a:	97 f9       	bld	r25, 7
 89c:	08 95       	ret

0000089e <__fp_inf>:
 89e:	97 f9       	bld	r25, 7
 8a0:	9f 67       	ori	r25, 0x7F	; 127
 8a2:	80 e8       	ldi	r24, 0x80	; 128
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	08 95       	ret

000008aa <__fp_nan>:
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	80 ec       	ldi	r24, 0xC0	; 192
 8ae:	08 95       	ret

000008b0 <__fp_pscA>:
 8b0:	00 24       	eor	r0, r0
 8b2:	0a 94       	dec	r0
 8b4:	16 16       	cp	r1, r22
 8b6:	17 06       	cpc	r1, r23
 8b8:	18 06       	cpc	r1, r24
 8ba:	09 06       	cpc	r0, r25
 8bc:	08 95       	ret

000008be <__fp_pscB>:
 8be:	00 24       	eor	r0, r0
 8c0:	0a 94       	dec	r0
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	05 06       	cpc	r0, r21
 8ca:	08 95       	ret

000008cc <__fp_round>:
 8cc:	09 2e       	mov	r0, r25
 8ce:	03 94       	inc	r0
 8d0:	00 0c       	add	r0, r0
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__fp_round+0xc>
 8d4:	88 23       	and	r24, r24
 8d6:	52 f0       	brmi	.+20     	; 0x8ec <__fp_round+0x20>
 8d8:	bb 0f       	add	r27, r27
 8da:	40 f4       	brcc	.+16     	; 0x8ec <__fp_round+0x20>
 8dc:	bf 2b       	or	r27, r31
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__fp_round+0x18>
 8e0:	60 ff       	sbrs	r22, 0
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__fp_round+0x20>
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__mulsi3>:
 8ee:	db 01       	movw	r26, r22
 8f0:	8f 93       	push	r24
 8f2:	9f 93       	push	r25
 8f4:	27 d0       	rcall	.+78     	; 0x944 <__muluhisi3>
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	a2 9f       	mul	r26, r18
 8fc:	80 0d       	add	r24, r0
 8fe:	91 1d       	adc	r25, r1
 900:	a3 9f       	mul	r26, r19
 902:	90 0d       	add	r25, r0
 904:	b2 9f       	mul	r27, r18
 906:	90 0d       	add	r25, r0
 908:	11 24       	eor	r1, r1
 90a:	08 95       	ret

0000090c <__divmodsi4>:
 90c:	05 2e       	mov	r0, r21
 90e:	97 fb       	bst	r25, 7
 910:	16 f4       	brtc	.+4      	; 0x916 <__divmodsi4+0xa>
 912:	00 94       	com	r0
 914:	0f d0       	rcall	.+30     	; 0x934 <__negsi2>
 916:	57 fd       	sbrc	r21, 7
 918:	05 d0       	rcall	.+10     	; 0x924 <__divmodsi4_neg2>
 91a:	1e d0       	rcall	.+60     	; 0x958 <__udivmodsi4>
 91c:	07 fc       	sbrc	r0, 7
 91e:	02 d0       	rcall	.+4      	; 0x924 <__divmodsi4_neg2>
 920:	46 f4       	brtc	.+16     	; 0x932 <__divmodsi4_exit>
 922:	08 c0       	rjmp	.+16     	; 0x934 <__negsi2>

00000924 <__divmodsi4_neg2>:
 924:	50 95       	com	r21
 926:	40 95       	com	r20
 928:	30 95       	com	r19
 92a:	21 95       	neg	r18
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	4f 4f       	sbci	r20, 0xFF	; 255
 930:	5f 4f       	sbci	r21, 0xFF	; 255

00000932 <__divmodsi4_exit>:
 932:	08 95       	ret

00000934 <__negsi2>:
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__muluhisi3>:
 944:	2b d0       	rcall	.+86     	; 0x99c <__umulhisi3>
 946:	a5 9f       	mul	r26, r21
 948:	90 0d       	add	r25, r0
 94a:	b4 9f       	mul	r27, r20
 94c:	90 0d       	add	r25, r0
 94e:	a4 9f       	mul	r26, r20
 950:	80 0d       	add	r24, r0
 952:	91 1d       	adc	r25, r1
 954:	11 24       	eor	r1, r1
 956:	08 95       	ret

00000958 <__udivmodsi4>:
 958:	a1 e2       	ldi	r26, 0x21	; 33
 95a:	1a 2e       	mov	r1, r26
 95c:	aa 1b       	sub	r26, r26
 95e:	bb 1b       	sub	r27, r27
 960:	fd 01       	movw	r30, r26
 962:	0d c0       	rjmp	.+26     	; 0x97e <__udivmodsi4_ep>

00000964 <__udivmodsi4_loop>:
 964:	aa 1f       	adc	r26, r26
 966:	bb 1f       	adc	r27, r27
 968:	ee 1f       	adc	r30, r30
 96a:	ff 1f       	adc	r31, r31
 96c:	a2 17       	cp	r26, r18
 96e:	b3 07       	cpc	r27, r19
 970:	e4 07       	cpc	r30, r20
 972:	f5 07       	cpc	r31, r21
 974:	20 f0       	brcs	.+8      	; 0x97e <__udivmodsi4_ep>
 976:	a2 1b       	sub	r26, r18
 978:	b3 0b       	sbc	r27, r19
 97a:	e4 0b       	sbc	r30, r20
 97c:	f5 0b       	sbc	r31, r21

0000097e <__udivmodsi4_ep>:
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	1a 94       	dec	r1
 988:	69 f7       	brne	.-38     	; 0x964 <__udivmodsi4_loop>
 98a:	60 95       	com	r22
 98c:	70 95       	com	r23
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	bd 01       	movw	r22, r26
 998:	cf 01       	movw	r24, r30
 99a:	08 95       	ret

0000099c <__umulhisi3>:
 99c:	a2 9f       	mul	r26, r18
 99e:	b0 01       	movw	r22, r0
 9a0:	b3 9f       	mul	r27, r19
 9a2:	c0 01       	movw	r24, r0
 9a4:	a3 9f       	mul	r26, r19
 9a6:	70 0d       	add	r23, r0
 9a8:	81 1d       	adc	r24, r1
 9aa:	11 24       	eor	r1, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	b2 9f       	mul	r27, r18
 9b0:	70 0d       	add	r23, r0
 9b2:	81 1d       	adc	r24, r1
 9b4:	11 24       	eor	r1, r1
 9b6:	91 1d       	adc	r25, r1
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
