
0723_RC_MultiControl_3OUTPUT01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005ea  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800114  00800114  00000692  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097c  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000382  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b5  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	29 c1       	rjmp	.+594    	; 0x258 <__vector_1>
   6:	00 00       	nop
   8:	df c1       	rjmp	.+958    	; 0x3c8 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	cf c0       	rjmp	.+414    	; 0x1d8 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	90 c2       	rjmp	.+1312   	; 0x5e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:


int main(void)
{
	
	TCCR1B = 0x01;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e bd       	out	0x2e, r24	; 46
	// 1 분주율
	TIMSK |= (1<<TOIE1);
  cc:	87 b7       	in	r24, 0x37	; 55
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	87 bf       	out	0x37, r24	; 55
	TCNT1 = -300;
  d2:	84 ed       	ldi	r24, 0xD4	; 212
  d4:	9e ef       	ldi	r25, 0xFE	; 254
  d6:	9d bd       	out	0x2d, r25	; 45
  d8:	8c bd       	out	0x2c, r24	; 44
	
	// Motor 제어 Duty Cycle 생성 16bit timer
	TCCR3A = 0xAA; // 1010 1010
  da:	8a ea       	ldi	r24, 0xAA	; 170
  dc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	// COMA1 COMA0 : 1 0 -> ICR3을 만나면 Clear
	// COMB1 COMB0 : 1 0 -> ICR3을 만나면 Clear
	// COMC1 COMC0 : 1 0 -> ICR3을 만나면 Clear
	// WGM11 WGM10 : 1 0 -> 14번모드 1 1 1 0 을 위함
	TCCR3B = 0x1A;
  e0:	8a e1       	ldi	r24, 0x1A	; 26
  e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	// WGM13 WGM12 : 1 1 -> 14번모드 1 1 1 0 을 위함
	// CS12 CS11 CS10 : 분주율 8 -> 0 1 0 을 위함
	TCCR3C = 0x00;
  e6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	// PWM모드에서는 출력할 것이 없다.
	ICR3 = 40000;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	9c e9       	ldi	r25, 0x9C	; 156
  ee:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// TOP 설정
	// 분주 = 1/16 * 8 * 40000 = 20000nanoSec = 20ms
	// Duty Cycle 설정
	DDRE |= 0x38;
  f6:	82 b1       	in	r24, 0x02	; 2
  f8:	88 63       	ori	r24, 0x38	; 56
  fa:	82 b9       	out	0x02, r24	; 2
	
	EICRA = 0x05;
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	89 bf       	out	0x39, r24	; 57
	
	DDRB = 0xF0;
 106:	80 ef       	ldi	r24, 0xF0	; 240
 108:	87 bb       	out	0x17, r24	; 23
	
	sei();
 10a:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		OCR3A = mapping(setAngel[0], 0, 180, 1000, 5000);
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	61 2c       	mov	r6, r1
 112:	71 2c       	mov	r7, r1
 114:	81 2c       	mov	r8, r1
 116:	91 2c       	mov	r9, r1
 118:	0f 2e       	mov	r0, r31
 11a:	f4 eb       	ldi	r31, 0xB4	; 180
 11c:	af 2e       	mov	r10, r31
 11e:	f0 2d       	mov	r31, r0
 120:	b1 2c       	mov	r11, r1
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	0f 2e       	mov	r0, r31
 128:	f6 e8       	ldi	r31, 0x86	; 134
 12a:	cf 2e       	mov	r12, r31
 12c:	d1 2c       	mov	r13, r1
 12e:	f0 2d       	mov	r31, r0
		OCR3B = mapping(setAngel[1], 0, 180, 1000, 5000);
 130:	0f 2e       	mov	r0, r31
 132:	f4 e8       	ldi	r31, 0x84	; 132
 134:	ef 2e       	mov	r14, r31
 136:	f1 2c       	mov	r15, r1
 138:	f0 2d       	mov	r31, r0
	sei();
	
    /* Replace with your application code */
    while (1) 
    {
		OCR3A = mapping(setAngel[0], 0, 180, 1000, 5000);
 13a:	f8 01       	movw	r30, r16
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	a2 81       	ldd	r26, Z+2	; 0x02
 142:	b3 81       	ldd	r27, Z+3	; 0x03
 144:	bb 23       	and	r27, r27
 146:	24 f4       	brge	.+8      	; 0x150 <main+0x88>
 148:	86 2d       	mov	r24, r6
 14a:	97 2d       	mov	r25, r7
 14c:	a8 2d       	mov	r26, r8
 14e:	b9 2d       	mov	r27, r9
 150:	9c 01       	movw	r18, r24
 152:	ad 01       	movw	r20, r26
 154:	85 3b       	cpi	r24, 0xB5	; 181
 156:	91 05       	cpc	r25, r1
 158:	a1 05       	cpc	r26, r1
 15a:	b1 05       	cpc	r27, r1
 15c:	24 f0       	brlt	.+8      	; 0x166 <main+0x9e>
 15e:	2a 2d       	mov	r18, r10
 160:	3b 2d       	mov	r19, r11
 162:	4d 2f       	mov	r20, r29
 164:	5c 2f       	mov	r21, r28
 166:	a0 ea       	ldi	r26, 0xA0	; 160
 168:	bf e0       	ldi	r27, 0x0F	; 15
 16a:	02 d2       	rcall	.+1028   	; 0x570 <__muluhisi3>
 16c:	2a 2d       	mov	r18, r10
 16e:	3b 2d       	mov	r19, r11
 170:	4d 2f       	mov	r20, r29
 172:	5c 2f       	mov	r21, r28
 174:	e1 d1       	rcall	.+962    	; 0x538 <__divmodsi4>
 176:	da 01       	movw	r26, r20
 178:	c9 01       	movw	r24, r18
 17a:	88 51       	subi	r24, 0x18	; 24
 17c:	9c 4f       	sbci	r25, 0xFC	; 252
 17e:	af 4f       	sbci	r26, 0xFF	; 255
 180:	bf 4f       	sbci	r27, 0xFF	; 255
 182:	f6 01       	movw	r30, r12
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
		OCR3B = mapping(setAngel[1], 0, 180, 1000, 5000);
 188:	f8 01       	movw	r30, r16
 18a:	84 81       	ldd	r24, Z+4	; 0x04
 18c:	95 81       	ldd	r25, Z+5	; 0x05
 18e:	a6 81       	ldd	r26, Z+6	; 0x06
 190:	b7 81       	ldd	r27, Z+7	; 0x07
 192:	bb 23       	and	r27, r27
 194:	24 f4       	brge	.+8      	; 0x19e <main+0xd6>
 196:	86 2d       	mov	r24, r6
 198:	97 2d       	mov	r25, r7
 19a:	a8 2d       	mov	r26, r8
 19c:	b9 2d       	mov	r27, r9
 19e:	9c 01       	movw	r18, r24
 1a0:	ad 01       	movw	r20, r26
 1a2:	85 3b       	cpi	r24, 0xB5	; 181
 1a4:	91 05       	cpc	r25, r1
 1a6:	a1 05       	cpc	r26, r1
 1a8:	b1 05       	cpc	r27, r1
 1aa:	24 f0       	brlt	.+8      	; 0x1b4 <main+0xec>
 1ac:	2a 2d       	mov	r18, r10
 1ae:	3b 2d       	mov	r19, r11
 1b0:	4d 2f       	mov	r20, r29
 1b2:	5c 2f       	mov	r21, r28
 1b4:	a0 ea       	ldi	r26, 0xA0	; 160
 1b6:	bf e0       	ldi	r27, 0x0F	; 15
 1b8:	db d1       	rcall	.+950    	; 0x570 <__muluhisi3>
 1ba:	2a 2d       	mov	r18, r10
 1bc:	3b 2d       	mov	r19, r11
 1be:	4d 2f       	mov	r20, r29
 1c0:	5c 2f       	mov	r21, r28
 1c2:	ba d1       	rcall	.+884    	; 0x538 <__divmodsi4>
 1c4:	da 01       	movw	r26, r20
 1c6:	c9 01       	movw	r24, r18
 1c8:	88 51       	subi	r24, 0x18	; 24
 1ca:	9c 4f       	sbci	r25, 0xFC	; 252
 1cc:	af 4f       	sbci	r26, 0xFF	; 255
 1ce:	bf 4f       	sbci	r27, 0xFF	; 255
 1d0:	f7 01       	movw	r30, r14
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
 1d6:	b1 cf       	rjmp	.-158    	; 0x13a <main+0x72>

000001d8 <__vector_14>:
}




ISR(TIMER1_OVF_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
	TCNT1 = -300;
 1ec:	84 ed       	ldi	r24, 0xD4	; 212
 1ee:	9e ef       	ldi	r25, 0xFE	; 254
 1f0:	9d bd       	out	0x2d, r25	; 45
 1f2:	8c bd       	out	0x2c, r24	; 44
	idx = idx + 1;
 1f4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 1f8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 1fc:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 200:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	a1 1d       	adc	r26, r1
 208:	b1 1d       	adc	r27, r1
 20a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <idx>
 20e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <idx+0x1>
 212:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <idx+0x2>
 216:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <idx+0x3>
	if(idx > 60000){
 21a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 21e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 222:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 226:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 22a:	81 36       	cpi	r24, 0x61	; 97
 22c:	9a 4e       	sbci	r25, 0xEA	; 234
 22e:	a1 05       	cpc	r26, r1
 230:	b1 05       	cpc	r27, r1
 232:	40 f0       	brcs	.+16     	; 0x244 <__vector_14+0x6c>
		idx = 0;
 234:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <idx>
 238:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <idx+0x1>
 23c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <idx+0x2>
 240:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <idx+0x3>
	}
}
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_1>:


ISR(INT0_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	if( (PIND & 0x01 ) ){
 27a:	80 9b       	sbis	0x10, 0	; 16
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <__vector_1+0x48>
		timer[0] = idx;
 27e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 282:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 286:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 28a:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 28e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <timer>
 292:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <timer+0x1>
 296:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <timer+0x2>
 29a:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <timer+0x3>
 29e:	83 c0       	rjmp	.+262    	; 0x3a6 <__vector_1+0x14e>
	}
	else{
		if(timer[0] != 0){
 2a0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <timer>
 2a4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <timer+0x1>
 2a8:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <timer+0x2>
 2ac:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <timer+0x3>
 2b0:	89 2b       	or	r24, r25
 2b2:	8a 2b       	or	r24, r26
 2b4:	8b 2b       	or	r24, r27
 2b6:	09 f4       	brne	.+2      	; 0x2ba <__vector_1+0x62>
 2b8:	76 c0       	rjmp	.+236    	; 0x3a6 <__vector_1+0x14e>
			pwmValue[0] = idx - timer[0];
 2ba:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 2be:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 2c2:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 2c6:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 2ca:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <timer>
 2ce:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <timer+0x1>
 2d2:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <timer+0x2>
 2d6:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <timer+0x3>
 2da:	84 1b       	sub	r24, r20
 2dc:	95 0b       	sbc	r25, r21
 2de:	a6 0b       	sbc	r26, r22
 2e0:	b7 0b       	sbc	r27, r23
 2e2:	e4 e1       	ldi	r30, 0x14	; 20
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	80 83       	st	Z, r24
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	a2 83       	std	Z+2, r26	; 0x02
 2ec:	b3 83       	std	Z+3, r27	; 0x03
			if(pwmValue[0] > 80){
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	a2 81       	ldd	r26, Z+2	; 0x02
 2f4:	b3 81       	ldd	r27, Z+3	; 0x03
 2f6:	81 35       	cpi	r24, 0x51	; 81
 2f8:	91 05       	cpc	r25, r1
 2fa:	a1 05       	cpc	r26, r1
 2fc:	b1 05       	cpc	r27, r1
 2fe:	70 f0       	brcs	.+28     	; 0x31c <__vector_1+0xc4>
				setAngel[0]++;
 300:	e0 e0       	ldi	r30, 0x00	; 0
 302:	f1 e0       	ldi	r31, 0x01	; 1
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	a2 81       	ldd	r26, Z+2	; 0x02
 30a:	b3 81       	ldd	r27, Z+3	; 0x03
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	a1 1d       	adc	r26, r1
 310:	b1 1d       	adc	r27, r1
 312:	80 83       	st	Z, r24
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	a2 83       	std	Z+2, r26	; 0x02
 318:	b3 83       	std	Z+3, r27	; 0x03
 31a:	19 c0       	rjmp	.+50     	; 0x34e <__vector_1+0xf6>
			}
			else if(pwmValue[0] < 60){
 31c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 320:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 324:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 328:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 32c:	cc 97       	sbiw	r24, 0x3c	; 60
 32e:	a1 05       	cpc	r26, r1
 330:	b1 05       	cpc	r27, r1
 332:	68 f4       	brcc	.+26     	; 0x34e <__vector_1+0xf6>
				setAngel[0]--;
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	80 81       	ld	r24, Z
 33a:	91 81       	ldd	r25, Z+1	; 0x01
 33c:	a2 81       	ldd	r26, Z+2	; 0x02
 33e:	b3 81       	ldd	r27, Z+3	; 0x03
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	a1 09       	sbc	r26, r1
 344:	b1 09       	sbc	r27, r1
 346:	80 83       	st	Z, r24
 348:	91 83       	std	Z+1, r25	; 0x01
 34a:	a2 83       	std	Z+2, r26	; 0x02
 34c:	b3 83       	std	Z+3, r27	; 0x03
			}
			if(setAngel[0] > 180){
 34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 352:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 356:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 35a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 35e:	85 3b       	cpi	r24, 0xB5	; 181
 360:	91 05       	cpc	r25, r1
 362:	a1 05       	cpc	r26, r1
 364:	b1 05       	cpc	r27, r1
 366:	6c f0       	brlt	.+26     	; 0x382 <__vector_1+0x12a>
				setAngel[0] = 180;
 368:	84 eb       	ldi	r24, 0xB4	; 180
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	a0 e0       	ldi	r26, 0x00	; 0
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 374:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 378:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 37c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 380:	12 c0       	rjmp	.+36     	; 0x3a6 <__vector_1+0x14e>
			}
			else if(setAngel[0] < 0){
 382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 386:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 38e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 392:	bb 23       	and	r27, r27
 394:	44 f4       	brge	.+16     	; 0x3a6 <__vector_1+0x14e>
				setAngel[0] = 0;
 396:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 39a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3a2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			}
		}
	}
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	0f 90       	pop	r0
 3bc:	0b be       	out	0x3b, r0	; 59
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_2>:

ISR(INT1_vect){
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	0b b6       	in	r0, 0x3b	; 59
 3d4:	0f 92       	push	r0
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	if( (PIND & ( 0x02 ) ) ){
 3ea:	81 9b       	sbis	0x10, 1	; 16
 3ec:	11 c0       	rjmp	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		timer[1] = idx;
 3ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 3f2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 3f6:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 3fa:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 3fe:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timer+0x4>
 402:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timer+0x5>
 406:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timer+0x6>
 40a:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timer+0x7>
 40e:	83 c0       	rjmp	.+262    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
	}
	else{
		if(timer[1] != 0){
 410:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <timer+0x4>
 414:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <timer+0x5>
 418:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <timer+0x6>
 41c:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <timer+0x7>
 420:	89 2b       	or	r24, r25
 422:	8a 2b       	or	r24, r26
 424:	8b 2b       	or	r24, r27
 426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	76 c0       	rjmp	.+236    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			pwmValue[1] = idx - timer[1];
 42a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <idx>
 42e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <idx+0x1>
 432:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <idx+0x2>
 436:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <idx+0x3>
 43a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <timer+0x4>
 43e:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <timer+0x5>
 442:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <timer+0x6>
 446:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <timer+0x7>
 44a:	84 1b       	sub	r24, r20
 44c:	95 0b       	sbc	r25, r21
 44e:	a6 0b       	sbc	r26, r22
 450:	b7 0b       	sbc	r27, r23
 452:	e4 e1       	ldi	r30, 0x14	; 20
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	84 83       	std	Z+4, r24	; 0x04
 458:	95 83       	std	Z+5, r25	; 0x05
 45a:	a6 83       	std	Z+6, r26	; 0x06
 45c:	b7 83       	std	Z+7, r27	; 0x07
			if(pwmValue[1] > 80){
 45e:	84 81       	ldd	r24, Z+4	; 0x04
 460:	95 81       	ldd	r25, Z+5	; 0x05
 462:	a6 81       	ldd	r26, Z+6	; 0x06
 464:	b7 81       	ldd	r27, Z+7	; 0x07
 466:	81 35       	cpi	r24, 0x51	; 81
 468:	91 05       	cpc	r25, r1
 46a:	a1 05       	cpc	r26, r1
 46c:	b1 05       	cpc	r27, r1
 46e:	70 f0       	brcs	.+28     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				setAngel[1]++;
 470:	e0 e0       	ldi	r30, 0x00	; 0
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	84 81       	ldd	r24, Z+4	; 0x04
 476:	95 81       	ldd	r25, Z+5	; 0x05
 478:	a6 81       	ldd	r26, Z+6	; 0x06
 47a:	b7 81       	ldd	r27, Z+7	; 0x07
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	a1 1d       	adc	r26, r1
 480:	b1 1d       	adc	r27, r1
 482:	84 83       	std	Z+4, r24	; 0x04
 484:	95 83       	std	Z+5, r25	; 0x05
 486:	a6 83       	std	Z+6, r26	; 0x06
 488:	b7 83       	std	Z+7, r27	; 0x07
 48a:	19 c0       	rjmp	.+50     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			}
			else if(pwmValue[1] < 60){
 48c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x4>
 490:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x5>
 494:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x6>
 498:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x7>
 49c:	cc 97       	sbiw	r24, 0x3c	; 60
 49e:	a1 05       	cpc	r26, r1
 4a0:	b1 05       	cpc	r27, r1
 4a2:	68 f4       	brcc	.+26     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				setAngel[1]--;
 4a4:	e0 e0       	ldi	r30, 0x00	; 0
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	84 81       	ldd	r24, Z+4	; 0x04
 4aa:	95 81       	ldd	r25, Z+5	; 0x05
 4ac:	a6 81       	ldd	r26, Z+6	; 0x06
 4ae:	b7 81       	ldd	r27, Z+7	; 0x07
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	a1 09       	sbc	r26, r1
 4b4:	b1 09       	sbc	r27, r1
 4b6:	84 83       	std	Z+4, r24	; 0x04
 4b8:	95 83       	std	Z+5, r25	; 0x05
 4ba:	a6 83       	std	Z+6, r26	; 0x06
 4bc:	b7 83       	std	Z+7, r27	; 0x07
			}
			if(setAngel[1] > 180){
 4be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 4c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 4c6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 4ca:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 4ce:	85 3b       	cpi	r24, 0xB5	; 181
 4d0:	91 05       	cpc	r25, r1
 4d2:	a1 05       	cpc	r26, r1
 4d4:	b1 05       	cpc	r27, r1
 4d6:	6c f0       	brlt	.+26     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
				setAngel[1] = 180;
 4d8:	84 eb       	ldi	r24, 0xB4	; 180
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	a0 e0       	ldi	r26, 0x00	; 0
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 4e4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 4e8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 4ec:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 4f0:	12 c0       	rjmp	.+36     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			}
			else if(setAngel[1] < 0){
 4f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 4f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 4fa:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 4fe:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 502:	bb 23       	and	r27, r27
 504:	44 f4       	brge	.+16     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				setAngel[1] = 0;
 506:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 50a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 50e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 512:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	0f 90       	pop	r0
 52c:	0b be       	out	0x3b, r0	; 59
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <__divmodsi4>:
 538:	05 2e       	mov	r0, r21
 53a:	97 fb       	bst	r25, 7
 53c:	16 f4       	brtc	.+4      	; 0x542 <__divmodsi4+0xa>
 53e:	00 94       	com	r0
 540:	0f d0       	rcall	.+30     	; 0x560 <__negsi2>
 542:	57 fd       	sbrc	r21, 7
 544:	05 d0       	rcall	.+10     	; 0x550 <__divmodsi4_neg2>
 546:	1e d0       	rcall	.+60     	; 0x584 <__udivmodsi4>
 548:	07 fc       	sbrc	r0, 7
 54a:	02 d0       	rcall	.+4      	; 0x550 <__divmodsi4_neg2>
 54c:	46 f4       	brtc	.+16     	; 0x55e <__divmodsi4_exit>
 54e:	08 c0       	rjmp	.+16     	; 0x560 <__negsi2>

00000550 <__divmodsi4_neg2>:
 550:	50 95       	com	r21
 552:	40 95       	com	r20
 554:	30 95       	com	r19
 556:	21 95       	neg	r18
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	4f 4f       	sbci	r20, 0xFF	; 255
 55c:	5f 4f       	sbci	r21, 0xFF	; 255

0000055e <__divmodsi4_exit>:
 55e:	08 95       	ret

00000560 <__negsi2>:
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__muluhisi3>:
 570:	2b d0       	rcall	.+86     	; 0x5c8 <__umulhisi3>
 572:	a5 9f       	mul	r26, r21
 574:	90 0d       	add	r25, r0
 576:	b4 9f       	mul	r27, r20
 578:	90 0d       	add	r25, r0
 57a:	a4 9f       	mul	r26, r20
 57c:	80 0d       	add	r24, r0
 57e:	91 1d       	adc	r25, r1
 580:	11 24       	eor	r1, r1
 582:	08 95       	ret

00000584 <__udivmodsi4>:
 584:	a1 e2       	ldi	r26, 0x21	; 33
 586:	1a 2e       	mov	r1, r26
 588:	aa 1b       	sub	r26, r26
 58a:	bb 1b       	sub	r27, r27
 58c:	fd 01       	movw	r30, r26
 58e:	0d c0       	rjmp	.+26     	; 0x5aa <__udivmodsi4_ep>

00000590 <__udivmodsi4_loop>:
 590:	aa 1f       	adc	r26, r26
 592:	bb 1f       	adc	r27, r27
 594:	ee 1f       	adc	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	a2 17       	cp	r26, r18
 59a:	b3 07       	cpc	r27, r19
 59c:	e4 07       	cpc	r30, r20
 59e:	f5 07       	cpc	r31, r21
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <__udivmodsi4_ep>
 5a2:	a2 1b       	sub	r26, r18
 5a4:	b3 0b       	sbc	r27, r19
 5a6:	e4 0b       	sbc	r30, r20
 5a8:	f5 0b       	sbc	r31, r21

000005aa <__udivmodsi4_ep>:
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	1a 94       	dec	r1
 5b4:	69 f7       	brne	.-38     	; 0x590 <__udivmodsi4_loop>
 5b6:	60 95       	com	r22
 5b8:	70 95       	com	r23
 5ba:	80 95       	com	r24
 5bc:	90 95       	com	r25
 5be:	9b 01       	movw	r18, r22
 5c0:	ac 01       	movw	r20, r24
 5c2:	bd 01       	movw	r22, r26
 5c4:	cf 01       	movw	r24, r30
 5c6:	08 95       	ret

000005c8 <__umulhisi3>:
 5c8:	a2 9f       	mul	r26, r18
 5ca:	b0 01       	movw	r22, r0
 5cc:	b3 9f       	mul	r27, r19
 5ce:	c0 01       	movw	r24, r0
 5d0:	a3 9f       	mul	r26, r19
 5d2:	70 0d       	add	r23, r0
 5d4:	81 1d       	adc	r24, r1
 5d6:	11 24       	eor	r1, r1
 5d8:	91 1d       	adc	r25, r1
 5da:	b2 9f       	mul	r27, r18
 5dc:	70 0d       	add	r23, r0
 5de:	81 1d       	adc	r24, r1
 5e0:	11 24       	eor	r1, r1
 5e2:	91 1d       	adc	r25, r1
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
