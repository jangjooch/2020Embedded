
Beginning02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000935  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080d  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010b  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002015  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ff c0       	rjmp	.+510    	; 0x204 <__vector_1>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	f9 c1       	rjmp	.+1010   	; 0x49e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

char idx = 0;
unsigned long past01 = 0;
unsigned long past02 = 0;
int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2e 97       	sbiw	r28, 0x0e	; 14
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	DDRD = 0xF0;//PD0, 1 INPUT
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	20 ef       	ldi	r18, 0xF0	; 240
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	
	EICRA = 0b00001010; // INT0, 1 Falling Edge 선택
  cc:	8a e6       	ldi	r24, 0x6A	; 106
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2a e0       	ldi	r18, 0x0A	; 10
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	EIMSK = 0x03; // INT0, 1Enable
  d6:	89 e5       	ldi	r24, 0x59	; 89
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	
	SFIOR &= ~(0x04);// Clear
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	20 e4       	ldi	r18, 0x40	; 64
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	2b 7f       	andi	r18, 0xFB	; 251
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	
	sei(); // Interrupt Enable	
  f2:	78 94       	sei
	
	PORTD = 0x03;
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	23 e0       	ldi	r18, 0x03	; 3
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	
	DDRB = 0xFF; // PORTB all OUTPUT
  fe:	87 e3       	ldi	r24, 0x37	; 55
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	
    while (1) 
    {
		PORTB = ~(1 << idx);
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	42 2f       	mov	r20, r18
 112:	22 0f       	add	r18, r18
 114:	55 0b       	sbc	r21, r21
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x72>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <main+0x6e>
 124:	20 95       	com	r18
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a8 ec       	ldi	r26, 0xC8	; 200
 130:	b2 e4       	ldi	r27, 0x42	; 66
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	ab 83       	std	Y+3, r26	; 0x03
 138:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	4a e7       	ldi	r20, 0x7A	; 122
 140:	55 e4       	ldi	r21, 0x45	; 69
 142:	69 81       	ldd	r22, Y+1	; 0x01
 144:	7a 81       	ldd	r23, Y+2	; 0x02
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	9c 81       	ldd	r25, Y+4	; 0x04
 14a:	1e d1       	rcall	.+572    	; 0x388 <__mulsf3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	8d 83       	std	Y+5, r24	; 0x05
 152:	9e 83       	std	Y+6, r25	; 0x06
 154:	af 83       	std	Y+7, r26	; 0x07
 156:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	6d 81       	ldd	r22, Y+5	; 0x05
 162:	7e 81       	ldd	r23, Y+6	; 0x06
 164:	8f 81       	ldd	r24, Y+7	; 0x07
 166:	98 85       	ldd	r25, Y+8	; 0x08
 168:	8e d0       	rcall	.+284    	; 0x286 <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	2c f4       	brge	.+10     	; 0x178 <main+0xca>
		__ticks = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9a 87       	std	Y+10, r25	; 0x0a
 174:	89 87       	std	Y+9, r24	; 0x09
 176:	3b c0       	rjmp	.+118    	; 0x1ee <main+0x140>
	else if (__tmp > 65535)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	3f ef       	ldi	r19, 0xFF	; 255
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	57 e4       	ldi	r21, 0x47	; 71
 180:	6d 81       	ldd	r22, Y+5	; 0x05
 182:	7e 81       	ldd	r23, Y+6	; 0x06
 184:	8f 81       	ldd	r24, Y+7	; 0x07
 186:	98 85       	ldd	r25, Y+8	; 0x08
 188:	fb d0       	rcall	.+502    	; 0x380 <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	3c f5       	brge	.+78     	; 0x1dc <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e2       	ldi	r20, 0x20	; 32
 194:	51 e4       	ldi	r21, 0x41	; 65
 196:	69 81       	ldd	r22, Y+1	; 0x01
 198:	7a 81       	ldd	r23, Y+2	; 0x02
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	f4 d0       	rcall	.+488    	; 0x388 <__mulsf3>
 1a0:	dc 01       	movw	r26, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	bc 01       	movw	r22, r24
 1a6:	cd 01       	movw	r24, r26
 1a8:	72 d0       	rcall	.+228    	; 0x28e <__fixunssfsi>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	9a 87       	std	Y+10, r25	; 0x0a
 1b0:	89 87       	std	Y+9, r24	; 0x09
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <main+0x124>
 1b4:	80 e9       	ldi	r24, 0x90	; 144
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	9c 87       	std	Y+12, r25	; 0x0c
 1ba:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1be:	9c 85       	ldd	r25, Y+12	; 0x0c
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x112>
 1c4:	9c 87       	std	Y+12, r25	; 0x0c
 1c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	89 85       	ldd	r24, Y+9	; 0x09
 1ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	9a 87       	std	Y+10, r25	; 0x0a
 1d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d6:	89 2b       	or	r24, r25
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	13 c0       	rjmp	.+38     	; 0x202 <main+0x154>
 1dc:	6d 81       	ldd	r22, Y+5	; 0x05
 1de:	7e 81       	ldd	r23, Y+6	; 0x06
 1e0:	8f 81       	ldd	r24, Y+7	; 0x07
 1e2:	98 85       	ldd	r25, Y+8	; 0x08
 1e4:	54 d0       	rcall	.+168    	; 0x28e <__fixunssfsi>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	9a 87       	std	Y+10, r25	; 0x0a
 1ec:	89 87       	std	Y+9, r24	; 0x09
 1ee:	89 85       	ldd	r24, Y+9	; 0x09
 1f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f2:	9e 87       	std	Y+14, r25	; 0x0e
 1f4:	8d 87       	std	Y+13, r24	; 0x0d
 1f6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x14c>
 1fe:	9e 87       	std	Y+14, r25	; 0x0e
 200:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(100);
    }
 202:	82 cf       	rjmp	.-252    	; 0x108 <main+0x5a>

00000204 <__vector_1>:
	//cli(); // Interrupt Disable
}

ISR(INT0_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	idx = idx + 1;
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(idx > 7){
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	14 f0       	brlt	.+4      	; 0x230 <__vector_1+0x2c>
		idx = 0;
 22c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 230:	00 00       	nop
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_2>:
ISR(INT1_vect){		
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	8f 93       	push	r24
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	idx = idx - 1;
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(idx < 0){
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	88 23       	and	r24, r24
 26a:	1c f4       	brge	.+6      	; 0x272 <__vector_2+0x2e>
		idx = 7;
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 272:	00 00       	nop
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__cmpsf2>:
 286:	2f d0       	rcall	.+94     	; 0x2e6 <__fp_cmp>
 288:	08 f4       	brcc	.+2      	; 0x28c <__cmpsf2+0x6>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret

0000028e <__fixunssfsi>:
 28e:	57 d0       	rcall	.+174    	; 0x33e <__fp_splitA>
 290:	88 f0       	brcs	.+34     	; 0x2b4 <__fixunssfsi+0x26>
 292:	9f 57       	subi	r25, 0x7F	; 127
 294:	90 f0       	brcs	.+36     	; 0x2ba <__fixunssfsi+0x2c>
 296:	b9 2f       	mov	r27, r25
 298:	99 27       	eor	r25, r25
 29a:	b7 51       	subi	r27, 0x17	; 23
 29c:	a0 f0       	brcs	.+40     	; 0x2c6 <__fixunssfsi+0x38>
 29e:	d1 f0       	breq	.+52     	; 0x2d4 <__fixunssfsi+0x46>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	1a f0       	brmi	.+6      	; 0x2b0 <__fixunssfsi+0x22>
 2aa:	ba 95       	dec	r27
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <__fixunssfsi+0x12>
 2ae:	12 c0       	rjmp	.+36     	; 0x2d4 <__fixunssfsi+0x46>
 2b0:	b1 30       	cpi	r27, 0x01	; 1
 2b2:	81 f0       	breq	.+32     	; 0x2d4 <__fixunssfsi+0x46>
 2b4:	5e d0       	rcall	.+188    	; 0x372 <__fp_zero>
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	5b c0       	rjmp	.+182    	; 0x372 <__fp_zero>
 2bc:	67 2f       	mov	r22, r23
 2be:	78 2f       	mov	r23, r24
 2c0:	88 27       	eor	r24, r24
 2c2:	b8 5f       	subi	r27, 0xF8	; 248
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <__fixunssfsi+0x46>
 2c6:	b9 3f       	cpi	r27, 0xF9	; 249
 2c8:	cc f3       	brlt	.-14     	; 0x2bc <__fixunssfsi+0x2e>
 2ca:	86 95       	lsr	r24
 2cc:	77 95       	ror	r23
 2ce:	67 95       	ror	r22
 2d0:	b3 95       	inc	r27
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <__fixunssfsi+0x3c>
 2d4:	3e f4       	brtc	.+14     	; 0x2e4 <__fixunssfsi+0x56>
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	08 95       	ret

000002e6 <__fp_cmp>:
 2e6:	99 0f       	add	r25, r25
 2e8:	00 08       	sbc	r0, r0
 2ea:	55 0f       	add	r21, r21
 2ec:	aa 0b       	sbc	r26, r26
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	fe ef       	ldi	r31, 0xFE	; 254
 2f2:	16 16       	cp	r1, r22
 2f4:	17 06       	cpc	r1, r23
 2f6:	e8 07       	cpc	r30, r24
 2f8:	f9 07       	cpc	r31, r25
 2fa:	c0 f0       	brcs	.+48     	; 0x32c <__fp_cmp+0x46>
 2fc:	12 16       	cp	r1, r18
 2fe:	13 06       	cpc	r1, r19
 300:	e4 07       	cpc	r30, r20
 302:	f5 07       	cpc	r31, r21
 304:	98 f0       	brcs	.+38     	; 0x32c <__fp_cmp+0x46>
 306:	62 1b       	sub	r22, r18
 308:	73 0b       	sbc	r23, r19
 30a:	84 0b       	sbc	r24, r20
 30c:	95 0b       	sbc	r25, r21
 30e:	39 f4       	brne	.+14     	; 0x31e <__fp_cmp+0x38>
 310:	0a 26       	eor	r0, r26
 312:	61 f0       	breq	.+24     	; 0x32c <__fp_cmp+0x46>
 314:	23 2b       	or	r18, r19
 316:	24 2b       	or	r18, r20
 318:	25 2b       	or	r18, r21
 31a:	21 f4       	brne	.+8      	; 0x324 <__fp_cmp+0x3e>
 31c:	08 95       	ret
 31e:	0a 26       	eor	r0, r26
 320:	09 f4       	brne	.+2      	; 0x324 <__fp_cmp+0x3e>
 322:	a1 40       	sbci	r26, 0x01	; 1
 324:	a6 95       	lsr	r26
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	81 1d       	adc	r24, r1
 32a:	81 1d       	adc	r24, r1
 32c:	08 95       	ret

0000032e <__fp_split3>:
 32e:	57 fd       	sbrc	r21, 7
 330:	90 58       	subi	r25, 0x80	; 128
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	59 f0       	breq	.+22     	; 0x34e <__fp_splitA+0x10>
 338:	5f 3f       	cpi	r21, 0xFF	; 255
 33a:	71 f0       	breq	.+28     	; 0x358 <__fp_splitA+0x1a>
 33c:	47 95       	ror	r20

0000033e <__fp_splitA>:
 33e:	88 0f       	add	r24, r24
 340:	97 fb       	bst	r25, 7
 342:	99 1f       	adc	r25, r25
 344:	61 f0       	breq	.+24     	; 0x35e <__fp_splitA+0x20>
 346:	9f 3f       	cpi	r25, 0xFF	; 255
 348:	79 f0       	breq	.+30     	; 0x368 <__fp_splitA+0x2a>
 34a:	87 95       	ror	r24
 34c:	08 95       	ret
 34e:	12 16       	cp	r1, r18
 350:	13 06       	cpc	r1, r19
 352:	14 06       	cpc	r1, r20
 354:	55 1f       	adc	r21, r21
 356:	f2 cf       	rjmp	.-28     	; 0x33c <__fp_split3+0xe>
 358:	46 95       	lsr	r20
 35a:	f1 df       	rcall	.-30     	; 0x33e <__fp_splitA>
 35c:	08 c0       	rjmp	.+16     	; 0x36e <__fp_splitA+0x30>
 35e:	16 16       	cp	r1, r22
 360:	17 06       	cpc	r1, r23
 362:	18 06       	cpc	r1, r24
 364:	99 1f       	adc	r25, r25
 366:	f1 cf       	rjmp	.-30     	; 0x34a <__fp_splitA+0xc>
 368:	86 95       	lsr	r24
 36a:	71 05       	cpc	r23, r1
 36c:	61 05       	cpc	r22, r1
 36e:	08 94       	sec
 370:	08 95       	ret

00000372 <__fp_zero>:
 372:	e8 94       	clt

00000374 <__fp_szero>:
 374:	bb 27       	eor	r27, r27
 376:	66 27       	eor	r22, r22
 378:	77 27       	eor	r23, r23
 37a:	cb 01       	movw	r24, r22
 37c:	97 f9       	bld	r25, 7
 37e:	08 95       	ret

00000380 <__gesf2>:
 380:	b2 df       	rcall	.-156    	; 0x2e6 <__fp_cmp>
 382:	08 f4       	brcc	.+2      	; 0x386 <__gesf2+0x6>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	08 95       	ret

00000388 <__mulsf3>:
 388:	0b d0       	rcall	.+22     	; 0x3a0 <__mulsf3x>
 38a:	78 c0       	rjmp	.+240    	; 0x47c <__fp_round>
 38c:	69 d0       	rcall	.+210    	; 0x460 <__fp_pscA>
 38e:	28 f0       	brcs	.+10     	; 0x39a <__mulsf3+0x12>
 390:	6e d0       	rcall	.+220    	; 0x46e <__fp_pscB>
 392:	18 f0       	brcs	.+6      	; 0x39a <__mulsf3+0x12>
 394:	95 23       	and	r25, r21
 396:	09 f0       	breq	.+2      	; 0x39a <__mulsf3+0x12>
 398:	5a c0       	rjmp	.+180    	; 0x44e <__fp_inf>
 39a:	5f c0       	rjmp	.+190    	; 0x45a <__fp_nan>
 39c:	11 24       	eor	r1, r1
 39e:	ea cf       	rjmp	.-44     	; 0x374 <__fp_szero>

000003a0 <__mulsf3x>:
 3a0:	c6 df       	rcall	.-116    	; 0x32e <__fp_split3>
 3a2:	a0 f3       	brcs	.-24     	; 0x38c <__mulsf3+0x4>

000003a4 <__mulsf3_pse>:
 3a4:	95 9f       	mul	r25, r21
 3a6:	d1 f3       	breq	.-12     	; 0x39c <__mulsf3+0x14>
 3a8:	95 0f       	add	r25, r21
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	55 1f       	adc	r21, r21
 3ae:	62 9f       	mul	r22, r18
 3b0:	f0 01       	movw	r30, r0
 3b2:	72 9f       	mul	r23, r18
 3b4:	bb 27       	eor	r27, r27
 3b6:	f0 0d       	add	r31, r0
 3b8:	b1 1d       	adc	r27, r1
 3ba:	63 9f       	mul	r22, r19
 3bc:	aa 27       	eor	r26, r26
 3be:	f0 0d       	add	r31, r0
 3c0:	b1 1d       	adc	r27, r1
 3c2:	aa 1f       	adc	r26, r26
 3c4:	64 9f       	mul	r22, r20
 3c6:	66 27       	eor	r22, r22
 3c8:	b0 0d       	add	r27, r0
 3ca:	a1 1d       	adc	r26, r1
 3cc:	66 1f       	adc	r22, r22
 3ce:	82 9f       	mul	r24, r18
 3d0:	22 27       	eor	r18, r18
 3d2:	b0 0d       	add	r27, r0
 3d4:	a1 1d       	adc	r26, r1
 3d6:	62 1f       	adc	r22, r18
 3d8:	73 9f       	mul	r23, r19
 3da:	b0 0d       	add	r27, r0
 3dc:	a1 1d       	adc	r26, r1
 3de:	62 1f       	adc	r22, r18
 3e0:	83 9f       	mul	r24, r19
 3e2:	a0 0d       	add	r26, r0
 3e4:	61 1d       	adc	r22, r1
 3e6:	22 1f       	adc	r18, r18
 3e8:	74 9f       	mul	r23, r20
 3ea:	33 27       	eor	r19, r19
 3ec:	a0 0d       	add	r26, r0
 3ee:	61 1d       	adc	r22, r1
 3f0:	23 1f       	adc	r18, r19
 3f2:	84 9f       	mul	r24, r20
 3f4:	60 0d       	add	r22, r0
 3f6:	21 1d       	adc	r18, r1
 3f8:	82 2f       	mov	r24, r18
 3fa:	76 2f       	mov	r23, r22
 3fc:	6a 2f       	mov	r22, r26
 3fe:	11 24       	eor	r1, r1
 400:	9f 57       	subi	r25, 0x7F	; 127
 402:	50 40       	sbci	r21, 0x00	; 0
 404:	8a f0       	brmi	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 406:	e1 f0       	breq	.+56     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 408:	88 23       	and	r24, r24
 40a:	4a f0       	brmi	.+18     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	bb 1f       	adc	r27, r27
 412:	66 1f       	adc	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	a9 f7       	brne	.-22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 41e:	9e 3f       	cpi	r25, 0xFE	; 254
 420:	51 05       	cpc	r21, r1
 422:	70 f0       	brcs	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	14 c0       	rjmp	.+40     	; 0x44e <__fp_inf>
 426:	a6 cf       	rjmp	.-180    	; 0x374 <__fp_szero>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	ec f3       	brlt	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42c:	98 3e       	cpi	r25, 0xE8	; 232
 42e:	dc f3       	brlt	.-10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b7 95       	ror	r27
 438:	f7 95       	ror	r31
 43a:	e7 95       	ror	r30
 43c:	9f 5f       	subi	r25, 0xFF	; 255
 43e:	c1 f7       	brne	.-16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 440:	fe 2b       	or	r31, r30
 442:	88 0f       	add	r24, r24
 444:	91 1d       	adc	r25, r1
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	97 f9       	bld	r25, 7
 44c:	08 95       	ret

0000044e <__fp_inf>:
 44e:	97 f9       	bld	r25, 7
 450:	9f 67       	ori	r25, 0x7F	; 127
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	08 95       	ret

0000045a <__fp_nan>:
 45a:	9f ef       	ldi	r25, 0xFF	; 255
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	08 95       	ret

00000460 <__fp_pscA>:
 460:	00 24       	eor	r0, r0
 462:	0a 94       	dec	r0
 464:	16 16       	cp	r1, r22
 466:	17 06       	cpc	r1, r23
 468:	18 06       	cpc	r1, r24
 46a:	09 06       	cpc	r0, r25
 46c:	08 95       	ret

0000046e <__fp_pscB>:
 46e:	00 24       	eor	r0, r0
 470:	0a 94       	dec	r0
 472:	12 16       	cp	r1, r18
 474:	13 06       	cpc	r1, r19
 476:	14 06       	cpc	r1, r20
 478:	05 06       	cpc	r0, r21
 47a:	08 95       	ret

0000047c <__fp_round>:
 47c:	09 2e       	mov	r0, r25
 47e:	03 94       	inc	r0
 480:	00 0c       	add	r0, r0
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0xc>
 484:	88 23       	and	r24, r24
 486:	52 f0       	brmi	.+20     	; 0x49c <__fp_round+0x20>
 488:	bb 0f       	add	r27, r27
 48a:	40 f4       	brcc	.+16     	; 0x49c <__fp_round+0x20>
 48c:	bf 2b       	or	r27, r31
 48e:	11 f4       	brne	.+4      	; 0x494 <__fp_round+0x18>
 490:	60 ff       	sbrs	r22, 0
 492:	04 c0       	rjmp	.+8      	; 0x49c <__fp_round+0x20>
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	8f 4f       	sbci	r24, 0xFF	; 255
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
