
Beginning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000932  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d1  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000345  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	0b c2       	rjmp	.+1046   	; 0x4b2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
// 레지스터 관리용 헤더파일
#include <avr/delay.h>

int main(void)
{	
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	6c 97       	sbiw	r28, 0x1c	; 28
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRC |= 0x01;
  b2:	84 e3       	ldi	r24, 0x34	; 52
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	24 e3       	ldi	r18, 0x34	; 52
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	20 81       	ld	r18, Z
  be:	21 60       	ori	r18, 0x01	; 1
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
    while (1) 
    {
		PORTC |= 0x01;		
  c4:	85 e3       	ldi	r24, 0x35	; 53
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	25 e3       	ldi	r18, 0x35	; 53
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	20 81       	ld	r18, Z
  d0:	21 60       	ori	r18, 0x01	; 1
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	aa e7       	ldi	r26, 0x7A	; 122
  dc:	b4 e4       	ldi	r27, 0x44	; 68
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	ab 83       	std	Y+3, r26	; 0x03
  e4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	4a e7       	ldi	r20, 0x7A	; 122
  ec:	55 e4       	ldi	r21, 0x45	; 69
  ee:	69 81       	ldd	r22, Y+1	; 0x01
  f0:	7a 81       	ldd	r23, Y+2	; 0x02
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	52 d1       	rcall	.+676    	; 0x39c <__mulsf3>
  f8:	dc 01       	movw	r26, r24
  fa:	cb 01       	movw	r24, r22
  fc:	8b 8b       	std	Y+19, r24	; 0x13
  fe:	9c 8b       	std	Y+20, r25	; 0x14
 100:	ad 8b       	std	Y+21, r26	; 0x15
 102:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	5f e3       	ldi	r21, 0x3F	; 63
 10c:	6b 89       	ldd	r22, Y+19	; 0x13
 10e:	7c 89       	ldd	r23, Y+20	; 0x14
 110:	8d 89       	ldd	r24, Y+21	; 0x15
 112:	9e 89       	ldd	r25, Y+22	; 0x16
 114:	c2 d0       	rcall	.+388    	; 0x29a <__cmpsf2>
 116:	88 23       	and	r24, r24
 118:	2c f4       	brge	.+10     	; 0x124 <main+0x86>
		__ticks = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	98 8f       	std	Y+24, r25	; 0x18
 120:	8f 8b       	std	Y+23, r24	; 0x17
 122:	3b c0       	rjmp	.+118    	; 0x19a <main+0xfc>
	else if (__tmp > 65535)
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	4f e7       	ldi	r20, 0x7F	; 127
 12a:	57 e4       	ldi	r21, 0x47	; 71
 12c:	6b 89       	ldd	r22, Y+19	; 0x13
 12e:	7c 89       	ldd	r23, Y+20	; 0x14
 130:	8d 89       	ldd	r24, Y+21	; 0x15
 132:	9e 89       	ldd	r25, Y+22	; 0x16
 134:	2f d1       	rcall	.+606    	; 0x394 <__gesf2>
 136:	18 16       	cp	r1, r24
 138:	3c f5       	brge	.+78     	; 0x188 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e2       	ldi	r20, 0x20	; 32
 140:	51 e4       	ldi	r21, 0x41	; 65
 142:	69 81       	ldd	r22, Y+1	; 0x01
 144:	7a 81       	ldd	r23, Y+2	; 0x02
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	9c 81       	ldd	r25, Y+4	; 0x04
 14a:	28 d1       	rcall	.+592    	; 0x39c <__mulsf3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	bc 01       	movw	r22, r24
 152:	cd 01       	movw	r24, r26
 154:	a6 d0       	rcall	.+332    	; 0x2a2 <__fixunssfsi>
 156:	dc 01       	movw	r26, r24
 158:	cb 01       	movw	r24, r22
 15a:	98 8f       	std	Y+24, r25	; 0x18
 15c:	8f 8b       	std	Y+23, r24	; 0x17
 15e:	0f c0       	rjmp	.+30     	; 0x17e <main+0xe0>
 160:	80 e9       	ldi	r24, 0x90	; 144
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	9a 8f       	std	Y+26, r25	; 0x1a
 166:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	89 8d       	ldd	r24, Y+25	; 0x19
 16a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xce>
 170:	9a 8f       	std	Y+26, r25	; 0x1a
 172:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	8f 89       	ldd	r24, Y+23	; 0x17
 176:	98 8d       	ldd	r25, Y+24	; 0x18
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	98 8f       	std	Y+24, r25	; 0x18
 17c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	8f 89       	ldd	r24, Y+23	; 0x17
 180:	98 8d       	ldd	r25, Y+24	; 0x18
 182:	89 2b       	or	r24, r25
 184:	69 f7       	brne	.-38     	; 0x160 <main+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	13 c0       	rjmp	.+38     	; 0x1ae <main+0x110>
 188:	6b 89       	ldd	r22, Y+19	; 0x13
 18a:	7c 89       	ldd	r23, Y+20	; 0x14
 18c:	8d 89       	ldd	r24, Y+21	; 0x15
 18e:	9e 89       	ldd	r25, Y+22	; 0x16
 190:	88 d0       	rcall	.+272    	; 0x2a2 <__fixunssfsi>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	98 8f       	std	Y+24, r25	; 0x18
 198:	8f 8b       	std	Y+23, r24	; 0x17
 19a:	8f 89       	ldd	r24, Y+23	; 0x17
 19c:	98 8d       	ldd	r25, Y+24	; 0x18
 19e:	9c 8f       	std	Y+28, r25	; 0x1c
 1a0:	8b 8f       	std	Y+27, r24	; 0x1b
 1a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x108>
 1aa:	9c 8f       	std	Y+28, r25	; 0x1c
 1ac:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		PORTC &= ~(0x01);
 1ae:	85 e3       	ldi	r24, 0x35	; 53
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	25 e3       	ldi	r18, 0x35	; 53
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 81       	ld	r18, Z
 1ba:	2e 7f       	andi	r18, 0xFE	; 254
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	aa e7       	ldi	r26, 0x7A	; 122
 1c6:	b4 e4       	ldi	r27, 0x44	; 68
 1c8:	8d 83       	std	Y+5, r24	; 0x05
 1ca:	9e 83       	std	Y+6, r25	; 0x06
 1cc:	af 83       	std	Y+7, r26	; 0x07
 1ce:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	4a e7       	ldi	r20, 0x7A	; 122
 1d6:	55 e4       	ldi	r21, 0x45	; 69
 1d8:	6d 81       	ldd	r22, Y+5	; 0x05
 1da:	7e 81       	ldd	r23, Y+6	; 0x06
 1dc:	8f 81       	ldd	r24, Y+7	; 0x07
 1de:	98 85       	ldd	r25, Y+8	; 0x08
 1e0:	dd d0       	rcall	.+442    	; 0x39c <__mulsf3>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	89 87       	std	Y+9, r24	; 0x09
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	ab 87       	std	Y+11, r26	; 0x0b
 1ec:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e8       	ldi	r20, 0x80	; 128
 1f4:	5f e3       	ldi	r21, 0x3F	; 63
 1f6:	69 85       	ldd	r22, Y+9	; 0x09
 1f8:	7a 85       	ldd	r23, Y+10	; 0x0a
 1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 1fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fe:	4d d0       	rcall	.+154    	; 0x29a <__cmpsf2>
 200:	88 23       	and	r24, r24
 202:	2c f4       	brge	.+10     	; 0x20e <main+0x170>
		__ticks = 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	9e 87       	std	Y+14, r25	; 0x0e
 20a:	8d 87       	std	Y+13, r24	; 0x0d
 20c:	3b c0       	rjmp	.+118    	; 0x284 <main+0x1e6>
	else if (__tmp > 65535)
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	3f ef       	ldi	r19, 0xFF	; 255
 212:	4f e7       	ldi	r20, 0x7F	; 127
 214:	57 e4       	ldi	r21, 0x47	; 71
 216:	69 85       	ldd	r22, Y+9	; 0x09
 218:	7a 85       	ldd	r23, Y+10	; 0x0a
 21a:	8b 85       	ldd	r24, Y+11	; 0x0b
 21c:	9c 85       	ldd	r25, Y+12	; 0x0c
 21e:	ba d0       	rcall	.+372    	; 0x394 <__gesf2>
 220:	18 16       	cp	r1, r24
 222:	3c f5       	brge	.+78     	; 0x272 <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e2       	ldi	r20, 0x20	; 32
 22a:	51 e4       	ldi	r21, 0x41	; 65
 22c:	6d 81       	ldd	r22, Y+5	; 0x05
 22e:	7e 81       	ldd	r23, Y+6	; 0x06
 230:	8f 81       	ldd	r24, Y+7	; 0x07
 232:	98 85       	ldd	r25, Y+8	; 0x08
 234:	b3 d0       	rcall	.+358    	; 0x39c <__mulsf3>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
 23a:	bc 01       	movw	r22, r24
 23c:	cd 01       	movw	r24, r26
 23e:	31 d0       	rcall	.+98     	; 0x2a2 <__fixunssfsi>
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	9e 87       	std	Y+14, r25	; 0x0e
 246:	8d 87       	std	Y+13, r24	; 0x0d
 248:	0f c0       	rjmp	.+30     	; 0x268 <main+0x1ca>
 24a:	80 e9       	ldi	r24, 0x90	; 144
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	98 8b       	std	Y+16, r25	; 0x10
 250:	8f 87       	std	Y+15, r24	; 0x0f
 252:	8f 85       	ldd	r24, Y+15	; 0x0f
 254:	98 89       	ldd	r25, Y+16	; 0x10
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x1b8>
 25a:	98 8b       	std	Y+16, r25	; 0x10
 25c:	8f 87       	std	Y+15, r24	; 0x0f
 25e:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 260:	9e 85       	ldd	r25, Y+14	; 0x0e
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	9e 87       	std	Y+14, r25	; 0x0e
 266:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 268:	8d 85       	ldd	r24, Y+13	; 0x0d
 26a:	9e 85       	ldd	r25, Y+14	; 0x0e
 26c:	89 2b       	or	r24, r25
 26e:	69 f7       	brne	.-38     	; 0x24a <main+0x1ac>
 270:	13 c0       	rjmp	.+38     	; 0x298 <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 272:	69 85       	ldd	r22, Y+9	; 0x09
 274:	7a 85       	ldd	r23, Y+10	; 0x0a
 276:	8b 85       	ldd	r24, Y+11	; 0x0b
 278:	9c 85       	ldd	r25, Y+12	; 0x0c
 27a:	13 d0       	rcall	.+38     	; 0x2a2 <__fixunssfsi>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	9e 87       	std	Y+14, r25	; 0x0e
 282:	8d 87       	std	Y+13, r24	; 0x0d
 284:	8d 85       	ldd	r24, Y+13	; 0x0d
 286:	9e 85       	ldd	r25, Y+14	; 0x0e
 288:	9a 8b       	std	Y+18, r25	; 0x12
 28a:	89 8b       	std	Y+17, r24	; 0x11
 28c:	89 89       	ldd	r24, Y+17	; 0x11
 28e:	9a 89       	ldd	r25, Y+18	; 0x12
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x1f2>
 294:	9a 8b       	std	Y+18, r25	; 0x12
 296:	89 8b       	std	Y+17, r24	; 0x11
 298:	15 cf       	rjmp	.-470    	; 0xc4 <main+0x26>

0000029a <__cmpsf2>:
		_delay_ms(1000);
    }
 29a:	2f d0       	rcall	.+94     	; 0x2fa <__fp_cmp>
 29c:	08 f4       	brcc	.+2      	; 0x2a0 <__cmpsf2+0x6>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	08 95       	ret

000002a2 <__fixunssfsi>:
 2a2:	57 d0       	rcall	.+174    	; 0x352 <__fp_splitA>
 2a4:	88 f0       	brcs	.+34     	; 0x2c8 <__fixunssfsi+0x26>
 2a6:	9f 57       	subi	r25, 0x7F	; 127
 2a8:	90 f0       	brcs	.+36     	; 0x2ce <__fixunssfsi+0x2c>
 2aa:	b9 2f       	mov	r27, r25
 2ac:	99 27       	eor	r25, r25
 2ae:	b7 51       	subi	r27, 0x17	; 23
 2b0:	a0 f0       	brcs	.+40     	; 0x2da <__fixunssfsi+0x38>
 2b2:	d1 f0       	breq	.+52     	; 0x2e8 <__fixunssfsi+0x46>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	1a f0       	brmi	.+6      	; 0x2c4 <__fixunssfsi+0x22>
 2be:	ba 95       	dec	r27
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__fixunssfsi+0x12>
 2c2:	12 c0       	rjmp	.+36     	; 0x2e8 <__fixunssfsi+0x46>
 2c4:	b1 30       	cpi	r27, 0x01	; 1
 2c6:	81 f0       	breq	.+32     	; 0x2e8 <__fixunssfsi+0x46>
 2c8:	5e d0       	rcall	.+188    	; 0x386 <__fp_zero>
 2ca:	b1 e0       	ldi	r27, 0x01	; 1
 2cc:	08 95       	ret
 2ce:	5b c0       	rjmp	.+182    	; 0x386 <__fp_zero>
 2d0:	67 2f       	mov	r22, r23
 2d2:	78 2f       	mov	r23, r24
 2d4:	88 27       	eor	r24, r24
 2d6:	b8 5f       	subi	r27, 0xF8	; 248
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <__fixunssfsi+0x46>
 2da:	b9 3f       	cpi	r27, 0xF9	; 249
 2dc:	cc f3       	brlt	.-14     	; 0x2d0 <__fixunssfsi+0x2e>
 2de:	86 95       	lsr	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b3 95       	inc	r27
 2e6:	d9 f7       	brne	.-10     	; 0x2de <__fixunssfsi+0x3c>
 2e8:	3e f4       	brtc	.+14     	; 0x2f8 <__fixunssfsi+0x56>
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__fp_cmp>:
 2fa:	99 0f       	add	r25, r25
 2fc:	00 08       	sbc	r0, r0
 2fe:	55 0f       	add	r21, r21
 300:	aa 0b       	sbc	r26, r26
 302:	e0 e8       	ldi	r30, 0x80	; 128
 304:	fe ef       	ldi	r31, 0xFE	; 254
 306:	16 16       	cp	r1, r22
 308:	17 06       	cpc	r1, r23
 30a:	e8 07       	cpc	r30, r24
 30c:	f9 07       	cpc	r31, r25
 30e:	c0 f0       	brcs	.+48     	; 0x340 <__fp_cmp+0x46>
 310:	12 16       	cp	r1, r18
 312:	13 06       	cpc	r1, r19
 314:	e4 07       	cpc	r30, r20
 316:	f5 07       	cpc	r31, r21
 318:	98 f0       	brcs	.+38     	; 0x340 <__fp_cmp+0x46>
 31a:	62 1b       	sub	r22, r18
 31c:	73 0b       	sbc	r23, r19
 31e:	84 0b       	sbc	r24, r20
 320:	95 0b       	sbc	r25, r21
 322:	39 f4       	brne	.+14     	; 0x332 <__fp_cmp+0x38>
 324:	0a 26       	eor	r0, r26
 326:	61 f0       	breq	.+24     	; 0x340 <__fp_cmp+0x46>
 328:	23 2b       	or	r18, r19
 32a:	24 2b       	or	r18, r20
 32c:	25 2b       	or	r18, r21
 32e:	21 f4       	brne	.+8      	; 0x338 <__fp_cmp+0x3e>
 330:	08 95       	ret
 332:	0a 26       	eor	r0, r26
 334:	09 f4       	brne	.+2      	; 0x338 <__fp_cmp+0x3e>
 336:	a1 40       	sbci	r26, 0x01	; 1
 338:	a6 95       	lsr	r26
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	81 1d       	adc	r24, r1
 33e:	81 1d       	adc	r24, r1
 340:	08 95       	ret

00000342 <__fp_split3>:
 342:	57 fd       	sbrc	r21, 7
 344:	90 58       	subi	r25, 0x80	; 128
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	59 f0       	breq	.+22     	; 0x362 <__fp_splitA+0x10>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	71 f0       	breq	.+28     	; 0x36c <__fp_splitA+0x1a>
 350:	47 95       	ror	r20

00000352 <__fp_splitA>:
 352:	88 0f       	add	r24, r24
 354:	97 fb       	bst	r25, 7
 356:	99 1f       	adc	r25, r25
 358:	61 f0       	breq	.+24     	; 0x372 <__fp_splitA+0x20>
 35a:	9f 3f       	cpi	r25, 0xFF	; 255
 35c:	79 f0       	breq	.+30     	; 0x37c <__fp_splitA+0x2a>
 35e:	87 95       	ror	r24
 360:	08 95       	ret
 362:	12 16       	cp	r1, r18
 364:	13 06       	cpc	r1, r19
 366:	14 06       	cpc	r1, r20
 368:	55 1f       	adc	r21, r21
 36a:	f2 cf       	rjmp	.-28     	; 0x350 <__fp_split3+0xe>
 36c:	46 95       	lsr	r20
 36e:	f1 df       	rcall	.-30     	; 0x352 <__fp_splitA>
 370:	08 c0       	rjmp	.+16     	; 0x382 <__fp_splitA+0x30>
 372:	16 16       	cp	r1, r22
 374:	17 06       	cpc	r1, r23
 376:	18 06       	cpc	r1, r24
 378:	99 1f       	adc	r25, r25
 37a:	f1 cf       	rjmp	.-30     	; 0x35e <__fp_splitA+0xc>
 37c:	86 95       	lsr	r24
 37e:	71 05       	cpc	r23, r1
 380:	61 05       	cpc	r22, r1
 382:	08 94       	sec
 384:	08 95       	ret

00000386 <__fp_zero>:
 386:	e8 94       	clt

00000388 <__fp_szero>:
 388:	bb 27       	eor	r27, r27
 38a:	66 27       	eor	r22, r22
 38c:	77 27       	eor	r23, r23
 38e:	cb 01       	movw	r24, r22
 390:	97 f9       	bld	r25, 7
 392:	08 95       	ret

00000394 <__gesf2>:
 394:	b2 df       	rcall	.-156    	; 0x2fa <__fp_cmp>
 396:	08 f4       	brcc	.+2      	; 0x39a <__gesf2+0x6>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__mulsf3>:
 39c:	0b d0       	rcall	.+22     	; 0x3b4 <__mulsf3x>
 39e:	78 c0       	rjmp	.+240    	; 0x490 <__fp_round>
 3a0:	69 d0       	rcall	.+210    	; 0x474 <__fp_pscA>
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <__mulsf3+0x12>
 3a4:	6e d0       	rcall	.+220    	; 0x482 <__fp_pscB>
 3a6:	18 f0       	brcs	.+6      	; 0x3ae <__mulsf3+0x12>
 3a8:	95 23       	and	r25, r21
 3aa:	09 f0       	breq	.+2      	; 0x3ae <__mulsf3+0x12>
 3ac:	5a c0       	rjmp	.+180    	; 0x462 <__fp_inf>
 3ae:	5f c0       	rjmp	.+190    	; 0x46e <__fp_nan>
 3b0:	11 24       	eor	r1, r1
 3b2:	ea cf       	rjmp	.-44     	; 0x388 <__fp_szero>

000003b4 <__mulsf3x>:
 3b4:	c6 df       	rcall	.-116    	; 0x342 <__fp_split3>
 3b6:	a0 f3       	brcs	.-24     	; 0x3a0 <__mulsf3+0x4>

000003b8 <__mulsf3_pse>:
 3b8:	95 9f       	mul	r25, r21
 3ba:	d1 f3       	breq	.-12     	; 0x3b0 <__mulsf3+0x14>
 3bc:	95 0f       	add	r25, r21
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	55 1f       	adc	r21, r21
 3c2:	62 9f       	mul	r22, r18
 3c4:	f0 01       	movw	r30, r0
 3c6:	72 9f       	mul	r23, r18
 3c8:	bb 27       	eor	r27, r27
 3ca:	f0 0d       	add	r31, r0
 3cc:	b1 1d       	adc	r27, r1
 3ce:	63 9f       	mul	r22, r19
 3d0:	aa 27       	eor	r26, r26
 3d2:	f0 0d       	add	r31, r0
 3d4:	b1 1d       	adc	r27, r1
 3d6:	aa 1f       	adc	r26, r26
 3d8:	64 9f       	mul	r22, r20
 3da:	66 27       	eor	r22, r22
 3dc:	b0 0d       	add	r27, r0
 3de:	a1 1d       	adc	r26, r1
 3e0:	66 1f       	adc	r22, r22
 3e2:	82 9f       	mul	r24, r18
 3e4:	22 27       	eor	r18, r18
 3e6:	b0 0d       	add	r27, r0
 3e8:	a1 1d       	adc	r26, r1
 3ea:	62 1f       	adc	r22, r18
 3ec:	73 9f       	mul	r23, r19
 3ee:	b0 0d       	add	r27, r0
 3f0:	a1 1d       	adc	r26, r1
 3f2:	62 1f       	adc	r22, r18
 3f4:	83 9f       	mul	r24, r19
 3f6:	a0 0d       	add	r26, r0
 3f8:	61 1d       	adc	r22, r1
 3fa:	22 1f       	adc	r18, r18
 3fc:	74 9f       	mul	r23, r20
 3fe:	33 27       	eor	r19, r19
 400:	a0 0d       	add	r26, r0
 402:	61 1d       	adc	r22, r1
 404:	23 1f       	adc	r18, r19
 406:	84 9f       	mul	r24, r20
 408:	60 0d       	add	r22, r0
 40a:	21 1d       	adc	r18, r1
 40c:	82 2f       	mov	r24, r18
 40e:	76 2f       	mov	r23, r22
 410:	6a 2f       	mov	r22, r26
 412:	11 24       	eor	r1, r1
 414:	9f 57       	subi	r25, 0x7F	; 127
 416:	50 40       	sbci	r21, 0x00	; 0
 418:	8a f0       	brmi	.+34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41a:	e1 f0       	breq	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 41c:	88 23       	and	r24, r24
 41e:	4a f0       	brmi	.+18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	bb 1f       	adc	r27, r27
 426:	66 1f       	adc	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	88 1f       	adc	r24, r24
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	50 40       	sbci	r21, 0x00	; 0
 430:	a9 f7       	brne	.-22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 432:	9e 3f       	cpi	r25, 0xFE	; 254
 434:	51 05       	cpc	r21, r1
 436:	70 f0       	brcs	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 438:	14 c0       	rjmp	.+40     	; 0x462 <__fp_inf>
 43a:	a6 cf       	rjmp	.-180    	; 0x388 <__fp_szero>
 43c:	5f 3f       	cpi	r21, 0xFF	; 255
 43e:	ec f3       	brlt	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 440:	98 3e       	cpi	r25, 0xE8	; 232
 442:	dc f3       	brlt	.-10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 444:	86 95       	lsr	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b7 95       	ror	r27
 44c:	f7 95       	ror	r31
 44e:	e7 95       	ror	r30
 450:	9f 5f       	subi	r25, 0xFF	; 255
 452:	c1 f7       	brne	.-16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 454:	fe 2b       	or	r31, r30
 456:	88 0f       	add	r24, r24
 458:	91 1d       	adc	r25, r1
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret

00000462 <__fp_inf>:
 462:	97 f9       	bld	r25, 7
 464:	9f 67       	ori	r25, 0x7F	; 127
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	08 95       	ret

0000046e <__fp_nan>:
 46e:	9f ef       	ldi	r25, 0xFF	; 255
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	08 95       	ret

00000474 <__fp_pscA>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	16 16       	cp	r1, r22
 47a:	17 06       	cpc	r1, r23
 47c:	18 06       	cpc	r1, r24
 47e:	09 06       	cpc	r0, r25
 480:	08 95       	ret

00000482 <__fp_pscB>:
 482:	00 24       	eor	r0, r0
 484:	0a 94       	dec	r0
 486:	12 16       	cp	r1, r18
 488:	13 06       	cpc	r1, r19
 48a:	14 06       	cpc	r1, r20
 48c:	05 06       	cpc	r0, r21
 48e:	08 95       	ret

00000490 <__fp_round>:
 490:	09 2e       	mov	r0, r25
 492:	03 94       	inc	r0
 494:	00 0c       	add	r0, r0
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0xc>
 498:	88 23       	and	r24, r24
 49a:	52 f0       	brmi	.+20     	; 0x4b0 <__fp_round+0x20>
 49c:	bb 0f       	add	r27, r27
 49e:	40 f4       	brcc	.+16     	; 0x4b0 <__fp_round+0x20>
 4a0:	bf 2b       	or	r27, r31
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__fp_round+0x18>
 4a4:	60 ff       	sbrs	r22, 0
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__fp_round+0x20>
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
