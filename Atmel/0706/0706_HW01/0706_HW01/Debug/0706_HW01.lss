
0706_HW01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000f48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000caf  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ce  00000000  00000000  00001ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000355  00000000  00000000  00003173  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	98 c4       	rjmp	.+2352   	; 0x95e <__vector_11>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c4       	rjmp	.+2074   	; 0x864 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	12 c7       	rjmp	.+3620   	; 0xed0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
unsigned char angleStatus = 0;

long mapping(long x, long in_min, long in_max, long out_min, long out_max);

int main(void)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	c5 55       	subi	r28, 0x55	; 85
  bc:	d1 09       	sbc	r29, r1
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	TCCR1A = 0x00;
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	// COM1A1 COM1A0 COM1B1 COM1B0 COM1C1 COM1C0 WGM11 WGM10
	// nomal 모드	
	TCCR1B = 0x02;
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	// ICNC1 ICES1 WGM13 WGM12 CS12 CS11 CS10
	// ICES3: Input Capture Edge Select
	// 0 이면 하강엣지, 1이면 상승엣지
	// 분주율 64	
	TCCR1C = 0x00;
  da:	8a e7       	ldi	r24, 0x7A	; 122
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
	// FOC1A FOC1B FOC1C
	// OC1 출력 X
	// Input으로 받아 Input Cature형태로 진행해야 하니까
	TIMSK = 0x21;
  e2:	87 e5       	ldi	r24, 0x57	; 87
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 e2       	ldi	r18, 0x21	; 33
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	TCNT1 = 100;
  ec:	8c e4       	ldi	r24, 0x4C	; 76
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e6       	ldi	r18, 0x64	; 100
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	31 83       	std	Z+1, r19	; 0x01
  f8:	20 83       	st	Z, r18
	// TOP설정
	
	DDRD |= 0x08;
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 e3       	ldi	r18, 0x31	; 49
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	28 60       	ori	r18, 0x08	; 8
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	// PD4가 ICP1 이므로 echo의 값을 받으니 Input 설정
	// PD3은 Trigger 역할을 할것이므로 Output 설정
	
	TCCR3A = 0x82;
 10c:	8b e8       	ldi	r24, 0x8B	; 139
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	22 e8       	ldi	r18, 0x82	; 130
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	// COMA1 COMA0 : 1 0 -> ICR1을 만나면 Clear
	// WGM11 WGM10 : 1 0 -> 14번모드 1 1 1 0 을 위함
	TCCR3B = 0x1A;
 116:	8a e8       	ldi	r24, 0x8A	; 138
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	2a e1       	ldi	r18, 0x1A	; 26
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	// WGM13 WGM12 : 1 1 -> 14번모드 1 1 1 0 을 위함
	// CS12 CS11 CS10 : 분주율 8 -> 0 1 0 을 위함
	TCCR3C = 0x00;
 120:	8c e8       	ldi	r24, 0x8C	; 140
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	10 82       	st	Z, r1
	// PWM모드에서는 출력할 것이 없다.
	ICR3 = 40000;
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	20 e4       	ldi	r18, 0x40	; 64
 12e:	3c e9       	ldi	r19, 0x9C	; 156
 130:	fc 01       	movw	r30, r24
 132:	31 83       	std	Z+1, r19	; 0x01
 134:	20 83       	st	Z, r18
	// TOP 설정
	// 분주 = 1/16 * 8 * 40000 = 20000nanoSec = 20ms
	// Duty Cycle 설정
	DDRE = 0x0F;
 136:	82 e2       	ldi	r24, 0x22	; 34
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2f e0       	ldi	r18, 0x0F	; 15
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	
	UCSR0A = 0x0;
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	10 82       	st	Z, r1
	UCSR0B = 0x98; // RXCIE1 = 1,수신완료 인터럽트 인에이블 , 송수신 인에이블= 1
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	28 e9       	ldi	r18, 0x98	; 152
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	UCSR0C = 0x06; // 비동 기, 데이터 8비트 모드
 152:	85 e9       	ldi	r24, 0x95	; 149
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	26 e0       	ldi	r18, 0x06	; 6
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	UBRR0H = 0;
 15c:	80 e9       	ldi	r24, 0x90	; 144
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
	UBRR0L = 103; //16MHz , BAUD 9600
 164:	89 e2       	ldi	r24, 0x29	; 41
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	27 e6       	ldi	r18, 0x67	; 103
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	
	sei();
 16e:	78 94       	sei
    /* Replace with your application code */
	
    while (1) 
    {		
		if(captFlag == 0){
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	88 23       	and	r24, r24
 176:	09 f0       	breq	.+2      	; 0x17a <main+0xcc>
 178:	3e c2       	rjmp	.+1148   	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			TCCR1B = 0x42;
 17a:	8e e4       	ldi	r24, 0x4E	; 78
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	22 e4       	ldi	r18, 0x42	; 66
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
			// Input Capture 상승엣지 Set
			PORTD = 0x00;
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	10 82       	st	Z, r1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	a0 e8       	ldi	r26, 0x80	; 128
 192:	bf e3       	ldi	r27, 0x3F	; 63
 194:	8d 83       	std	Y+5, r24	; 0x05
 196:	9e 83       	std	Y+6, r25	; 0x06
 198:	af 83       	std	Y+7, r26	; 0x07
 19a:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 19c:	2b ea       	ldi	r18, 0xAB	; 171
 19e:	3a ea       	ldi	r19, 0xAA	; 170
 1a0:	4a ea       	ldi	r20, 0xAA	; 170
 1a2:	50 e4       	ldi	r21, 0x40	; 64
 1a4:	6d 81       	ldd	r22, Y+5	; 0x05
 1a6:	7e 81       	ldd	r23, Y+6	; 0x06
 1a8:	8f 81       	ldd	r24, Y+7	; 0x07
 1aa:	98 85       	ldd	r25, Y+8	; 0x08
 1ac:	c8 d5       	rcall	.+2960   	; 0xd3e <__mulsf3>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	88 ab       	std	Y+48, r24	; 0x30
 1b4:	99 ab       	std	Y+49, r25	; 0x31
 1b6:	aa ab       	std	Y+50, r26	; 0x32
 1b8:	bb ab       	std	Y+51, r27	; 0x33
	__tmp2 = ((F_CPU) / 4e6) * __us;
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e8       	ldi	r20, 0x80	; 128
 1c0:	50 e4       	ldi	r21, 0x40	; 64
 1c2:	6d 81       	ldd	r22, Y+5	; 0x05
 1c4:	7e 81       	ldd	r23, Y+6	; 0x06
 1c6:	8f 81       	ldd	r24, Y+7	; 0x07
 1c8:	98 85       	ldd	r25, Y+8	; 0x08
 1ca:	b9 d5       	rcall	.+2930   	; 0xd3e <__mulsf3>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	8c ab       	std	Y+52, r24	; 0x34
 1d2:	9d ab       	std	Y+53, r25	; 0x35
 1d4:	ae ab       	std	Y+54, r26	; 0x36
 1d6:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e8       	ldi	r20, 0x80	; 128
 1de:	5f e3       	ldi	r21, 0x3F	; 63
 1e0:	68 a9       	ldd	r22, Y+48	; 0x30
 1e2:	79 a9       	ldd	r23, Y+49	; 0x31
 1e4:	8a a9       	ldd	r24, Y+50	; 0x32
 1e6:	9b a9       	ldd	r25, Y+51	; 0x33
 1e8:	99 d4       	rcall	.+2354   	; 0xb1c <__cmpsf2>
 1ea:	88 23       	and	r24, r24
 1ec:	1c f4       	brge	.+6      	; 0x1f4 <main+0x146>
		__ticks = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	88 af       	std	Y+56, r24	; 0x38
 1f2:	fe c0       	rjmp	.+508    	; 0x3f0 <main+0x342>
	else if (__tmp2 > 65535)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	3f ef       	ldi	r19, 0xFF	; 255
 1f8:	4f e7       	ldi	r20, 0x7F	; 127
 1fa:	57 e4       	ldi	r21, 0x47	; 71
 1fc:	6c a9       	ldd	r22, Y+52	; 0x34
 1fe:	7d a9       	ldd	r23, Y+53	; 0x35
 200:	8e a9       	ldd	r24, Y+54	; 0x36
 202:	9f a9       	ldd	r25, Y+55	; 0x37
 204:	98 d5       	rcall	.+2864   	; 0xd36 <__gesf2>
 206:	18 16       	cp	r1, r24
 208:	0c f0       	brlt	.+2      	; 0x20c <main+0x15e>
 20a:	b7 c0       	rjmp	.+366    	; 0x37a <main+0x2cc>
	{
		_delay_ms(__us / 1000.0);
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	4a e7       	ldi	r20, 0x7A	; 122
 212:	54 e4       	ldi	r21, 0x44	; 68
 214:	6d 81       	ldd	r22, Y+5	; 0x05
 216:	7e 81       	ldd	r23, Y+6	; 0x06
 218:	8f 81       	ldd	r24, Y+7	; 0x07
 21a:	98 85       	ldd	r25, Y+8	; 0x08
 21c:	83 d4       	rcall	.+2310   	; 0xb24 <__divsf3>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	89 af       	std	Y+57, r24	; 0x39
 224:	9a af       	std	Y+58, r25	; 0x3a
 226:	ab af       	std	Y+59, r26	; 0x3b
 228:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	4a e7       	ldi	r20, 0x7A	; 122
 230:	55 e4       	ldi	r21, 0x45	; 69
 232:	69 ad       	ldd	r22, Y+57	; 0x39
 234:	7a ad       	ldd	r23, Y+58	; 0x3a
 236:	8b ad       	ldd	r24, Y+59	; 0x3b
 238:	9c ad       	ldd	r25, Y+60	; 0x3c
 23a:	81 d5       	rcall	.+2818   	; 0xd3e <__mulsf3>
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	9e 01       	movw	r18, r28
 242:	23 5c       	subi	r18, 0xC3	; 195
 244:	3f 4f       	sbci	r19, 0xFF	; 255
 246:	f9 01       	movw	r30, r18
 248:	80 83       	st	Z, r24
 24a:	91 83       	std	Z+1, r25	; 0x01
 24c:	a2 83       	std	Z+2, r26	; 0x02
 24e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e8       	ldi	r20, 0x80	; 128
 256:	5f e3       	ldi	r21, 0x3F	; 63
 258:	ce 01       	movw	r24, r28
 25a:	cd 96       	adiw	r24, 0x3d	; 61
 25c:	fc 01       	movw	r30, r24
 25e:	60 81       	ld	r22, Z
 260:	71 81       	ldd	r23, Z+1	; 0x01
 262:	82 81       	ldd	r24, Z+2	; 0x02
 264:	93 81       	ldd	r25, Z+3	; 0x03
 266:	5a d4       	rcall	.+2228   	; 0xb1c <__cmpsf2>
 268:	88 23       	and	r24, r24
 26a:	4c f4       	brge	.+18     	; 0x27e <main+0x1d0>
		__ticks = 1;
 26c:	ce 01       	movw	r24, r28
 26e:	8f 5b       	subi	r24, 0xBF	; 191
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	31 83       	std	Z+1, r19	; 0x01
 27a:	20 83       	st	Z, r18
 27c:	63 c0       	rjmp	.+198    	; 0x344 <main+0x296>
	else if (__tmp > 65535)
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	4f e7       	ldi	r20, 0x7F	; 127
 284:	57 e4       	ldi	r21, 0x47	; 71
 286:	ce 01       	movw	r24, r28
 288:	cd 96       	adiw	r24, 0x3d	; 61
 28a:	fc 01       	movw	r30, r24
 28c:	60 81       	ld	r22, Z
 28e:	71 81       	ldd	r23, Z+1	; 0x01
 290:	82 81       	ldd	r24, Z+2	; 0x02
 292:	93 81       	ldd	r25, Z+3	; 0x03
 294:	50 d5       	rcall	.+2720   	; 0xd36 <__gesf2>
 296:	18 16       	cp	r1, r24
 298:	0c f0       	brlt	.+2      	; 0x29c <main+0x1ee>
 29a:	44 c0       	rjmp	.+136    	; 0x324 <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e2       	ldi	r20, 0x20	; 32
 2a2:	51 e4       	ldi	r21, 0x41	; 65
 2a4:	69 ad       	ldd	r22, Y+57	; 0x39
 2a6:	7a ad       	ldd	r23, Y+58	; 0x3a
 2a8:	8b ad       	ldd	r24, Y+59	; 0x3b
 2aa:	9c ad       	ldd	r25, Y+60	; 0x3c
 2ac:	48 d5       	rcall	.+2704   	; 0xd3e <__mulsf3>
 2ae:	dc 01       	movw	r26, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	8e 01       	movw	r16, r28
 2b4:	0f 5b       	subi	r16, 0xBF	; 191
 2b6:	1f 4f       	sbci	r17, 0xFF	; 255
 2b8:	bc 01       	movw	r22, r24
 2ba:	cd 01       	movw	r24, r26
 2bc:	9b d4       	rcall	.+2358   	; 0xbf4 <__fixunssfsi>
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	f8 01       	movw	r30, r16
 2c4:	91 83       	std	Z+1, r25	; 0x01
 2c6:	80 83       	st	Z, r24
 2c8:	24 c0       	rjmp	.+72     	; 0x312 <main+0x264>
 2ca:	ce 01       	movw	r24, r28
 2cc:	8d 5b       	subi	r24, 0xBD	; 189
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	20 e9       	ldi	r18, 0x90	; 144
 2d2:	31 e0       	ldi	r19, 0x01	; 1
 2d4:	fc 01       	movw	r30, r24
 2d6:	31 83       	std	Z+1, r19	; 0x01
 2d8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2da:	ce 01       	movw	r24, r28
 2dc:	8d 5b       	subi	r24, 0xBD	; 189
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	fc 01       	movw	r30, r24
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x238>
 2ea:	9e 01       	movw	r18, r28
 2ec:	2d 5b       	subi	r18, 0xBD	; 189
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	f9 01       	movw	r30, r18
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	ce 01       	movw	r24, r28
 2f8:	8f 5b       	subi	r24, 0xBF	; 191
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	9e 01       	movw	r18, r28
 2fe:	2f 5b       	subi	r18, 0xBF	; 191
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	31 81       	ldd	r19, Z+1	; 0x01
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	31 09       	sbc	r19, r1
 30c:	fc 01       	movw	r30, r24
 30e:	31 83       	std	Z+1, r19	; 0x01
 310:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 312:	ce 01       	movw	r24, r28
 314:	8f 5b       	subi	r24, 0xBF	; 191
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	91 81       	ldd	r25, Z+1	; 0x01
 31e:	89 2b       	or	r24, r25
 320:	a1 f6       	brne	.-88     	; 0x2ca <main+0x21c>
 322:	66 c0       	rjmp	.+204    	; 0x3f0 <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 324:	8e 01       	movw	r16, r28
 326:	0f 5b       	subi	r16, 0xBF	; 191
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	ce 01       	movw	r24, r28
 32c:	cd 96       	adiw	r24, 0x3d	; 61
 32e:	fc 01       	movw	r30, r24
 330:	60 81       	ld	r22, Z
 332:	71 81       	ldd	r23, Z+1	; 0x01
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	93 81       	ldd	r25, Z+3	; 0x03
 338:	5d d4       	rcall	.+2234   	; 0xbf4 <__fixunssfsi>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	f8 01       	movw	r30, r16
 340:	91 83       	std	Z+1, r25	; 0x01
 342:	80 83       	st	Z, r24
 344:	ce 01       	movw	r24, r28
 346:	8b 5b       	subi	r24, 0xBB	; 187
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	9e 01       	movw	r18, r28
 34c:	2f 5b       	subi	r18, 0xBF	; 191
 34e:	3f 4f       	sbci	r19, 0xFF	; 255
 350:	f9 01       	movw	r30, r18
 352:	20 81       	ld	r18, Z
 354:	31 81       	ldd	r19, Z+1	; 0x01
 356:	fc 01       	movw	r30, r24
 358:	31 83       	std	Z+1, r19	; 0x01
 35a:	20 83       	st	Z, r18
 35c:	ce 01       	movw	r24, r28
 35e:	8b 5b       	subi	r24, 0xBB	; 187
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x2ba>
 36c:	9e 01       	movw	r18, r28
 36e:	2b 5b       	subi	r18, 0xBB	; 187
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	f9 01       	movw	r30, r18
 374:	91 83       	std	Z+1, r25	; 0x01
 376:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 378:	3b c0       	rjmp	.+118    	; 0x3f0 <main+0x342>
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	4f e7       	ldi	r20, 0x7F	; 127
 380:	53 e4       	ldi	r21, 0x43	; 67
 382:	68 a9       	ldd	r22, Y+48	; 0x30
 384:	79 a9       	ldd	r23, Y+49	; 0x31
 386:	8a a9       	ldd	r24, Y+50	; 0x32
 388:	9b a9       	ldd	r25, Y+51	; 0x33
 38a:	d5 d4       	rcall	.+2474   	; 0xd36 <__gesf2>
 38c:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 38e:	44 f5       	brge	.+80     	; 0x3e0 <main+0x332>
 390:	8e 01       	movw	r16, r28
 392:	09 5b       	subi	r16, 0xB9	; 185
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	6c a9       	ldd	r22, Y+52	; 0x34
 398:	7d a9       	ldd	r23, Y+53	; 0x35
 39a:	8e a9       	ldd	r24, Y+54	; 0x36
 39c:	9f a9       	ldd	r25, Y+55	; 0x37
 39e:	2a d4       	rcall	.+2132   	; 0xbf4 <__fixunssfsi>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	f8 01       	movw	r30, r16
 3a6:	91 83       	std	Z+1, r25	; 0x01
 3a8:	80 83       	st	Z, r24
 3aa:	ce 01       	movw	r24, r28
 3ac:	87 5b       	subi	r24, 0xB7	; 183
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	9e 01       	movw	r18, r28
 3b2:	29 5b       	subi	r18, 0xB9	; 185
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	f9 01       	movw	r30, r18
 3b8:	20 81       	ld	r18, Z
 3ba:	31 81       	ldd	r19, Z+1	; 0x01
 3bc:	fc 01       	movw	r30, r24
 3be:	31 83       	std	Z+1, r19	; 0x01
 3c0:	20 83       	st	Z, r18
 3c2:	ce 01       	movw	r24, r28
 3c4:	87 5b       	subi	r24, 0xB7	; 183
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	91 81       	ldd	r25, Z+1	; 0x01
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x320>
 3d2:	9e 01       	movw	r18, r28
 3d4:	27 5b       	subi	r18, 0xB7	; 183
 3d6:	3f 4f       	sbci	r19, 0xFF	; 255
 3d8:	f9 01       	movw	r30, r18
 3da:	91 83       	std	Z+1, r25	; 0x01
 3dc:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 3de:	1b c0       	rjmp	.+54     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e0:	68 a9       	ldd	r22, Y+48	; 0x30
 3e2:	79 a9       	ldd	r23, Y+49	; 0x31
 3e4:	8a a9       	ldd	r24, Y+50	; 0x32
 3e6:	9b a9       	ldd	r25, Y+51	; 0x33
 3e8:	05 d4       	rcall	.+2058   	; 0xbf4 <__fixunssfsi>
 3ea:	dc 01       	movw	r26, r24
 3ec:	cb 01       	movw	r24, r22
 3ee:	88 af       	std	Y+56, r24	; 0x38
 3f0:	ce 01       	movw	r24, r28
 3f2:	85 5b       	subi	r24, 0xB5	; 181
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	28 ad       	ldd	r18, Y+56	; 0x38
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3fc:	ce 01       	movw	r24, r28
 3fe:	85 5b       	subi	r24, 0xB5	; 181
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	fc 01       	movw	r30, r24
 404:	80 81       	ld	r24, Z
 406:	28 2f       	mov	r18, r24
 408:	2a 95       	dec	r18
 40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40c:	ce 01       	movw	r24, r28
 40e:	85 5b       	subi	r24, 0xB5	; 181
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
			_delay_us(1);
			PORTD = 0x08;
 416:	82 e3       	ldi	r24, 0x32	; 50
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	28 e0       	ldi	r18, 0x08	; 8
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	a0 e3       	ldi	r26, 0x30	; 48
 426:	b1 e4       	ldi	r27, 0x41	; 65
 428:	88 8b       	std	Y+16, r24	; 0x10
 42a:	99 8b       	std	Y+17, r25	; 0x11
 42c:	aa 8b       	std	Y+18, r26	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 42e:	bb 8b       	std	Y+19, r27	; 0x13
 430:	2b ea       	ldi	r18, 0xAB	; 171
 432:	3a ea       	ldi	r19, 0xAA	; 170
 434:	4a ea       	ldi	r20, 0xAA	; 170
 436:	50 e4       	ldi	r21, 0x40	; 64
 438:	68 89       	ldd	r22, Y+16	; 0x10
 43a:	79 89       	ldd	r23, Y+17	; 0x11
 43c:	8a 89       	ldd	r24, Y+18	; 0x12
 43e:	9b 89       	ldd	r25, Y+19	; 0x13
 440:	7e d4       	rcall	.+2300   	; 0xd3e <__mulsf3>
 442:	dc 01       	movw	r26, r24
 444:	cb 01       	movw	r24, r22
 446:	8c 8b       	std	Y+20, r24	; 0x14
 448:	9d 8b       	std	Y+21, r25	; 0x15
 44a:	ae 8b       	std	Y+22, r26	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
 44c:	bf 8b       	std	Y+23, r27	; 0x17
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	50 e4       	ldi	r21, 0x40	; 64
 456:	68 89       	ldd	r22, Y+16	; 0x10
 458:	79 89       	ldd	r23, Y+17	; 0x11
 45a:	8a 89       	ldd	r24, Y+18	; 0x12
 45c:	9b 89       	ldd	r25, Y+19	; 0x13
 45e:	6f d4       	rcall	.+2270   	; 0xd3e <__mulsf3>
 460:	dc 01       	movw	r26, r24
 462:	cb 01       	movw	r24, r22
 464:	88 8f       	std	Y+24, r24	; 0x18
 466:	99 8f       	std	Y+25, r25	; 0x19
 468:	aa 8f       	std	Y+26, r26	; 0x1a
	if (__tmp < 1.0)
 46a:	bb 8f       	std	Y+27, r27	; 0x1b
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e8       	ldi	r20, 0x80	; 128
 472:	5f e3       	ldi	r21, 0x3F	; 63
 474:	6c 89       	ldd	r22, Y+20	; 0x14
 476:	7d 89       	ldd	r23, Y+21	; 0x15
 478:	8e 89       	ldd	r24, Y+22	; 0x16
 47a:	9f 89       	ldd	r25, Y+23	; 0x17
 47c:	4f d3       	rcall	.+1694   	; 0xb1c <__cmpsf2>
 47e:	88 23       	and	r24, r24
		__ticks = 1;
 480:	1c f4       	brge	.+6      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	8c 8f       	std	Y+28, r24	; 0x1c
	else if (__tmp2 > 65535)
 486:	a7 c0       	rjmp	.+334    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	3f ef       	ldi	r19, 0xFF	; 255
 48c:	4f e7       	ldi	r20, 0x7F	; 127
 48e:	57 e4       	ldi	r21, 0x47	; 71
 490:	68 8d       	ldd	r22, Y+24	; 0x18
 492:	79 8d       	ldd	r23, Y+25	; 0x19
 494:	8a 8d       	ldd	r24, Y+26	; 0x1a
 496:	9b 8d       	ldd	r25, Y+27	; 0x1b
 498:	4e d4       	rcall	.+2204   	; 0xd36 <__gesf2>
 49a:	18 16       	cp	r1, r24
 49c:	0c f0       	brlt	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		_delay_ms(__us / 1000.0);
 49e:	74 c0       	rjmp	.+232    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	4a e7       	ldi	r20, 0x7A	; 122
 4a6:	54 e4       	ldi	r21, 0x44	; 68
 4a8:	68 89       	ldd	r22, Y+16	; 0x10
 4aa:	79 89       	ldd	r23, Y+17	; 0x11
 4ac:	8a 89       	ldd	r24, Y+18	; 0x12
 4ae:	9b 89       	ldd	r25, Y+19	; 0x13
 4b0:	39 d3       	rcall	.+1650   	; 0xb24 <__divsf3>
 4b2:	dc 01       	movw	r26, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	8d 8f       	std	Y+29, r24	; 0x1d
 4b8:	9e 8f       	std	Y+30, r25	; 0x1e
 4ba:	af 8f       	std	Y+31, r26	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4bc:	b8 a3       	std	Y+32, r27	; 0x20
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	4a e7       	ldi	r20, 0x7A	; 122
 4c4:	55 e4       	ldi	r21, 0x45	; 69
 4c6:	6d 8d       	ldd	r22, Y+29	; 0x1d
 4c8:	7e 8d       	ldd	r23, Y+30	; 0x1e
 4ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4cc:	98 a1       	ldd	r25, Y+32	; 0x20
 4ce:	37 d4       	rcall	.+2158   	; 0xd3e <__mulsf3>
 4d0:	dc 01       	movw	r26, r24
 4d2:	cb 01       	movw	r24, r22
 4d4:	89 a3       	std	Y+33, r24	; 0x21
 4d6:	9a a3       	std	Y+34, r25	; 0x22
 4d8:	ab a3       	std	Y+35, r26	; 0x23
	if (__tmp < 1.0)
 4da:	bc a3       	std	Y+36, r27	; 0x24
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e8       	ldi	r20, 0x80	; 128
 4e2:	5f e3       	ldi	r21, 0x3F	; 63
 4e4:	69 a1       	ldd	r22, Y+33	; 0x21
 4e6:	7a a1       	ldd	r23, Y+34	; 0x22
 4e8:	8b a1       	ldd	r24, Y+35	; 0x23
 4ea:	9c a1       	ldd	r25, Y+36	; 0x24
 4ec:	17 d3       	rcall	.+1582   	; 0xb1c <__cmpsf2>
 4ee:	88 23       	and	r24, r24
		__ticks = 1;
 4f0:	2c f4       	brge	.+10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	9e a3       	std	Y+38, r25	; 0x26
	else if (__tmp > 65535)
 4f8:	8d a3       	std	Y+37, r24	; 0x25
 4fa:	3b c0       	rjmp	.+118    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	3f ef       	ldi	r19, 0xFF	; 255
 500:	4f e7       	ldi	r20, 0x7F	; 127
 502:	57 e4       	ldi	r21, 0x47	; 71
 504:	69 a1       	ldd	r22, Y+33	; 0x21
 506:	7a a1       	ldd	r23, Y+34	; 0x22
 508:	8b a1       	ldd	r24, Y+35	; 0x23
 50a:	9c a1       	ldd	r25, Y+36	; 0x24
 50c:	14 d4       	rcall	.+2088   	; 0xd36 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 50e:	18 16       	cp	r1, r24
 510:	3c f5       	brge	.+78     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	40 e2       	ldi	r20, 0x20	; 32
 518:	51 e4       	ldi	r21, 0x41	; 65
 51a:	6d 8d       	ldd	r22, Y+29	; 0x1d
 51c:	7e 8d       	ldd	r23, Y+30	; 0x1e
 51e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 520:	98 a1       	ldd	r25, Y+32	; 0x20
 522:	0d d4       	rcall	.+2074   	; 0xd3e <__mulsf3>
 524:	dc 01       	movw	r26, r24
 526:	cb 01       	movw	r24, r22
 528:	bc 01       	movw	r22, r24
 52a:	cd 01       	movw	r24, r26
 52c:	63 d3       	rcall	.+1734   	; 0xbf4 <__fixunssfsi>
 52e:	dc 01       	movw	r26, r24
 530:	cb 01       	movw	r24, r22
 532:	9e a3       	std	Y+38, r25	; 0x26
 534:	8d a3       	std	Y+37, r24	; 0x25
 536:	0f c0       	rjmp	.+30     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 538:	80 e9       	ldi	r24, 0x90	; 144
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	98 a7       	std	Y+40, r25	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 53e:	8f a3       	std	Y+39, r24	; 0x27
 540:	8f a1       	ldd	r24, Y+39	; 0x27
 542:	98 a5       	ldd	r25, Y+40	; 0x28
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 548:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54a:	8f a3       	std	Y+39, r24	; 0x27
 54c:	8d a1       	ldd	r24, Y+37	; 0x25
 54e:	9e a1       	ldd	r25, Y+38	; 0x26
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 554:	8d a3       	std	Y+37, r24	; 0x25
 556:	8d a1       	ldd	r24, Y+37	; 0x25
 558:	9e a1       	ldd	r25, Y+38	; 0x26
 55a:	89 2b       	or	r24, r25
 55c:	69 f7       	brne	.-38     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 55e:	3b c0       	rjmp	.+118    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 560:	69 a1       	ldd	r22, Y+33	; 0x21
 562:	7a a1       	ldd	r23, Y+34	; 0x22
 564:	8b a1       	ldd	r24, Y+35	; 0x23
 566:	9c a1       	ldd	r25, Y+36	; 0x24
 568:	45 d3       	rcall	.+1674   	; 0xbf4 <__fixunssfsi>
 56a:	dc 01       	movw	r26, r24
 56c:	cb 01       	movw	r24, r22
 56e:	9e a3       	std	Y+38, r25	; 0x26
 570:	8d a3       	std	Y+37, r24	; 0x25
 572:	8d a1       	ldd	r24, Y+37	; 0x25
 574:	9e a1       	ldd	r25, Y+38	; 0x26
 576:	9a a7       	std	Y+42, r25	; 0x2a
 578:	89 a7       	std	Y+41, r24	; 0x29
 57a:	89 a5       	ldd	r24, Y+41	; 0x29
 57c:	9a a5       	ldd	r25, Y+42	; 0x2a
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 582:	9a a7       	std	Y+42, r25	; 0x2a
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 584:	89 a7       	std	Y+41, r24	; 0x29
 586:	27 c0       	rjmp	.+78     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	4f e7       	ldi	r20, 0x7F	; 127
 58e:	53 e4       	ldi	r21, 0x43	; 67
 590:	6c 89       	ldd	r22, Y+20	; 0x14
 592:	7d 89       	ldd	r23, Y+21	; 0x15
 594:	8e 89       	ldd	r24, Y+22	; 0x16
 596:	9f 89       	ldd	r25, Y+23	; 0x17
 598:	ce d3       	rcall	.+1948   	; 0xd36 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 59a:	18 16       	cp	r1, r24
 59c:	a4 f4       	brge	.+40     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 59e:	68 8d       	ldd	r22, Y+24	; 0x18
 5a0:	79 8d       	ldd	r23, Y+25	; 0x19
 5a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 5a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 5a6:	26 d3       	rcall	.+1612   	; 0xbf4 <__fixunssfsi>
 5a8:	dc 01       	movw	r26, r24
 5aa:	cb 01       	movw	r24, r22
 5ac:	9c a7       	std	Y+44, r25	; 0x2c
 5ae:	8b a7       	std	Y+43, r24	; 0x2b
 5b0:	8b a5       	ldd	r24, Y+43	; 0x2b
 5b2:	9c a5       	ldd	r25, Y+44	; 0x2c
 5b4:	9e a7       	std	Y+46, r25	; 0x2e
 5b6:	8d a7       	std	Y+45, r24	; 0x2d
 5b8:	8d a5       	ldd	r24, Y+45	; 0x2d
 5ba:	9e a5       	ldd	r25, Y+46	; 0x2e
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5c0:	9e a7       	std	Y+46, r25	; 0x2e
 5c2:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5c6:	6c 89       	ldd	r22, Y+20	; 0x14
 5c8:	7d 89       	ldd	r23, Y+21	; 0x15
 5ca:	8e 89       	ldd	r24, Y+22	; 0x16
 5cc:	9f 89       	ldd	r25, Y+23	; 0x17
 5ce:	12 d3       	rcall	.+1572   	; 0xbf4 <__fixunssfsi>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	8c 8f       	std	Y+28, r24	; 0x1c
 5d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 5d8:	8f a7       	std	Y+47, r24	; 0x2f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5da:	8f a5       	ldd	r24, Y+47	; 0x2f
 5dc:	8a 95       	dec	r24
 5de:	f1 f7       	brne	.-4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5e0:	8f a7       	std	Y+47, r24	; 0x2f
			// Trigger Activate
			_delay_us(11);
			TCNT1 = 0;
 5e2:	8c e4       	ldi	r24, 0x4C	; 76
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	fc 01       	movw	r30, r24
 5e8:	11 82       	std	Z+1, r1	; 0x01
 5ea:	10 82       	st	Z, r1
			PORTD = 0x00;
 5ec:	82 e3       	ldi	r24, 0x32	; 50
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fc 01       	movw	r30, r24
 5f2:	10 82       	st	Z, r1
 5f4:	bd cd       	rjmp	.-1158   	; 0x170 <main+0xc2>
			
		}
		else if(captFlag == 1){
 5f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	91 f4       	brne	.+36     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
			if(ICR1 > 65000){
 5fe:	86 e4       	ldi	r24, 0x46	; 70
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	fc 01       	movw	r30, r24
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	89 3e       	cpi	r24, 0xE9	; 233
 60a:	9d 4f       	sbci	r25, 0xFD	; 253
 60c:	08 f4       	brcc	.+2      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 60e:	b0 cd       	rjmp	.-1184   	; 0x170 <main+0xc2>
				captFlag == 2;
				pastICR = 0;
 610:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 614:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
				currentICR = 0;
 618:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 61c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
			}
		}
		else if(captFlag == 2){
 620:	a7 cd       	rjmp	.-1202   	; 0x170 <main+0xc2>
 622:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	09 f0       	breq	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
			unsigned int disGet = (currentICR - pastICR);
 62a:	a2 cd       	rjmp	.-1212   	; 0x170 <main+0xc2>
 62c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <currentICR>
 630:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <currentICR+0x1>
 634:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pastICR>
 638:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <pastICR+0x1>
 63c:	a9 01       	movw	r20, r18
 63e:	48 1b       	sub	r20, r24
 640:	59 0b       	sbc	r21, r25
 642:	ca 01       	movw	r24, r20
			
			disGet = disGet / 12;
 644:	9a 87       	std	Y+10, r25	; 0x0a
 646:	89 87       	std	Y+9, r24	; 0x09
 648:	89 85       	ldd	r24, Y+9	; 0x09
 64a:	9a 85       	ldd	r25, Y+10	; 0x0a
 64c:	9c 01       	movw	r18, r24
 64e:	ab ea       	ldi	r26, 0xAB	; 171
 650:	ba ea       	ldi	r27, 0xAA	; 170
 652:	03 d4       	rcall	.+2054   	; 0xe5a <__umulhisi3>
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
			
			unsigned int valuecm = (unsigned int)disGet/10;			
 660:	9a 87       	std	Y+10, r25	; 0x0a
 662:	89 87       	std	Y+9, r24	; 0x09
 664:	89 85       	ldd	r24, Y+9	; 0x09
 666:	9a 85       	ldd	r25, Y+10	; 0x0a
 668:	9c 01       	movw	r18, r24
 66a:	ad ec       	ldi	r26, 0xCD	; 205
 66c:	bc ec       	ldi	r27, 0xCC	; 204
 66e:	f5 d3       	rcall	.+2026   	; 0xe5a <__umulhisi3>
 670:	96 95       	lsr	r25
 672:	87 95       	ror	r24
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	9c 87       	std	Y+12, r25	; 0x0c
			unsigned int valuemm = (unsigned int)(disGet%10);
 67e:	8b 87       	std	Y+11, r24	; 0x0b
 680:	49 85       	ldd	r20, Y+9	; 0x09
 682:	5a 85       	ldd	r21, Y+10	; 0x0a
 684:	9a 01       	movw	r18, r20
 686:	ad ec       	ldi	r26, 0xCD	; 205
 688:	bc ec       	ldi	r27, 0xCC	; 204
 68a:	e7 d3       	rcall	.+1998   	; 0xe5a <__umulhisi3>
 68c:	96 95       	lsr	r25
 68e:	87 95       	ror	r24
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	9c 01       	movw	r18, r24
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	82 0f       	add	r24, r18
 6a8:	93 1f       	adc	r25, r19
 6aa:	fa 01       	movw	r30, r20
 6ac:	e8 1b       	sub	r30, r24
			
			unsigned char image = 0;
 6ae:	f9 0b       	sbc	r31, r25
			
			
			UART0_Putch(0xFF);
 6b0:	cf 01       	movw	r24, r30
 6b2:	9e 87       	std	Y+14, r25	; 0x0e
 6b4:	8d 87       	std	Y+13, r24	; 0x0d
			UART0_Putch(valuecm >> 8);
 6b6:	1f 86       	std	Y+15, r1	; 0x0f
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	9f d1       	rcall	.+830    	; 0x9fc <UART0_Putch>
 6be:	8b 85       	ldd	r24, Y+11	; 0x0b
 6c0:	9c 85       	ldd	r25, Y+12	; 0x0c
			UART0_Putch(valuecm & 0xFF);
 6c2:	89 2f       	mov	r24, r25
 6c4:	99 27       	eor	r25, r25
 6c6:	9a d1       	rcall	.+820    	; 0x9fc <UART0_Putch>
 6c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 6ca:	9c 85       	ldd	r25, Y+12	; 0x0c
			UART0_Putch(valuemm);			
 6cc:	99 27       	eor	r25, r25
 6ce:	96 d1       	rcall	.+812    	; 0x9fc <UART0_Putch>
 6d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 6d2:	9e 85       	ldd	r25, Y+14	; 0x0e
 6d4:	93 d1       	rcall	.+806    	; 0x9fc <UART0_Putch>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	a8 ec       	ldi	r26, 0xC8	; 200
 6dc:	b2 e4       	ldi	r27, 0x42	; 66
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	9a 83       	std	Y+2, r25	; 0x02

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6e2:	ab 83       	std	Y+3, r26	; 0x03
 6e4:	bc 83       	std	Y+4, r27	; 0x04
 6e6:	8e 01       	movw	r16, r28
 6e8:	04 5b       	subi	r16, 0xB4	; 180
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	4a e7       	ldi	r20, 0x7A	; 122
 6f2:	55 e4       	ldi	r21, 0x45	; 69
 6f4:	69 81       	ldd	r22, Y+1	; 0x01
 6f6:	7a 81       	ldd	r23, Y+2	; 0x02
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	20 d3       	rcall	.+1600   	; 0xd3e <__mulsf3>
 6fe:	dc 01       	movw	r26, r24
 700:	cb 01       	movw	r24, r22
 702:	f8 01       	movw	r30, r16
 704:	80 83       	st	Z, r24
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
 70a:	b3 83       	std	Z+3, r27	; 0x03
 70c:	ce 01       	movw	r24, r28
 70e:	84 5b       	subi	r24, 0xB4	; 180
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	40 e8       	ldi	r20, 0x80	; 128
 718:	5f e3       	ldi	r21, 0x3F	; 63
 71a:	fc 01       	movw	r30, r24
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	fb d1       	rcall	.+1014   	; 0xb1c <__cmpsf2>
		__ticks = 1;
 726:	88 23       	and	r24, r24
 728:	4c f4       	brge	.+18     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 72a:	ce 01       	movw	r24, r28
 72c:	80 5b       	subi	r24, 0xB0	; 176
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	fc 01       	movw	r30, r24
	else if (__tmp > 65535)
 736:	31 83       	std	Z+1, r19	; 0x01
 738:	20 83       	st	Z, r18
 73a:	65 c0       	rjmp	.+202    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
 73c:	ce 01       	movw	r24, r28
 73e:	84 5b       	subi	r24, 0xB4	; 180
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	3f ef       	ldi	r19, 0xFF	; 255
 746:	4f e7       	ldi	r20, 0x7F	; 127
 748:	57 e4       	ldi	r21, 0x47	; 71
 74a:	fc 01       	movw	r30, r24
 74c:	60 81       	ld	r22, Z
 74e:	71 81       	ldd	r23, Z+1	; 0x01
 750:	82 81       	ldd	r24, Z+2	; 0x02
 752:	93 81       	ldd	r25, Z+3	; 0x03
 754:	f0 d2       	rcall	.+1504   	; 0xd36 <__gesf2>
 756:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 758:	0c f0       	brlt	.+2      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 75a:	44 c0       	rjmp	.+136    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	40 e2       	ldi	r20, 0x20	; 32
 762:	51 e4       	ldi	r21, 0x41	; 65
 764:	69 81       	ldd	r22, Y+1	; 0x01
 766:	7a 81       	ldd	r23, Y+2	; 0x02
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	9c 81       	ldd	r25, Y+4	; 0x04
 76c:	e8 d2       	rcall	.+1488   	; 0xd3e <__mulsf3>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	8e 01       	movw	r16, r28
 774:	00 5b       	subi	r16, 0xB0	; 176
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	bc 01       	movw	r22, r24
 77a:	cd 01       	movw	r24, r26
 77c:	3b d2       	rcall	.+1142   	; 0xbf4 <__fixunssfsi>
 77e:	dc 01       	movw	r26, r24
 780:	cb 01       	movw	r24, r22
 782:	f8 01       	movw	r30, r16
 784:	91 83       	std	Z+1, r25	; 0x01
 786:	80 83       	st	Z, r24
 788:	24 c0       	rjmp	.+72     	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
 78a:	ce 01       	movw	r24, r28
 78c:	8e 5a       	subi	r24, 0xAE	; 174
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	20 e9       	ldi	r18, 0x90	; 144
 792:	31 e0       	ldi	r19, 0x01	; 1
 794:	fc 01       	movw	r30, r24
 796:	31 83       	std	Z+1, r19	; 0x01
 798:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 79a:	ce 01       	movw	r24, r28
 79c:	8e 5a       	subi	r24, 0xAE	; 174
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	fc 01       	movw	r30, r24
 7a2:	80 81       	ld	r24, Z
 7a4:	91 81       	ldd	r25, Z+1	; 0x01
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
 7aa:	9e 01       	movw	r18, r28
 7ac:	2e 5a       	subi	r18, 0xAE	; 174
 7ae:	3f 4f       	sbci	r19, 0xFF	; 255
 7b0:	f9 01       	movw	r30, r18
 7b2:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7b4:	80 83       	st	Z, r24
 7b6:	ce 01       	movw	r24, r28
 7b8:	80 5b       	subi	r24, 0xB0	; 176
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	9e 01       	movw	r18, r28
 7be:	20 5b       	subi	r18, 0xB0	; 176
 7c0:	3f 4f       	sbci	r19, 0xFF	; 255
 7c2:	f9 01       	movw	r30, r18
 7c4:	20 81       	ld	r18, Z
 7c6:	31 81       	ldd	r19, Z+1	; 0x01
 7c8:	21 50       	subi	r18, 0x01	; 1
 7ca:	31 09       	sbc	r19, r1
 7cc:	fc 01       	movw	r30, r24
 7ce:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7d0:	20 83       	st	Z, r18
 7d2:	ce 01       	movw	r24, r28
 7d4:	80 5b       	subi	r24, 0xB0	; 176
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	fc 01       	movw	r30, r24
 7da:	80 81       	ld	r24, Z
 7dc:	91 81       	ldd	r25, Z+1	; 0x01
 7de:	89 2b       	or	r24, r25
 7e0:	a1 f6       	brne	.-88     	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7e2:	2b c0       	rjmp	.+86     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 7e4:	8e 01       	movw	r16, r28
 7e6:	00 5b       	subi	r16, 0xB0	; 176
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	ce 01       	movw	r24, r28
 7ec:	84 5b       	subi	r24, 0xB4	; 180
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	fc 01       	movw	r30, r24
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	93 81       	ldd	r25, Z+3	; 0x03
 7fa:	fc d1       	rcall	.+1016   	; 0xbf4 <__fixunssfsi>
 7fc:	dc 01       	movw	r26, r24
 7fe:	cb 01       	movw	r24, r22
 800:	f8 01       	movw	r30, r16
 802:	91 83       	std	Z+1, r25	; 0x01
 804:	80 83       	st	Z, r24
 806:	ce 01       	movw	r24, r28
 808:	8c 5a       	subi	r24, 0xAC	; 172
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	9e 01       	movw	r18, r28
 80e:	20 5b       	subi	r18, 0xB0	; 176
 810:	3f 4f       	sbci	r19, 0xFF	; 255
 812:	f9 01       	movw	r30, r18
 814:	20 81       	ld	r18, Z
 816:	31 81       	ldd	r19, Z+1	; 0x01
 818:	fc 01       	movw	r30, r24
 81a:	31 83       	std	Z+1, r19	; 0x01
 81c:	20 83       	st	Z, r18
 81e:	ce 01       	movw	r24, r28
 820:	8c 5a       	subi	r24, 0xAC	; 172
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	fc 01       	movw	r30, r24
 826:	80 81       	ld	r24, Z
 828:	91 81       	ldd	r25, Z+1	; 0x01
 82a:	01 97       	sbiw	r24, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
 82e:	9e 01       	movw	r18, r28
 830:	2c 5a       	subi	r18, 0xAC	; 172
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	f9 01       	movw	r30, r18
 836:	91 83       	std	Z+1, r25	; 0x01
 838:	80 83       	st	Z, r24
			_delay_ms(100);
			TCNT1 = 0;
 83a:	8c e4       	ldi	r24, 0x4C	; 76
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	fc 01       	movw	r30, r24
 840:	11 82       	std	Z+1, r1	; 0x01
 842:	10 82       	st	Z, r1
			// TC
			TCCR1B = 0x42;
 844:	8e e4       	ldi	r24, 0x4E	; 78
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	22 e4       	ldi	r18, 0x42	; 66
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
			// 기록하였으니 다시 상승엣지 Set
			captFlag = 0;
 84e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			currentICR = 0;
 852:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 856:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
			pastICR = 0;
 85a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 85e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
			// 사용했던 Flag와 기록 초기화
		}
    }
 862:	86 cc       	rjmp	.-1780   	; 0x170 <main+0xc2>

00000864 <__vector_18>:
}

ISR(USART0_RX_vect){
 864:	1f 92       	push	r1
 866:	0f 92       	push	r0
 868:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 874:	0f 92       	push	r0
 876:	af 92       	push	r10
 878:	bf 92       	push	r11
 87a:	cf 92       	push	r12
 87c:	df 92       	push	r13
 87e:	ef 92       	push	r14
 880:	ff 92       	push	r15
 882:	0f 93       	push	r16
 884:	1f 93       	push	r17
 886:	2f 93       	push	r18
 888:	3f 93       	push	r19
 88a:	4f 93       	push	r20
 88c:	5f 93       	push	r21
 88e:	6f 93       	push	r22
 890:	7f 93       	push	r23
 892:	8f 93       	push	r24
 894:	9f 93       	push	r25
 896:	af 93       	push	r26
 898:	bf 93       	push	r27
 89a:	ef 93       	push	r30
 89c:	ff 93       	push	r31
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <__vector_18+0x40>
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <__vector_18+0x42>
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
	angleGet = UDR0;
 8aa:	8c e2       	ldi	r24, 0x2C	; 44
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	fc 01       	movw	r30, r24
 8b0:	80 81       	ld	r24, Z
 8b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <angleGet>
	long angleSet = mapping((long)angleGet, 0,180,1000,5000);
 8b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <angleGet>
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	a0 e0       	ldi	r26, 0x00	; 0
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	1f 92       	push	r1
 8c4:	1f 92       	push	r1
 8c6:	23 e1       	ldi	r18, 0x13	; 19
 8c8:	2f 93       	push	r18
 8ca:	28 e8       	ldi	r18, 0x88	; 136
 8cc:	2f 93       	push	r18
 8ce:	0f 2e       	mov	r0, r31
 8d0:	f8 ee       	ldi	r31, 0xE8	; 232
 8d2:	af 2e       	mov	r10, r31
 8d4:	f3 e0       	ldi	r31, 0x03	; 3
 8d6:	bf 2e       	mov	r11, r31
 8d8:	c1 2c       	mov	r12, r1
 8da:	d1 2c       	mov	r13, r1
 8dc:	f0 2d       	mov	r31, r0
 8de:	14 eb       	ldi	r17, 0xB4	; 180
 8e0:	e1 2e       	mov	r14, r17
 8e2:	f1 2c       	mov	r15, r1
 8e4:	00 e0       	ldi	r16, 0x00	; 0
 8e6:	10 e0       	ldi	r17, 0x00	; 0
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a9 01       	movw	r20, r18
 8ee:	bc 01       	movw	r22, r24
 8f0:	cd 01       	movw	r24, r26
 8f2:	9f d0       	rcall	.+318    	; 0xa32 <mapping>
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	dc 01       	movw	r26, r24
 8fe:	cb 01       	movw	r24, r22
 900:	89 83       	std	Y+1, r24	; 0x01
 902:	9a 83       	std	Y+2, r25	; 0x02
 904:	ab 83       	std	Y+3, r26	; 0x03
 906:	bc 83       	std	Y+4, r27	; 0x04
	OCR3A = angleSet;
 908:	86 e8       	ldi	r24, 0x86	; 134
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	29 81       	ldd	r18, Y+1	; 0x01
 90e:	3a 81       	ldd	r19, Y+2	; 0x02
 910:	fc 01       	movw	r30, r24
 912:	31 83       	std	Z+1, r19	; 0x01
 914:	20 83       	st	Z, r18
}
 916:	00 00       	nop
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	ff 90       	pop	r15
 942:	ef 90       	pop	r14
 944:	df 90       	pop	r13
 946:	cf 90       	pop	r12
 948:	bf 90       	pop	r11
 94a:	af 90       	pop	r10
 94c:	0f 90       	pop	r0
 94e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 952:	0f 90       	pop	r0
 954:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 958:	0f 90       	pop	r0
 95a:	1f 90       	pop	r1
 95c:	18 95       	reti

0000095e <__vector_11>:

ISR(TIMER1_CAPT_vect){
 95e:	1f 92       	push	r1
 960:	0f 92       	push	r0
 962:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 966:	0f 92       	push	r0
 968:	11 24       	eor	r1, r1
 96a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 96e:	0f 92       	push	r0
 970:	2f 93       	push	r18
 972:	8f 93       	push	r24
 974:	9f 93       	push	r25
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
	if(TCCR1B & 0x40){
 982:	8e e4       	ldi	r24, 0x4E	; 78
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	fc 01       	movw	r30, r24
 988:	80 81       	ld	r24, Z
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	80 74       	andi	r24, 0x40	; 64
 990:	99 27       	eor	r25, r25
 992:	89 2b       	or	r24, r25
 994:	91 f0       	breq	.+36     	; 0x9ba <__vector_11+0x5c>
		// 상승엣지 인경우
		pastICR = ICR1;
 996:	86 e4       	ldi	r24, 0x46	; 70
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	fc 01       	movw	r30, r24
 99c:	80 81       	ld	r24, Z
 99e:	91 81       	ldd	r25, Z+1	; 0x01
 9a0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <pastICR+0x1>
 9a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pastICR>
		TCCR1B = 0x02;
 9a8:	8e e4       	ldi	r24, 0x4E	; 78
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	22 e0       	ldi	r18, 0x02	; 2
 9ae:	fc 01       	movw	r30, r24
 9b0:	20 83       	st	Z, r18
		// 하강엣지 Clear
		captFlag = 1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(captFlag == 1){
			currentICR = ICR1;
			captFlag = 2;
		}
	}
}
 9b8:	10 c0       	rjmp	.+32     	; 0x9da <__vector_11+0x7c>
		captFlag = 1;
	}
	else{
		// 하강엣지 인경우
		// 시작 pastICR이 기록되었을때 작동되면 현재를 기록
		if(captFlag == 1){
 9ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	61 f4       	brne	.+24     	; 0x9da <__vector_11+0x7c>
			currentICR = ICR1;
 9c2:	86 e4       	ldi	r24, 0x46	; 70
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	fc 01       	movw	r30, r24
 9c8:	80 81       	ld	r24, Z
 9ca:	91 81       	ldd	r25, Z+1	; 0x01
 9cc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <currentICR+0x1>
 9d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentICR>
			captFlag = 2;
 9d4:	82 e0       	ldi	r24, 0x02	; 2
 9d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 9da:	00 00       	nop
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	9f 91       	pop	r25
 9e6:	8f 91       	pop	r24
 9e8:	2f 91       	pop	r18
 9ea:	0f 90       	pop	r0
 9ec:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 9f0:	0f 90       	pop	r0
 9f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9f6:	0f 90       	pop	r0
 9f8:	1f 90       	pop	r1
 9fa:	18 95       	reti

000009fc <UART0_Putch>:

void UART0_Putch(unsigned char data) // 송신
{
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	1f 92       	push	r1
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
 a08:	00 00       	nop
 a0a:	8b e2       	ldi	r24, 0x2B	; 43
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	fc 01       	movw	r30, r24
 a10:	80 81       	ld	r24, Z
 a12:	88 2f       	mov	r24, r24
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	80 72       	andi	r24, 0x20	; 32
 a18:	99 27       	eor	r25, r25
 a1a:	89 2b       	or	r24, r25
 a1c:	b1 f3       	breq	.-20     	; 0xa0a <UART0_Putch+0xe>
	UDR0 = data;
 a1e:	8c e2       	ldi	r24, 0x2C	; 44
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	29 81       	ldd	r18, Y+1	; 0x01
 a24:	fc 01       	movw	r30, r24
 a26:	20 83       	st	Z, r18
}
 a28:	00 00       	nop
 a2a:	0f 90       	pop	r0
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <mapping>:


long mapping(long x, long in_min, long in_max, long out_min, long out_max)
{
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
 a40:	1f 93       	push	r17
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	60 97       	sbiw	r28, 0x10	; 16
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
 a56:	69 83       	std	Y+1, r22	; 0x01
 a58:	7a 83       	std	Y+2, r23	; 0x02
 a5a:	8b 83       	std	Y+3, r24	; 0x03
 a5c:	9c 83       	std	Y+4, r25	; 0x04
 a5e:	2d 83       	std	Y+5, r18	; 0x05
 a60:	3e 83       	std	Y+6, r19	; 0x06
 a62:	4f 83       	std	Y+7, r20	; 0x07
 a64:	58 87       	std	Y+8, r21	; 0x08
 a66:	e9 86       	std	Y+9, r14	; 0x09
 a68:	fa 86       	std	Y+10, r15	; 0x0a
 a6a:	0b 87       	std	Y+11, r16	; 0x0b
 a6c:	1c 87       	std	Y+12, r17	; 0x0c
 a6e:	ad 86       	std	Y+13, r10	; 0x0d
 a70:	be 86       	std	Y+14, r11	; 0x0e
 a72:	cf 86       	std	Y+15, r12	; 0x0f
 a74:	d8 8a       	std	Y+16, r13	; 0x10
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 a76:	29 81       	ldd	r18, Y+1	; 0x01
 a78:	3a 81       	ldd	r19, Y+2	; 0x02
 a7a:	4b 81       	ldd	r20, Y+3	; 0x03
 a7c:	5c 81       	ldd	r21, Y+4	; 0x04
 a7e:	8d 81       	ldd	r24, Y+5	; 0x05
 a80:	9e 81       	ldd	r25, Y+6	; 0x06
 a82:	af 81       	ldd	r26, Y+7	; 0x07
 a84:	b8 85       	ldd	r27, Y+8	; 0x08
 a86:	79 01       	movw	r14, r18
 a88:	8a 01       	movw	r16, r20
 a8a:	e8 1a       	sub	r14, r24
 a8c:	f9 0a       	sbc	r15, r25
 a8e:	0a 0b       	sbc	r16, r26
 a90:	1b 0b       	sbc	r17, r27
 a92:	2d 8d       	ldd	r18, Y+29	; 0x1d
 a94:	3e 8d       	ldd	r19, Y+30	; 0x1e
 a96:	4f 8d       	ldd	r20, Y+31	; 0x1f
 a98:	58 a1       	ldd	r21, Y+32	; 0x20
 a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
 a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
 a9e:	af 85       	ldd	r26, Y+15	; 0x0f
 aa0:	b8 89       	ldd	r27, Y+16	; 0x10
 aa2:	59 01       	movw	r10, r18
 aa4:	6a 01       	movw	r12, r20
 aa6:	a8 1a       	sub	r10, r24
 aa8:	b9 0a       	sbc	r11, r25
 aaa:	ca 0a       	sbc	r12, r26
 aac:	db 0a       	sbc	r13, r27
 aae:	d6 01       	movw	r26, r12
 ab0:	c5 01       	movw	r24, r10
 ab2:	a8 01       	movw	r20, r16
 ab4:	97 01       	movw	r18, r14
 ab6:	bc 01       	movw	r22, r24
 ab8:	cd 01       	movw	r24, r26
 aba:	a4 d1       	rcall	.+840    	; 0xe04 <__mulsi3>
 abc:	7b 01       	movw	r14, r22
 abe:	8c 01       	movw	r16, r24
 ac0:	29 85       	ldd	r18, Y+9	; 0x09
 ac2:	3a 85       	ldd	r19, Y+10	; 0x0a
 ac4:	4b 85       	ldd	r20, Y+11	; 0x0b
 ac6:	5c 85       	ldd	r21, Y+12	; 0x0c
 ac8:	8d 81       	ldd	r24, Y+5	; 0x05
 aca:	9e 81       	ldd	r25, Y+6	; 0x06
 acc:	af 81       	ldd	r26, Y+7	; 0x07
 ace:	b8 85       	ldd	r27, Y+8	; 0x08
 ad0:	28 1b       	sub	r18, r24
 ad2:	39 0b       	sbc	r19, r25
 ad4:	4a 0b       	sbc	r20, r26
 ad6:	5b 0b       	sbc	r21, r27
 ad8:	c8 01       	movw	r24, r16
 ada:	b7 01       	movw	r22, r14
 adc:	a2 d1       	rcall	.+836    	; 0xe22 <__divmodsi4>
 ade:	da 01       	movw	r26, r20
 ae0:	c9 01       	movw	r24, r18
 ae2:	9c 01       	movw	r18, r24
 ae4:	ad 01       	movw	r20, r26
 ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
 ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
 aea:	af 85       	ldd	r26, Y+15	; 0x0f
 aec:	b8 89       	ldd	r27, Y+16	; 0x10
 aee:	82 0f       	add	r24, r18
 af0:	93 1f       	adc	r25, r19
 af2:	a4 1f       	adc	r26, r20
 af4:	b5 1f       	adc	r27, r21
 af6:	bc 01       	movw	r22, r24
 af8:	cd 01       	movw	r24, r26
 afa:	60 96       	adiw	r28, 0x10	; 16
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	ff 90       	pop	r15
 b10:	ef 90       	pop	r14
 b12:	df 90       	pop	r13
 b14:	cf 90       	pop	r12
 b16:	bf 90       	pop	r11
 b18:	af 90       	pop	r10
 b1a:	08 95       	ret

00000b1c <__cmpsf2>:
 b1c:	97 d0       	rcall	.+302    	; 0xc4c <__fp_cmp>
 b1e:	08 f4       	brcc	.+2      	; 0xb22 <__cmpsf2+0x6>
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	08 95       	ret

00000b24 <__divsf3>:
 b24:	0c d0       	rcall	.+24     	; 0xb3e <__divsf3x>
 b26:	cd c0       	rjmp	.+410    	; 0xcc2 <__fp_round>
 b28:	c5 d0       	rcall	.+394    	; 0xcb4 <__fp_pscB>
 b2a:	40 f0       	brcs	.+16     	; 0xb3c <__divsf3+0x18>
 b2c:	bc d0       	rcall	.+376    	; 0xca6 <__fp_pscA>
 b2e:	30 f0       	brcs	.+12     	; 0xb3c <__divsf3+0x18>
 b30:	21 f4       	brne	.+8      	; 0xb3a <__divsf3+0x16>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	19 f0       	breq	.+6      	; 0xb3c <__divsf3+0x18>
 b36:	ae c0       	rjmp	.+348    	; 0xc94 <__fp_inf>
 b38:	51 11       	cpse	r21, r1
 b3a:	f7 c0       	rjmp	.+494    	; 0xd2a <__fp_szero>
 b3c:	b1 c0       	rjmp	.+354    	; 0xca0 <__fp_nan>

00000b3e <__divsf3x>:
 b3e:	d2 d0       	rcall	.+420    	; 0xce4 <__fp_split3>
 b40:	98 f3       	brcs	.-26     	; 0xb28 <__divsf3+0x4>

00000b42 <__divsf3_pse>:
 b42:	99 23       	and	r25, r25
 b44:	c9 f3       	breq	.-14     	; 0xb38 <__divsf3+0x14>
 b46:	55 23       	and	r21, r21
 b48:	b1 f3       	breq	.-20     	; 0xb36 <__divsf3+0x12>
 b4a:	95 1b       	sub	r25, r21
 b4c:	55 0b       	sbc	r21, r21
 b4e:	bb 27       	eor	r27, r27
 b50:	aa 27       	eor	r26, r26
 b52:	62 17       	cp	r22, r18
 b54:	73 07       	cpc	r23, r19
 b56:	84 07       	cpc	r24, r20
 b58:	38 f0       	brcs	.+14     	; 0xb68 <__divsf3_pse+0x26>
 b5a:	9f 5f       	subi	r25, 0xFF	; 255
 b5c:	5f 4f       	sbci	r21, 0xFF	; 255
 b5e:	22 0f       	add	r18, r18
 b60:	33 1f       	adc	r19, r19
 b62:	44 1f       	adc	r20, r20
 b64:	aa 1f       	adc	r26, r26
 b66:	a9 f3       	breq	.-22     	; 0xb52 <__divsf3_pse+0x10>
 b68:	33 d0       	rcall	.+102    	; 0xbd0 <__divsf3_pse+0x8e>
 b6a:	0e 2e       	mov	r0, r30
 b6c:	3a f0       	brmi	.+14     	; 0xb7c <__divsf3_pse+0x3a>
 b6e:	e0 e8       	ldi	r30, 0x80	; 128
 b70:	30 d0       	rcall	.+96     	; 0xbd2 <__divsf3_pse+0x90>
 b72:	91 50       	subi	r25, 0x01	; 1
 b74:	50 40       	sbci	r21, 0x00	; 0
 b76:	e6 95       	lsr	r30
 b78:	00 1c       	adc	r0, r0
 b7a:	ca f7       	brpl	.-14     	; 0xb6e <__divsf3_pse+0x2c>
 b7c:	29 d0       	rcall	.+82     	; 0xbd0 <__divsf3_pse+0x8e>
 b7e:	fe 2f       	mov	r31, r30
 b80:	27 d0       	rcall	.+78     	; 0xbd0 <__divsf3_pse+0x8e>
 b82:	66 0f       	add	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	bb 1f       	adc	r27, r27
 b8a:	26 17       	cp	r18, r22
 b8c:	37 07       	cpc	r19, r23
 b8e:	48 07       	cpc	r20, r24
 b90:	ab 07       	cpc	r26, r27
 b92:	b0 e8       	ldi	r27, 0x80	; 128
 b94:	09 f0       	breq	.+2      	; 0xb98 <__divsf3_pse+0x56>
 b96:	bb 0b       	sbc	r27, r27
 b98:	80 2d       	mov	r24, r0
 b9a:	bf 01       	movw	r22, r30
 b9c:	ff 27       	eor	r31, r31
 b9e:	93 58       	subi	r25, 0x83	; 131
 ba0:	5f 4f       	sbci	r21, 0xFF	; 255
 ba2:	2a f0       	brmi	.+10     	; 0xbae <__divsf3_pse+0x6c>
 ba4:	9e 3f       	cpi	r25, 0xFE	; 254
 ba6:	51 05       	cpc	r21, r1
 ba8:	68 f0       	brcs	.+26     	; 0xbc4 <__divsf3_pse+0x82>
 baa:	74 c0       	rjmp	.+232    	; 0xc94 <__fp_inf>
 bac:	be c0       	rjmp	.+380    	; 0xd2a <__fp_szero>
 bae:	5f 3f       	cpi	r21, 0xFF	; 255
 bb0:	ec f3       	brlt	.-6      	; 0xbac <__divsf3_pse+0x6a>
 bb2:	98 3e       	cpi	r25, 0xE8	; 232
 bb4:	dc f3       	brlt	.-10     	; 0xbac <__divsf3_pse+0x6a>
 bb6:	86 95       	lsr	r24
 bb8:	77 95       	ror	r23
 bba:	67 95       	ror	r22
 bbc:	b7 95       	ror	r27
 bbe:	f7 95       	ror	r31
 bc0:	9f 5f       	subi	r25, 0xFF	; 255
 bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__divsf3_pse+0x74>
 bc4:	88 0f       	add	r24, r24
 bc6:	91 1d       	adc	r25, r1
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret
 bd0:	e1 e0       	ldi	r30, 0x01	; 1
 bd2:	66 0f       	add	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	bb 1f       	adc	r27, r27
 bda:	62 17       	cp	r22, r18
 bdc:	73 07       	cpc	r23, r19
 bde:	84 07       	cpc	r24, r20
 be0:	ba 07       	cpc	r27, r26
 be2:	20 f0       	brcs	.+8      	; 0xbec <__divsf3_pse+0xaa>
 be4:	62 1b       	sub	r22, r18
 be6:	73 0b       	sbc	r23, r19
 be8:	84 0b       	sbc	r24, r20
 bea:	ba 0b       	sbc	r27, r26
 bec:	ee 1f       	adc	r30, r30
 bee:	88 f7       	brcc	.-30     	; 0xbd2 <__divsf3_pse+0x90>
 bf0:	e0 95       	com	r30
 bf2:	08 95       	ret

00000bf4 <__fixunssfsi>:
 bf4:	7f d0       	rcall	.+254    	; 0xcf4 <__fp_splitA>
 bf6:	88 f0       	brcs	.+34     	; 0xc1a <__fixunssfsi+0x26>
 bf8:	9f 57       	subi	r25, 0x7F	; 127
 bfa:	90 f0       	brcs	.+36     	; 0xc20 <__fixunssfsi+0x2c>
 bfc:	b9 2f       	mov	r27, r25
 bfe:	99 27       	eor	r25, r25
 c00:	b7 51       	subi	r27, 0x17	; 23
 c02:	a0 f0       	brcs	.+40     	; 0xc2c <__fixunssfsi+0x38>
 c04:	d1 f0       	breq	.+52     	; 0xc3a <__fixunssfsi+0x46>
 c06:	66 0f       	add	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	1a f0       	brmi	.+6      	; 0xc16 <__fixunssfsi+0x22>
 c10:	ba 95       	dec	r27
 c12:	c9 f7       	brne	.-14     	; 0xc06 <__fixunssfsi+0x12>
 c14:	12 c0       	rjmp	.+36     	; 0xc3a <__fixunssfsi+0x46>
 c16:	b1 30       	cpi	r27, 0x01	; 1
 c18:	81 f0       	breq	.+32     	; 0xc3a <__fixunssfsi+0x46>
 c1a:	86 d0       	rcall	.+268    	; 0xd28 <__fp_zero>
 c1c:	b1 e0       	ldi	r27, 0x01	; 1
 c1e:	08 95       	ret
 c20:	83 c0       	rjmp	.+262    	; 0xd28 <__fp_zero>
 c22:	67 2f       	mov	r22, r23
 c24:	78 2f       	mov	r23, r24
 c26:	88 27       	eor	r24, r24
 c28:	b8 5f       	subi	r27, 0xF8	; 248
 c2a:	39 f0       	breq	.+14     	; 0xc3a <__fixunssfsi+0x46>
 c2c:	b9 3f       	cpi	r27, 0xF9	; 249
 c2e:	cc f3       	brlt	.-14     	; 0xc22 <__fixunssfsi+0x2e>
 c30:	86 95       	lsr	r24
 c32:	77 95       	ror	r23
 c34:	67 95       	ror	r22
 c36:	b3 95       	inc	r27
 c38:	d9 f7       	brne	.-10     	; 0xc30 <__fixunssfsi+0x3c>
 c3a:	3e f4       	brtc	.+14     	; 0xc4a <__fixunssfsi+0x56>
 c3c:	90 95       	com	r25
 c3e:	80 95       	com	r24
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	08 95       	ret

00000c4c <__fp_cmp>:
 c4c:	99 0f       	add	r25, r25
 c4e:	00 08       	sbc	r0, r0
 c50:	55 0f       	add	r21, r21
 c52:	aa 0b       	sbc	r26, r26
 c54:	e0 e8       	ldi	r30, 0x80	; 128
 c56:	fe ef       	ldi	r31, 0xFE	; 254
 c58:	16 16       	cp	r1, r22
 c5a:	17 06       	cpc	r1, r23
 c5c:	e8 07       	cpc	r30, r24
 c5e:	f9 07       	cpc	r31, r25
 c60:	c0 f0       	brcs	.+48     	; 0xc92 <__fp_cmp+0x46>
 c62:	12 16       	cp	r1, r18
 c64:	13 06       	cpc	r1, r19
 c66:	e4 07       	cpc	r30, r20
 c68:	f5 07       	cpc	r31, r21
 c6a:	98 f0       	brcs	.+38     	; 0xc92 <__fp_cmp+0x46>
 c6c:	62 1b       	sub	r22, r18
 c6e:	73 0b       	sbc	r23, r19
 c70:	84 0b       	sbc	r24, r20
 c72:	95 0b       	sbc	r25, r21
 c74:	39 f4       	brne	.+14     	; 0xc84 <__fp_cmp+0x38>
 c76:	0a 26       	eor	r0, r26
 c78:	61 f0       	breq	.+24     	; 0xc92 <__fp_cmp+0x46>
 c7a:	23 2b       	or	r18, r19
 c7c:	24 2b       	or	r18, r20
 c7e:	25 2b       	or	r18, r21
 c80:	21 f4       	brne	.+8      	; 0xc8a <__fp_cmp+0x3e>
 c82:	08 95       	ret
 c84:	0a 26       	eor	r0, r26
 c86:	09 f4       	brne	.+2      	; 0xc8a <__fp_cmp+0x3e>
 c88:	a1 40       	sbci	r26, 0x01	; 1
 c8a:	a6 95       	lsr	r26
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	81 1d       	adc	r24, r1
 c90:	81 1d       	adc	r24, r1
 c92:	08 95       	ret

00000c94 <__fp_inf>:
 c94:	97 f9       	bld	r25, 7
 c96:	9f 67       	ori	r25, 0x7F	; 127
 c98:	80 e8       	ldi	r24, 0x80	; 128
 c9a:	70 e0       	ldi	r23, 0x00	; 0
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	08 95       	ret

00000ca0 <__fp_nan>:
 ca0:	9f ef       	ldi	r25, 0xFF	; 255
 ca2:	80 ec       	ldi	r24, 0xC0	; 192
 ca4:	08 95       	ret

00000ca6 <__fp_pscA>:
 ca6:	00 24       	eor	r0, r0
 ca8:	0a 94       	dec	r0
 caa:	16 16       	cp	r1, r22
 cac:	17 06       	cpc	r1, r23
 cae:	18 06       	cpc	r1, r24
 cb0:	09 06       	cpc	r0, r25
 cb2:	08 95       	ret

00000cb4 <__fp_pscB>:
 cb4:	00 24       	eor	r0, r0
 cb6:	0a 94       	dec	r0
 cb8:	12 16       	cp	r1, r18
 cba:	13 06       	cpc	r1, r19
 cbc:	14 06       	cpc	r1, r20
 cbe:	05 06       	cpc	r0, r21
 cc0:	08 95       	ret

00000cc2 <__fp_round>:
 cc2:	09 2e       	mov	r0, r25
 cc4:	03 94       	inc	r0
 cc6:	00 0c       	add	r0, r0
 cc8:	11 f4       	brne	.+4      	; 0xcce <__fp_round+0xc>
 cca:	88 23       	and	r24, r24
 ccc:	52 f0       	brmi	.+20     	; 0xce2 <__fp_round+0x20>
 cce:	bb 0f       	add	r27, r27
 cd0:	40 f4       	brcc	.+16     	; 0xce2 <__fp_round+0x20>
 cd2:	bf 2b       	or	r27, r31
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0x18>
 cd6:	60 ff       	sbrs	r22, 0
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__fp_round+0x20>
 cda:	6f 5f       	subi	r22, 0xFF	; 255
 cdc:	7f 4f       	sbci	r23, 0xFF	; 255
 cde:	8f 4f       	sbci	r24, 0xFF	; 255
 ce0:	9f 4f       	sbci	r25, 0xFF	; 255
 ce2:	08 95       	ret

00000ce4 <__fp_split3>:
 ce4:	57 fd       	sbrc	r21, 7
 ce6:	90 58       	subi	r25, 0x80	; 128
 ce8:	44 0f       	add	r20, r20
 cea:	55 1f       	adc	r21, r21
 cec:	59 f0       	breq	.+22     	; 0xd04 <__fp_splitA+0x10>
 cee:	5f 3f       	cpi	r21, 0xFF	; 255
 cf0:	71 f0       	breq	.+28     	; 0xd0e <__fp_splitA+0x1a>
 cf2:	47 95       	ror	r20

00000cf4 <__fp_splitA>:
 cf4:	88 0f       	add	r24, r24
 cf6:	97 fb       	bst	r25, 7
 cf8:	99 1f       	adc	r25, r25
 cfa:	61 f0       	breq	.+24     	; 0xd14 <__fp_splitA+0x20>
 cfc:	9f 3f       	cpi	r25, 0xFF	; 255
 cfe:	79 f0       	breq	.+30     	; 0xd1e <__fp_splitA+0x2a>
 d00:	87 95       	ror	r24
 d02:	08 95       	ret
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	55 1f       	adc	r21, r21
 d0c:	f2 cf       	rjmp	.-28     	; 0xcf2 <__fp_split3+0xe>
 d0e:	46 95       	lsr	r20
 d10:	f1 df       	rcall	.-30     	; 0xcf4 <__fp_splitA>
 d12:	08 c0       	rjmp	.+16     	; 0xd24 <__fp_splitA+0x30>
 d14:	16 16       	cp	r1, r22
 d16:	17 06       	cpc	r1, r23
 d18:	18 06       	cpc	r1, r24
 d1a:	99 1f       	adc	r25, r25
 d1c:	f1 cf       	rjmp	.-30     	; 0xd00 <__fp_splitA+0xc>
 d1e:	86 95       	lsr	r24
 d20:	71 05       	cpc	r23, r1
 d22:	61 05       	cpc	r22, r1
 d24:	08 94       	sec
 d26:	08 95       	ret

00000d28 <__fp_zero>:
 d28:	e8 94       	clt

00000d2a <__fp_szero>:
 d2a:	bb 27       	eor	r27, r27
 d2c:	66 27       	eor	r22, r22
 d2e:	77 27       	eor	r23, r23
 d30:	cb 01       	movw	r24, r22
 d32:	97 f9       	bld	r25, 7
 d34:	08 95       	ret

00000d36 <__gesf2>:
 d36:	8a df       	rcall	.-236    	; 0xc4c <__fp_cmp>
 d38:	08 f4       	brcc	.+2      	; 0xd3c <__gesf2+0x6>
 d3a:	8f ef       	ldi	r24, 0xFF	; 255
 d3c:	08 95       	ret

00000d3e <__mulsf3>:
 d3e:	0b d0       	rcall	.+22     	; 0xd56 <__mulsf3x>
 d40:	c0 cf       	rjmp	.-128    	; 0xcc2 <__fp_round>
 d42:	b1 df       	rcall	.-158    	; 0xca6 <__fp_pscA>
 d44:	28 f0       	brcs	.+10     	; 0xd50 <__mulsf3+0x12>
 d46:	b6 df       	rcall	.-148    	; 0xcb4 <__fp_pscB>
 d48:	18 f0       	brcs	.+6      	; 0xd50 <__mulsf3+0x12>
 d4a:	95 23       	and	r25, r21
 d4c:	09 f0       	breq	.+2      	; 0xd50 <__mulsf3+0x12>
 d4e:	a2 cf       	rjmp	.-188    	; 0xc94 <__fp_inf>
 d50:	a7 cf       	rjmp	.-178    	; 0xca0 <__fp_nan>
 d52:	11 24       	eor	r1, r1
 d54:	ea cf       	rjmp	.-44     	; 0xd2a <__fp_szero>

00000d56 <__mulsf3x>:
 d56:	c6 df       	rcall	.-116    	; 0xce4 <__fp_split3>
 d58:	a0 f3       	brcs	.-24     	; 0xd42 <__mulsf3+0x4>

00000d5a <__mulsf3_pse>:
 d5a:	95 9f       	mul	r25, r21
 d5c:	d1 f3       	breq	.-12     	; 0xd52 <__mulsf3+0x14>
 d5e:	95 0f       	add	r25, r21
 d60:	50 e0       	ldi	r21, 0x00	; 0
 d62:	55 1f       	adc	r21, r21
 d64:	62 9f       	mul	r22, r18
 d66:	f0 01       	movw	r30, r0
 d68:	72 9f       	mul	r23, r18
 d6a:	bb 27       	eor	r27, r27
 d6c:	f0 0d       	add	r31, r0
 d6e:	b1 1d       	adc	r27, r1
 d70:	63 9f       	mul	r22, r19
 d72:	aa 27       	eor	r26, r26
 d74:	f0 0d       	add	r31, r0
 d76:	b1 1d       	adc	r27, r1
 d78:	aa 1f       	adc	r26, r26
 d7a:	64 9f       	mul	r22, r20
 d7c:	66 27       	eor	r22, r22
 d7e:	b0 0d       	add	r27, r0
 d80:	a1 1d       	adc	r26, r1
 d82:	66 1f       	adc	r22, r22
 d84:	82 9f       	mul	r24, r18
 d86:	22 27       	eor	r18, r18
 d88:	b0 0d       	add	r27, r0
 d8a:	a1 1d       	adc	r26, r1
 d8c:	62 1f       	adc	r22, r18
 d8e:	73 9f       	mul	r23, r19
 d90:	b0 0d       	add	r27, r0
 d92:	a1 1d       	adc	r26, r1
 d94:	62 1f       	adc	r22, r18
 d96:	83 9f       	mul	r24, r19
 d98:	a0 0d       	add	r26, r0
 d9a:	61 1d       	adc	r22, r1
 d9c:	22 1f       	adc	r18, r18
 d9e:	74 9f       	mul	r23, r20
 da0:	33 27       	eor	r19, r19
 da2:	a0 0d       	add	r26, r0
 da4:	61 1d       	adc	r22, r1
 da6:	23 1f       	adc	r18, r19
 da8:	84 9f       	mul	r24, r20
 daa:	60 0d       	add	r22, r0
 dac:	21 1d       	adc	r18, r1
 dae:	82 2f       	mov	r24, r18
 db0:	76 2f       	mov	r23, r22
 db2:	6a 2f       	mov	r22, r26
 db4:	11 24       	eor	r1, r1
 db6:	9f 57       	subi	r25, 0x7F	; 127
 db8:	50 40       	sbci	r21, 0x00	; 0
 dba:	8a f0       	brmi	.+34     	; 0xdde <__mulsf3_pse+0x84>
 dbc:	e1 f0       	breq	.+56     	; 0xdf6 <__mulsf3_pse+0x9c>
 dbe:	88 23       	and	r24, r24
 dc0:	4a f0       	brmi	.+18     	; 0xdd4 <__mulsf3_pse+0x7a>
 dc2:	ee 0f       	add	r30, r30
 dc4:	ff 1f       	adc	r31, r31
 dc6:	bb 1f       	adc	r27, r27
 dc8:	66 1f       	adc	r22, r22
 dca:	77 1f       	adc	r23, r23
 dcc:	88 1f       	adc	r24, r24
 dce:	91 50       	subi	r25, 0x01	; 1
 dd0:	50 40       	sbci	r21, 0x00	; 0
 dd2:	a9 f7       	brne	.-22     	; 0xdbe <__mulsf3_pse+0x64>
 dd4:	9e 3f       	cpi	r25, 0xFE	; 254
 dd6:	51 05       	cpc	r21, r1
 dd8:	70 f0       	brcs	.+28     	; 0xdf6 <__mulsf3_pse+0x9c>
 dda:	5c cf       	rjmp	.-328    	; 0xc94 <__fp_inf>
 ddc:	a6 cf       	rjmp	.-180    	; 0xd2a <__fp_szero>
 dde:	5f 3f       	cpi	r21, 0xFF	; 255
 de0:	ec f3       	brlt	.-6      	; 0xddc <__mulsf3_pse+0x82>
 de2:	98 3e       	cpi	r25, 0xE8	; 232
 de4:	dc f3       	brlt	.-10     	; 0xddc <__mulsf3_pse+0x82>
 de6:	86 95       	lsr	r24
 de8:	77 95       	ror	r23
 dea:	67 95       	ror	r22
 dec:	b7 95       	ror	r27
 dee:	f7 95       	ror	r31
 df0:	e7 95       	ror	r30
 df2:	9f 5f       	subi	r25, 0xFF	; 255
 df4:	c1 f7       	brne	.-16     	; 0xde6 <__mulsf3_pse+0x8c>
 df6:	fe 2b       	or	r31, r30
 df8:	88 0f       	add	r24, r24
 dfa:	91 1d       	adc	r25, r1
 dfc:	96 95       	lsr	r25
 dfe:	87 95       	ror	r24
 e00:	97 f9       	bld	r25, 7
 e02:	08 95       	ret

00000e04 <__mulsi3>:
 e04:	db 01       	movw	r26, r22
 e06:	8f 93       	push	r24
 e08:	9f 93       	push	r25
 e0a:	36 d0       	rcall	.+108    	; 0xe78 <__muluhisi3>
 e0c:	bf 91       	pop	r27
 e0e:	af 91       	pop	r26
 e10:	a2 9f       	mul	r26, r18
 e12:	80 0d       	add	r24, r0
 e14:	91 1d       	adc	r25, r1
 e16:	a3 9f       	mul	r26, r19
 e18:	90 0d       	add	r25, r0
 e1a:	b2 9f       	mul	r27, r18
 e1c:	90 0d       	add	r25, r0
 e1e:	11 24       	eor	r1, r1
 e20:	08 95       	ret

00000e22 <__divmodsi4>:
 e22:	05 2e       	mov	r0, r21
 e24:	97 fb       	bst	r25, 7
 e26:	16 f4       	brtc	.+4      	; 0xe2c <__divmodsi4+0xa>
 e28:	00 94       	com	r0
 e2a:	0f d0       	rcall	.+30     	; 0xe4a <__negsi2>
 e2c:	57 fd       	sbrc	r21, 7
 e2e:	05 d0       	rcall	.+10     	; 0xe3a <__divmodsi4_neg2>
 e30:	2d d0       	rcall	.+90     	; 0xe8c <__udivmodsi4>
 e32:	07 fc       	sbrc	r0, 7
 e34:	02 d0       	rcall	.+4      	; 0xe3a <__divmodsi4_neg2>
 e36:	46 f4       	brtc	.+16     	; 0xe48 <__divmodsi4_exit>
 e38:	08 c0       	rjmp	.+16     	; 0xe4a <__negsi2>

00000e3a <__divmodsi4_neg2>:
 e3a:	50 95       	com	r21
 e3c:	40 95       	com	r20
 e3e:	30 95       	com	r19
 e40:	21 95       	neg	r18
 e42:	3f 4f       	sbci	r19, 0xFF	; 255
 e44:	4f 4f       	sbci	r20, 0xFF	; 255
 e46:	5f 4f       	sbci	r21, 0xFF	; 255

00000e48 <__divmodsi4_exit>:
 e48:	08 95       	ret

00000e4a <__negsi2>:
 e4a:	90 95       	com	r25
 e4c:	80 95       	com	r24
 e4e:	70 95       	com	r23
 e50:	61 95       	neg	r22
 e52:	7f 4f       	sbci	r23, 0xFF	; 255
 e54:	8f 4f       	sbci	r24, 0xFF	; 255
 e56:	9f 4f       	sbci	r25, 0xFF	; 255
 e58:	08 95       	ret

00000e5a <__umulhisi3>:
 e5a:	a2 9f       	mul	r26, r18
 e5c:	b0 01       	movw	r22, r0
 e5e:	b3 9f       	mul	r27, r19
 e60:	c0 01       	movw	r24, r0
 e62:	a3 9f       	mul	r26, r19
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	b2 9f       	mul	r27, r18
 e6e:	70 0d       	add	r23, r0
 e70:	81 1d       	adc	r24, r1
 e72:	11 24       	eor	r1, r1
 e74:	91 1d       	adc	r25, r1
 e76:	08 95       	ret

00000e78 <__muluhisi3>:
 e78:	f0 df       	rcall	.-32     	; 0xe5a <__umulhisi3>
 e7a:	a5 9f       	mul	r26, r21
 e7c:	90 0d       	add	r25, r0
 e7e:	b4 9f       	mul	r27, r20
 e80:	90 0d       	add	r25, r0
 e82:	a4 9f       	mul	r26, r20
 e84:	80 0d       	add	r24, r0
 e86:	91 1d       	adc	r25, r1
 e88:	11 24       	eor	r1, r1
 e8a:	08 95       	ret

00000e8c <__udivmodsi4>:
 e8c:	a1 e2       	ldi	r26, 0x21	; 33
 e8e:	1a 2e       	mov	r1, r26
 e90:	aa 1b       	sub	r26, r26
 e92:	bb 1b       	sub	r27, r27
 e94:	fd 01       	movw	r30, r26
 e96:	0d c0       	rjmp	.+26     	; 0xeb2 <__udivmodsi4_ep>

00000e98 <__udivmodsi4_loop>:
 e98:	aa 1f       	adc	r26, r26
 e9a:	bb 1f       	adc	r27, r27
 e9c:	ee 1f       	adc	r30, r30
 e9e:	ff 1f       	adc	r31, r31
 ea0:	a2 17       	cp	r26, r18
 ea2:	b3 07       	cpc	r27, r19
 ea4:	e4 07       	cpc	r30, r20
 ea6:	f5 07       	cpc	r31, r21
 ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__udivmodsi4_ep>
 eaa:	a2 1b       	sub	r26, r18
 eac:	b3 0b       	sbc	r27, r19
 eae:	e4 0b       	sbc	r30, r20
 eb0:	f5 0b       	sbc	r31, r21

00000eb2 <__udivmodsi4_ep>:
 eb2:	66 1f       	adc	r22, r22
 eb4:	77 1f       	adc	r23, r23
 eb6:	88 1f       	adc	r24, r24
 eb8:	99 1f       	adc	r25, r25
 eba:	1a 94       	dec	r1
 ebc:	69 f7       	brne	.-38     	; 0xe98 <__udivmodsi4_loop>
 ebe:	60 95       	com	r22
 ec0:	70 95       	com	r23
 ec2:	80 95       	com	r24
 ec4:	90 95       	com	r25
 ec6:	9b 01       	movw	r18, r22
 ec8:	ac 01       	movw	r20, r24
 eca:	bd 01       	movw	r22, r26
 ecc:	cf 01       	movw	r24, r30
 ece:	08 95       	ret

00000ed0 <_exit>:
 ed0:	f8 94       	cli

00000ed2 <__stop_program>:
 ed2:	ff cf       	rjmp	.-2      	; 0xed2 <__stop_program>
