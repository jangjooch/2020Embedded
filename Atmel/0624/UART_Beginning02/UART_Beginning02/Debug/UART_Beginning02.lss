
UART_Beginning02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082b  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000792  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__vector_18>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	7b c0       	rjmp	.+246    	; 0x192 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <avr/delay.h>
#include <avr/interrupt.h>

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	UCSR0A = 0x00; //  - RXCn TXCn UDREn FEn | DORn UPEn U2Xn MPCMn
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	fc 01       	movw	r30, r24
  ac:	10 82       	st	Z, r1
	// 비동기 방식
	// 멀티프로세서 통신모드 Enable -> 0이 Enable임
	UCSR0B = 0x98; //  - RXCIEn TXCIEn UDRIEn RXENn TNENn UCSZ2n RXB8n TXB8n
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	28 e9       	ldi	r18, 0x98	; 152
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	// RXCIE 수신완료 Interrupt Enable Set
	// RXENn 수신기 Enable Set
	// TNENn 송신기 Enable Set	
	UCSR0C = 0x06; // - UMSELn UPMn1 UPMn0 USBSn UCSZn1 UCSZn0 UCPOLn
  b8:	85 e9       	ldi	r24, 0x95	; 149
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	26 e0       	ldi	r18, 0x06	; 6
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	// 비동기 모드
	// 패리티모드 사용 안함
	// UCSZn1 UCSZn0 -> 전송 데이터 비트 수 설정.-> 011 = 8비트. 즉 char단위
	// 클럭 극성 선택 X. 동기모드에서만 사용
	UBRR0H = 0;
  c2:	80 e9       	ldi	r24, 0x90	; 144
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	UBRR0L = 103;
  ca:	89 e2       	ldi	r24, 0x29	; 41
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	27 e6       	ldi	r18, 0x67	; 103
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	// bps 9600 선택
	
	sei();
  d4:	78 94       	sei
	
    while (1) 
    {
    }
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x38>

000000d8 <__vector_18>:
}

// 수신완료 Interrupt Service Routine
ISR(USART0_RX_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
  e8:	0f 92       	push	r0
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	ch = UDR0; // 수신 버퍼에서 데이터 받음
  fe:	8c e2       	ldi	r24, 0x2C	; 44
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	89 83       	std	Y+1, r24	; 0x01
	
	if(ch >= 'a' && ch <= 'z'){
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	81 36       	cpi	r24, 0x61	; 97
 10c:	38 f0       	brcs	.+14     	; 0x11c <__vector_18+0x44>
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	8b 37       	cpi	r24, 0x7B	; 123
 112:	20 f4       	brcc	.+8      	; 0x11c <__vector_18+0x44>
		ch = ch - 'a' + 'A';
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 52       	subi	r24, 0x20	; 32
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	09 c0       	rjmp	.+18     	; 0x12e <__vector_18+0x56>
	}
	else if(ch >= 'A' && ch <= 'Z'){
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	81 34       	cpi	r24, 0x41	; 65
 120:	30 f0       	brcs	.+12     	; 0x12e <__vector_18+0x56>
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	8b 35       	cpi	r24, 0x5B	; 91
 126:	18 f4       	brcc	.+6      	; 0x12e <__vector_18+0x56>
		ch = ch - 'A' + 'a';
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	80 5e       	subi	r24, 0xE0	; 224
 12c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	while((UCSR0A & 0x20) == 0x0){
 12e:	00 00       	nop
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 72       	andi	r24, 0x20	; 32
 13e:	99 27       	eor	r25, r25
 140:	89 2b       	or	r24, r25
 142:	b1 f3       	breq	.-20     	; 0x130 <__vector_18+0x58>
		// 데이터 전송 완료 확인 Delay
	}
	UDR0 = ch;
 144:	8c e2       	ldi	r24, 0x2C	; 44
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	
	while((UCSR0A & 0x20)== 0x0){
 14e:	00 00       	nop
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	80 72       	andi	r24, 0x20	; 32
 15e:	99 27       	eor	r25, r25
 160:	89 2b       	or	r24, r25
 162:	b1 f3       	breq	.-20     	; 0x150 <__vector_18+0x78>
		// 데이터 전송 완료 확인 Delay
	}
	UDR0 = '\n';
 164:	8c e2       	ldi	r24, 0x2C	; 44
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2a e0       	ldi	r18, 0x0A	; 10
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
		
}
 16e:	00 00       	nop
 170:	0f 90       	pop	r0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 186:	0f 90       	pop	r0
 188:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
