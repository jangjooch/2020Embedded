
UART_Beginning03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000584  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000986  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	72 c2       	rjmp	.+1252   	; 0x580 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:


long mapping(long x, long in_min, long in_max, long out_min, long out_max);

int main(void)
{	
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	a0 97       	sbiw	r28, 0x20	; 32
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	long ad_val = 0;
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	1b 82       	std	Y+3, r1	; 0x03
  b8:	1c 82       	std	Y+4, r1	; 0x04
	
	UCSR0A = 0x00;
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
	UCSR0B = 0x08;
  c2:	8a e2       	ldi	r24, 0x2A	; 42
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 e0       	ldi	r18, 0x08	; 8
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	UCSR0C = 0x06;
  cc:	85 e9       	ldi	r24, 0x95	; 149
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	26 e0       	ldi	r18, 0x06	; 6
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	UBRR0H = 0;
  d6:	80 e9       	ldi	r24, 0x90	; 144
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	10 82       	st	Z, r1
	UBRR0L = 103;	
  de:	89 e2       	ldi	r24, 0x29	; 41
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	27 e6       	ldi	r18, 0x67	; 103
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
		
	// ADC INPUT
	ADCSRA = 0x87;
  e8:	86 e2       	ldi	r24, 0x26	; 38
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	27 e8       	ldi	r18, 0x87	; 135
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	//ADCSRA = (1<<ADEN) | (7<<ADPS0);
	// ADEN ADSC ADFR ADIF | ADIE ADPS2 ADPS1 ADPS0
	// ADEN = ADC Enable Set
	// 분주율 128 설정
		
	ADMUX = 0x40;
  f2:	87 e2       	ldi	r24, 0x27	; 39
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	20 e4       	ldi	r18, 0x40	; 64
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a0 ea       	ldi	r26, 0xA0	; 160
 102:	b0 e4       	ldi	r27, 0x40	; 64
 104:	89 87       	std	Y+9, r24	; 0x09
 106:	9a 87       	std	Y+10, r25	; 0x0a
 108:	ab 87       	std	Y+11, r26	; 0x0b
 10a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4a e7       	ldi	r20, 0x7A	; 122
 112:	55 e4       	ldi	r21, 0x45	; 69
 114:	69 85       	ldd	r22, Y+9	; 0x09
 116:	7a 85       	ldd	r23, Y+10	; 0x0a
 118:	8b 85       	ldd	r24, Y+11	; 0x0b
 11a:	9c 85       	ldd	r25, Y+12	; 0x0c
 11c:	a6 d1       	rcall	.+844    	; 0x46a <__mulsf3>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	8d 87       	std	Y+13, r24	; 0x0d
 124:	9e 87       	std	Y+14, r25	; 0x0e
 126:	af 87       	std	Y+15, r26	; 0x0f
 128:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e8       	ldi	r20, 0x80	; 128
 130:	5f e3       	ldi	r21, 0x3F	; 63
 132:	6d 85       	ldd	r22, Y+13	; 0x0d
 134:	7e 85       	ldd	r23, Y+14	; 0x0e
 136:	8f 85       	ldd	r24, Y+15	; 0x0f
 138:	98 89       	ldd	r25, Y+16	; 0x10
 13a:	16 d1       	rcall	.+556    	; 0x368 <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	2c f4       	brge	.+10     	; 0x14a <main+0xac>
		__ticks = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9a 8b       	std	Y+18, r25	; 0x12
 146:	89 8b       	std	Y+17, r24	; 0x11
 148:	3b c0       	rjmp	.+118    	; 0x1c0 <main+0x122>
	else if (__tmp > 65535)
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	3f ef       	ldi	r19, 0xFF	; 255
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	57 e4       	ldi	r21, 0x47	; 71
 152:	6d 85       	ldd	r22, Y+13	; 0x0d
 154:	7e 85       	ldd	r23, Y+14	; 0x0e
 156:	8f 85       	ldd	r24, Y+15	; 0x0f
 158:	98 89       	ldd	r25, Y+16	; 0x10
 15a:	83 d1       	rcall	.+774    	; 0x462 <__gesf2>
 15c:	18 16       	cp	r1, r24
 15e:	3c f5       	brge	.+78     	; 0x1ae <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e2       	ldi	r20, 0x20	; 32
 166:	51 e4       	ldi	r21, 0x41	; 65
 168:	69 85       	ldd	r22, Y+9	; 0x09
 16a:	7a 85       	ldd	r23, Y+10	; 0x0a
 16c:	8b 85       	ldd	r24, Y+11	; 0x0b
 16e:	9c 85       	ldd	r25, Y+12	; 0x0c
 170:	7c d1       	rcall	.+760    	; 0x46a <__mulsf3>
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	fa d0       	rcall	.+500    	; 0x370 <__fixunssfsi>
 17c:	dc 01       	movw	r26, r24
 17e:	cb 01       	movw	r24, r22
 180:	9a 8b       	std	Y+18, r25	; 0x12
 182:	89 8b       	std	Y+17, r24	; 0x11
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <main+0x106>
 186:	80 e9       	ldi	r24, 0x90	; 144
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	9c 8b       	std	Y+20, r25	; 0x14
 18c:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18e:	8b 89       	ldd	r24, Y+19	; 0x13
 190:	9c 89       	ldd	r25, Y+20	; 0x14
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xf4>
 196:	9c 8b       	std	Y+20, r25	; 0x14
 198:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19a:	89 89       	ldd	r24, Y+17	; 0x11
 19c:	9a 89       	ldd	r25, Y+18	; 0x12
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	9a 8b       	std	Y+18, r25	; 0x12
 1a2:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a4:	89 89       	ldd	r24, Y+17	; 0x11
 1a6:	9a 89       	ldd	r25, Y+18	; 0x12
 1a8:	89 2b       	or	r24, r25
 1aa:	69 f7       	brne	.-38     	; 0x186 <main+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <main+0x136>
 1ae:	6d 85       	ldd	r22, Y+13	; 0x0d
 1b0:	7e 85       	ldd	r23, Y+14	; 0x0e
 1b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1b4:	98 89       	ldd	r25, Y+16	; 0x10
 1b6:	dc d0       	rcall	.+440    	; 0x370 <__fixunssfsi>
 1b8:	dc 01       	movw	r26, r24
 1ba:	cb 01       	movw	r24, r22
 1bc:	9a 8b       	std	Y+18, r25	; 0x12
 1be:	89 8b       	std	Y+17, r24	; 0x11
 1c0:	89 89       	ldd	r24, Y+17	; 0x11
 1c2:	9a 89       	ldd	r25, Y+18	; 0x12
 1c4:	9e 8b       	std	Y+22, r25	; 0x16
 1c6:	8d 8b       	std	Y+21, r24	; 0x15
 1c8:	8d 89       	ldd	r24, Y+21	; 0x15
 1ca:	9e 89       	ldd	r25, Y+22	; 0x16
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x12e>
 1d0:	9e 8b       	std	Y+22, r25	; 0x16
 1d2:	8d 8b       	std	Y+21, r24	; 0x15
    while (1) 
    {
		
		//ADCSRA = 0xC7;
		// 0b1100 0111
		ADCSRA |= (1<<ADSC);				
 1d4:	86 e2       	ldi	r24, 0x26	; 38
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	26 e2       	ldi	r18, 0x26	; 38
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	20 81       	ld	r18, Z
 1e0:	20 64       	ori	r18, 0x40	; 64
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
		while( ( (ADCSRA & 0x40) != 0)){
 1e6:	00 00       	nop
 1e8:	86 e2       	ldi	r24, 0x26	; 38
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	80 74       	andi	r24, 0x40	; 64
 1f6:	99 27       	eor	r25, r25
 1f8:	89 2b       	or	r24, r25
 1fa:	b1 f7       	brne	.-20     	; 0x1e8 <main+0x14a>
			// AD변환이 끝나 0이 되었을때			
			;
		}				
		ADCSRA |= (1<<ADIF);
 1fc:	86 e2       	ldi	r24, 0x26	; 38
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	26 e2       	ldi	r18, 0x26	; 38
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	20 61       	ori	r18, 0x10	; 16
 20a:	fc 01       	movw	r30, r24
		
		//ad_val = ADCL + (ADCH << 8);		
		//unsigned char val = (unsigned char)mapping(ad_val, 0,0xFFFF,0,250);				
		
		UART_Putchar(0xFF);
 20c:	20 83       	st	Z, r18
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	8f d0       	rcall	.+286    	; 0x332 <UART_Putchar>
		UART_Putchar(0xFF);
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	8c d0       	rcall	.+280    	; 0x332 <UART_Putchar>
		
		//UART_Putchar(0x41);
		//UART_Putchar(0x42);
		//UART_Putchar(val);
		UART_Putchar(ADCL); // LOW부터 읽어야 Register 가 Reset 되어 다시 쓸수 있다.
 21a:	84 e2       	ldi	r24, 0x24	; 36
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	85 d0       	rcall	.+266    	; 0x332 <UART_Putchar>
		UART_Putchar(ADCH);		
 228:	85 e2       	ldi	r24, 0x25	; 37
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	80 81       	ld	r24, Z
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
		UART_Putchar(0xFE);
 234:	7e d0       	rcall	.+252    	; 0x332 <UART_Putchar>
 236:	8e ef       	ldi	r24, 0xFE	; 254
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	7b d0       	rcall	.+246    	; 0x332 <UART_Putchar>
		UART_Putchar(0xFE);
 23c:	8e ef       	ldi	r24, 0xFE	; 254
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	78 d0       	rcall	.+240    	; 0x332 <UART_Putchar>
 242:	00 00       	nop
		
		//ADCSRA = 0x00;
		while((UCSR0A & 0x20) == 0x0){
 244:	8b e2       	ldi	r24, 0x2B	; 43
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	80 72       	andi	r24, 0x20	; 32
 252:	99 27       	eor	r25, r25
 254:	89 2b       	or	r24, r25
 256:	b1 f3       	breq	.-20     	; 0x244 <main+0x1a6>
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	aa ef       	ldi	r26, 0xFA	; 250
 25e:	b3 e4       	ldi	r27, 0x43	; 67
 260:	8d 83       	std	Y+5, r24	; 0x05
 262:	9e 83       	std	Y+6, r25	; 0x06
 264:	af 83       	std	Y+7, r26	; 0x07
 266:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	4a e7       	ldi	r20, 0x7A	; 122
 26e:	55 e4       	ldi	r21, 0x45	; 69
 270:	6d 81       	ldd	r22, Y+5	; 0x05
 272:	7e 81       	ldd	r23, Y+6	; 0x06
 274:	8f 81       	ldd	r24, Y+7	; 0x07
 276:	98 85       	ldd	r25, Y+8	; 0x08
 278:	f8 d0       	rcall	.+496    	; 0x46a <__mulsf3>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	8f 8b       	std	Y+23, r24	; 0x17
 280:	98 8f       	std	Y+24, r25	; 0x18
 282:	a9 8f       	std	Y+25, r26	; 0x19
 284:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e8       	ldi	r20, 0x80	; 128
 28c:	5f e3       	ldi	r21, 0x3F	; 63
 28e:	6f 89       	ldd	r22, Y+23	; 0x17
 290:	78 8d       	ldd	r23, Y+24	; 0x18
 292:	89 8d       	ldd	r24, Y+25	; 0x19
 294:	9a 8d       	ldd	r25, Y+26	; 0x1a
 296:	68 d0       	rcall	.+208    	; 0x368 <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	2c f4       	brge	.+10     	; 0x2a6 <main+0x208>
		__ticks = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	9c 8f       	std	Y+28, r25	; 0x1c
 2a2:	8b 8f       	std	Y+27, r24	; 0x1b
 2a4:	3b c0       	rjmp	.+118    	; 0x31c <main+0x27e>
	else if (__tmp > 65535)
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	3f ef       	ldi	r19, 0xFF	; 255
 2aa:	4f e7       	ldi	r20, 0x7F	; 127
 2ac:	57 e4       	ldi	r21, 0x47	; 71
 2ae:	6f 89       	ldd	r22, Y+23	; 0x17
 2b0:	78 8d       	ldd	r23, Y+24	; 0x18
 2b2:	89 8d       	ldd	r24, Y+25	; 0x19
 2b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2b6:	d5 d0       	rcall	.+426    	; 0x462 <__gesf2>
 2b8:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ba:	3c f5       	brge	.+78     	; 0x30a <main+0x26c>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e2       	ldi	r20, 0x20	; 32
 2c2:	51 e4       	ldi	r21, 0x41	; 65
 2c4:	6d 81       	ldd	r22, Y+5	; 0x05
 2c6:	7e 81       	ldd	r23, Y+6	; 0x06
 2c8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ca:	98 85       	ldd	r25, Y+8	; 0x08
 2cc:	ce d0       	rcall	.+412    	; 0x46a <__mulsf3>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	bc 01       	movw	r22, r24
 2d4:	cd 01       	movw	r24, r26
 2d6:	4c d0       	rcall	.+152    	; 0x370 <__fixunssfsi>
 2d8:	dc 01       	movw	r26, r24
 2da:	cb 01       	movw	r24, r22
 2dc:	9c 8f       	std	Y+28, r25	; 0x1c
 2de:	8b 8f       	std	Y+27, r24	; 0x1b
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <main+0x262>
 2e2:	80 e9       	ldi	r24, 0x90	; 144
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	9e 8f       	std	Y+30, r25	; 0x1e
 2e8:	8d 8f       	std	Y+29, r24	; 0x1d
 2ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x250>
 2f2:	9e 8f       	std	Y+30, r25	; 0x1e
 2f4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	9c 8f       	std	Y+28, r25	; 0x1c
 2fe:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 300:	8b 8d       	ldd	r24, Y+27	; 0x1b
 302:	9c 8d       	ldd	r25, Y+28	; 0x1c
 304:	89 2b       	or	r24, r25
 306:	69 f7       	brne	.-38     	; 0x2e2 <main+0x244>
 308:	13 c0       	rjmp	.+38     	; 0x330 <main+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 30a:	6f 89       	ldd	r22, Y+23	; 0x17
 30c:	78 8d       	ldd	r23, Y+24	; 0x18
 30e:	89 8d       	ldd	r24, Y+25	; 0x19
 310:	9a 8d       	ldd	r25, Y+26	; 0x1a
 312:	2e d0       	rcall	.+92     	; 0x370 <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	9c 8f       	std	Y+28, r25	; 0x1c
 31a:	8b 8f       	std	Y+27, r24	; 0x1b
 31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 320:	98 a3       	std	Y+32, r25	; 0x20
 322:	8f 8f       	std	Y+31, r24	; 0x1f
 324:	8f 8d       	ldd	r24, Y+31	; 0x1f
 326:	98 a1       	ldd	r25, Y+32	; 0x20
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x28a>
 32c:	98 a3       	std	Y+32, r25	; 0x20
 32e:	8f 8f       	std	Y+31, r24	; 0x1f
 330:	51 cf       	rjmp	.-350    	; 0x1d4 <main+0x136>

00000332 <UART_Putchar>:
			// 전송버퍼가 비인다면 1로 Set 됨
			;
		}
		
		_delay_ms(500);
    }
 332:	cf 93       	push	r28
	
	
}

void UART_Putchar(unsigned char data){
 334:	df 93       	push	r29
 336:	1f 92       	push	r1
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR0A & 0x20) == 0x0){
 33e:	00 00       	nop
 340:	8b e2       	ldi	r24, 0x2B	; 43
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	88 2f       	mov	r24, r24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	80 72       	andi	r24, 0x20	; 32
 34e:	99 27       	eor	r25, r25
 350:	89 2b       	or	r24, r25
 352:	b1 f3       	breq	.-20     	; 0x340 <UART_Putchar+0xe>
		// UDRE0 이 1이 될때가지 대기
		// 즉 데이터 전송 버퍼가 비일때까지 대기
		// 전송버퍼가 비인다면 1로 Set 됨
		;
	}
	UDR0 = data;
 354:	8c e2       	ldi	r24, 0x2C	; 44
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	29 81       	ldd	r18, Y+1	; 0x01
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
	//데이터 씀
 35e:	00 00       	nop
 360:	0f 90       	pop	r0
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <__cmpsf2>:
 368:	2f d0       	rcall	.+94     	; 0x3c8 <__fp_cmp>
 36a:	08 f4       	brcc	.+2      	; 0x36e <__cmpsf2+0x6>
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret

00000370 <__fixunssfsi>:
 370:	57 d0       	rcall	.+174    	; 0x420 <__fp_splitA>
 372:	88 f0       	brcs	.+34     	; 0x396 <__fixunssfsi+0x26>
 374:	9f 57       	subi	r25, 0x7F	; 127
 376:	90 f0       	brcs	.+36     	; 0x39c <__fixunssfsi+0x2c>
 378:	b9 2f       	mov	r27, r25
 37a:	99 27       	eor	r25, r25
 37c:	b7 51       	subi	r27, 0x17	; 23
 37e:	a0 f0       	brcs	.+40     	; 0x3a8 <__fixunssfsi+0x38>
 380:	d1 f0       	breq	.+52     	; 0x3b6 <__fixunssfsi+0x46>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	1a f0       	brmi	.+6      	; 0x392 <__fixunssfsi+0x22>
 38c:	ba 95       	dec	r27
 38e:	c9 f7       	brne	.-14     	; 0x382 <__fixunssfsi+0x12>
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <__fixunssfsi+0x46>
 392:	b1 30       	cpi	r27, 0x01	; 1
 394:	81 f0       	breq	.+32     	; 0x3b6 <__fixunssfsi+0x46>
 396:	5e d0       	rcall	.+188    	; 0x454 <__fp_zero>
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	08 95       	ret
 39c:	5b c0       	rjmp	.+182    	; 0x454 <__fp_zero>
 39e:	67 2f       	mov	r22, r23
 3a0:	78 2f       	mov	r23, r24
 3a2:	88 27       	eor	r24, r24
 3a4:	b8 5f       	subi	r27, 0xF8	; 248
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <__fixunssfsi+0x46>
 3a8:	b9 3f       	cpi	r27, 0xF9	; 249
 3aa:	cc f3       	brlt	.-14     	; 0x39e <__fixunssfsi+0x2e>
 3ac:	86 95       	lsr	r24
 3ae:	77 95       	ror	r23
 3b0:	67 95       	ror	r22
 3b2:	b3 95       	inc	r27
 3b4:	d9 f7       	brne	.-10     	; 0x3ac <__fixunssfsi+0x3c>
 3b6:	3e f4       	brtc	.+14     	; 0x3c6 <__fixunssfsi+0x56>
 3b8:	90 95       	com	r25
 3ba:	80 95       	com	r24
 3bc:	70 95       	com	r23
 3be:	61 95       	neg	r22
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__fp_cmp>:
 3c8:	99 0f       	add	r25, r25
 3ca:	00 08       	sbc	r0, r0
 3cc:	55 0f       	add	r21, r21
 3ce:	aa 0b       	sbc	r26, r26
 3d0:	e0 e8       	ldi	r30, 0x80	; 128
 3d2:	fe ef       	ldi	r31, 0xFE	; 254
 3d4:	16 16       	cp	r1, r22
 3d6:	17 06       	cpc	r1, r23
 3d8:	e8 07       	cpc	r30, r24
 3da:	f9 07       	cpc	r31, r25
 3dc:	c0 f0       	brcs	.+48     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3de:	12 16       	cp	r1, r18
 3e0:	13 06       	cpc	r1, r19
 3e2:	e4 07       	cpc	r30, r20
 3e4:	f5 07       	cpc	r31, r21
 3e6:	98 f0       	brcs	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e8:	62 1b       	sub	r22, r18
 3ea:	73 0b       	sbc	r23, r19
 3ec:	84 0b       	sbc	r24, r20
 3ee:	95 0b       	sbc	r25, r21
 3f0:	39 f4       	brne	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f2:	0a 26       	eor	r0, r26
 3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f6:	23 2b       	or	r18, r19
 3f8:	24 2b       	or	r18, r20
 3fa:	25 2b       	or	r18, r21
 3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	08 95       	ret
 400:	0a 26       	eor	r0, r26
 402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	a1 40       	sbci	r26, 0x01	; 1
 406:	a6 95       	lsr	r26
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	81 1d       	adc	r24, r1
 40c:	81 1d       	adc	r24, r1
 40e:	08 95       	ret

00000410 <__fp_split3>:
 410:	57 fd       	sbrc	r21, 7
 412:	90 58       	subi	r25, 0x80	; 128
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	59 f0       	breq	.+22     	; 0x430 <__fp_splitA+0x10>
 41a:	5f 3f       	cpi	r21, 0xFF	; 255
 41c:	71 f0       	breq	.+28     	; 0x43a <__fp_splitA+0x1a>
 41e:	47 95       	ror	r20

00000420 <__fp_splitA>:
 420:	88 0f       	add	r24, r24
 422:	97 fb       	bst	r25, 7
 424:	99 1f       	adc	r25, r25
 426:	61 f0       	breq	.+24     	; 0x440 <__fp_splitA+0x20>
 428:	9f 3f       	cpi	r25, 0xFF	; 255
 42a:	79 f0       	breq	.+30     	; 0x44a <__fp_splitA+0x2a>
 42c:	87 95       	ror	r24
 42e:	08 95       	ret
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	55 1f       	adc	r21, r21
 438:	f2 cf       	rjmp	.-28     	; 0x41e <__fp_split3+0xe>
 43a:	46 95       	lsr	r20
 43c:	f1 df       	rcall	.-30     	; 0x420 <__fp_splitA>
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__fp_splitA+0x30>
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	18 06       	cpc	r1, r24
 446:	99 1f       	adc	r25, r25
 448:	f1 cf       	rjmp	.-30     	; 0x42c <__fp_splitA+0xc>
 44a:	86 95       	lsr	r24
 44c:	71 05       	cpc	r23, r1
 44e:	61 05       	cpc	r22, r1
 450:	08 94       	sec
 452:	08 95       	ret

00000454 <__fp_zero>:
 454:	e8 94       	clt

00000456 <__fp_szero>:
 456:	bb 27       	eor	r27, r27
 458:	66 27       	eor	r22, r22
 45a:	77 27       	eor	r23, r23
 45c:	cb 01       	movw	r24, r22
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret

00000462 <__gesf2>:
 462:	b2 df       	rcall	.-156    	; 0x3c8 <__fp_cmp>
 464:	08 f4       	brcc	.+2      	; 0x468 <__gesf2+0x6>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	08 95       	ret

0000046a <__mulsf3>:
 46a:	0b d0       	rcall	.+22     	; 0x482 <__mulsf3x>
 46c:	78 c0       	rjmp	.+240    	; 0x55e <__fp_round>
 46e:	69 d0       	rcall	.+210    	; 0x542 <__fp_pscA>
 470:	28 f0       	brcs	.+10     	; 0x47c <__mulsf3+0x12>
 472:	6e d0       	rcall	.+220    	; 0x550 <__fp_pscB>
 474:	18 f0       	brcs	.+6      	; 0x47c <__mulsf3+0x12>
 476:	95 23       	and	r25, r21
 478:	09 f0       	breq	.+2      	; 0x47c <__mulsf3+0x12>
 47a:	5a c0       	rjmp	.+180    	; 0x530 <__fp_inf>
 47c:	5f c0       	rjmp	.+190    	; 0x53c <__fp_nan>
 47e:	11 24       	eor	r1, r1
 480:	ea cf       	rjmp	.-44     	; 0x456 <__fp_szero>

00000482 <__mulsf3x>:
 482:	c6 df       	rcall	.-116    	; 0x410 <__fp_split3>
 484:	a0 f3       	brcs	.-24     	; 0x46e <__mulsf3+0x4>

00000486 <__mulsf3_pse>:
 486:	95 9f       	mul	r25, r21
 488:	d1 f3       	breq	.-12     	; 0x47e <__mulsf3+0x14>
 48a:	95 0f       	add	r25, r21
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	55 1f       	adc	r21, r21
 490:	62 9f       	mul	r22, r18
 492:	f0 01       	movw	r30, r0
 494:	72 9f       	mul	r23, r18
 496:	bb 27       	eor	r27, r27
 498:	f0 0d       	add	r31, r0
 49a:	b1 1d       	adc	r27, r1
 49c:	63 9f       	mul	r22, r19
 49e:	aa 27       	eor	r26, r26
 4a0:	f0 0d       	add	r31, r0
 4a2:	b1 1d       	adc	r27, r1
 4a4:	aa 1f       	adc	r26, r26
 4a6:	64 9f       	mul	r22, r20
 4a8:	66 27       	eor	r22, r22
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	66 1f       	adc	r22, r22
 4b0:	82 9f       	mul	r24, r18
 4b2:	22 27       	eor	r18, r18
 4b4:	b0 0d       	add	r27, r0
 4b6:	a1 1d       	adc	r26, r1
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 9f       	mul	r23, r19
 4bc:	b0 0d       	add	r27, r0
 4be:	a1 1d       	adc	r26, r1
 4c0:	62 1f       	adc	r22, r18
 4c2:	83 9f       	mul	r24, r19
 4c4:	a0 0d       	add	r26, r0
 4c6:	61 1d       	adc	r22, r1
 4c8:	22 1f       	adc	r18, r18
 4ca:	74 9f       	mul	r23, r20
 4cc:	33 27       	eor	r19, r19
 4ce:	a0 0d       	add	r26, r0
 4d0:	61 1d       	adc	r22, r1
 4d2:	23 1f       	adc	r18, r19
 4d4:	84 9f       	mul	r24, r20
 4d6:	60 0d       	add	r22, r0
 4d8:	21 1d       	adc	r18, r1
 4da:	82 2f       	mov	r24, r18
 4dc:	76 2f       	mov	r23, r22
 4de:	6a 2f       	mov	r22, r26
 4e0:	11 24       	eor	r1, r1
 4e2:	9f 57       	subi	r25, 0x7F	; 127
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	8a f0       	brmi	.+34     	; 0x50a <__mulsf3_pse+0x84>
 4e8:	e1 f0       	breq	.+56     	; 0x522 <__mulsf3_pse+0x9c>
 4ea:	88 23       	and	r24, r24
 4ec:	4a f0       	brmi	.+18     	; 0x500 <__mulsf3_pse+0x7a>
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	bb 1f       	adc	r27, r27
 4f4:	66 1f       	adc	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	50 40       	sbci	r21, 0x00	; 0
 4fe:	a9 f7       	brne	.-22     	; 0x4ea <__mulsf3_pse+0x64>
 500:	9e 3f       	cpi	r25, 0xFE	; 254
 502:	51 05       	cpc	r21, r1
 504:	70 f0       	brcs	.+28     	; 0x522 <__mulsf3_pse+0x9c>
 506:	14 c0       	rjmp	.+40     	; 0x530 <__fp_inf>
 508:	a6 cf       	rjmp	.-180    	; 0x456 <__fp_szero>
 50a:	5f 3f       	cpi	r21, 0xFF	; 255
 50c:	ec f3       	brlt	.-6      	; 0x508 <__mulsf3_pse+0x82>
 50e:	98 3e       	cpi	r25, 0xE8	; 232
 510:	dc f3       	brlt	.-10     	; 0x508 <__mulsf3_pse+0x82>
 512:	86 95       	lsr	r24
 514:	77 95       	ror	r23
 516:	67 95       	ror	r22
 518:	b7 95       	ror	r27
 51a:	f7 95       	ror	r31
 51c:	e7 95       	ror	r30
 51e:	9f 5f       	subi	r25, 0xFF	; 255
 520:	c1 f7       	brne	.-16     	; 0x512 <__mulsf3_pse+0x8c>
 522:	fe 2b       	or	r31, r30
 524:	88 0f       	add	r24, r24
 526:	91 1d       	adc	r25, r1
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret

00000530 <__fp_inf>:
 530:	97 f9       	bld	r25, 7
 532:	9f 67       	ori	r25, 0x7F	; 127
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	08 95       	ret

0000053c <__fp_nan>:
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	80 ec       	ldi	r24, 0xC0	; 192
 540:	08 95       	ret

00000542 <__fp_pscA>:
 542:	00 24       	eor	r0, r0
 544:	0a 94       	dec	r0
 546:	16 16       	cp	r1, r22
 548:	17 06       	cpc	r1, r23
 54a:	18 06       	cpc	r1, r24
 54c:	09 06       	cpc	r0, r25
 54e:	08 95       	ret

00000550 <__fp_pscB>:
 550:	00 24       	eor	r0, r0
 552:	0a 94       	dec	r0
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	14 06       	cpc	r1, r20
 55a:	05 06       	cpc	r0, r21
 55c:	08 95       	ret

0000055e <__fp_round>:
 55e:	09 2e       	mov	r0, r25
 560:	03 94       	inc	r0
 562:	00 0c       	add	r0, r0
 564:	11 f4       	brne	.+4      	; 0x56a <__fp_round+0xc>
 566:	88 23       	and	r24, r24
 568:	52 f0       	brmi	.+20     	; 0x57e <__fp_round+0x20>
 56a:	bb 0f       	add	r27, r27
 56c:	40 f4       	brcc	.+16     	; 0x57e <__fp_round+0x20>
 56e:	bf 2b       	or	r27, r31
 570:	11 f4       	brne	.+4      	; 0x576 <__fp_round+0x18>
 572:	60 ff       	sbrs	r22, 0
 574:	04 c0       	rjmp	.+8      	; 0x57e <__fp_round+0x20>
 576:	6f 5f       	subi	r22, 0xFF	; 255
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
