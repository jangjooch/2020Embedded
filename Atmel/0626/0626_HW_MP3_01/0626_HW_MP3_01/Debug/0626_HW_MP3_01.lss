
0626_HW_MP3_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000089a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b77  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000883  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051e  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000139  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000028cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	d3 c3       	rjmp	.+1958   	; 0x842 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int returnChecksum(char _ver, char _len, char _cmd, char _param1, char _param2);


int main(void)
{
  9e:	0f 93       	push	r16
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	ca 54       	subi	r28, 0x4A	; 74
  aa:	d1 09       	sbc	r29, r1
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	UCSR0A = 0x00;	
  b6:	8b e2       	ldi	r24, 0x2B	; 43
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
	UCSR0B = 0x08;	
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	28 e0       	ldi	r18, 0x08	; 8
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	UCSR0C = 0x06;	
  c8:	85 e9       	ldi	r24, 0x95	; 149
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	UBRR0H = 0;
  d2:	80 e9       	ldi	r24, 0x90	; 144
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
	UBRR0L = 103; //buad Rate
  da:	89 e2       	ldi	r24, 0x29	; 41
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	27 e6       	ldi	r18, 0x67	; 103
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	
	UCSR1A = 0x00;
  e4:	8b e9       	ldi	r24, 0x9B	; 155
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	10 82       	st	Z, r1
	// RXCn TXCn UDREn FEn | DORn UPEn U2Xn MPCMn
	// 비동기 방식
	// 멀티프로세서 통신모드 Enable -> 0이 Enable임
	UCSR1B = 0x08;
  ec:	8a e9       	ldi	r24, 0x9A	; 154
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 e0       	ldi	r18, 0x08	; 8
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	// RXCIEn TXCIEn UDRIEn RXENn | TNENn UCSZ2n RXB8n TXB8n		
	// TNENn 송신기 Enable Set
	UCSR1C = 0x06;
  f6:	8d e9       	ldi	r24, 0x9D	; 157
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	26 e0       	ldi	r18, 0x06	; 6
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	// UMSELn UPMn1 UPMn0 USBSn | UCSZn1 UCSZn0 UCPOLn
	// 비동기 모드
	// 패리티모드 사용 안함
	// UCSZn1 UCSZn0 -> 전송 데이터 비트 수 설정.-> 011 = 8비트. 즉 char단위
	// 클럭 극성 선택 X. 동기모드에서만 사용
	UBRR1H = 0;
 100:	88 e9       	ldi	r24, 0x98	; 152
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	10 82       	st	Z, r1
	UBRR1L = 103; //buad Rate
 108:	89 e9       	ldi	r24, 0x99	; 153
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	27 e6       	ldi	r18, 0x67	; 103
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	
	union cmd start;
	start.comands[0] = 0x7E;
 112:	8e e7       	ldi	r24, 0x7E	; 126
 114:	8f ab       	std	Y+55, r24	; 0x37
	// start
	start.comands[1] = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	88 af       	std	Y+56, r24	; 0x38
	// version
	start.comands[2] = 0x06;
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	89 af       	std	Y+57, r24	; 0x39
	// Len
	start.comands[3] = 0x09;
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	8a af       	std	Y+58, r24	; 0x3a
	// CMD
	start.comands[4] = 0x00;
 122:	1b ae       	std	Y+59, r1	; 0x3b
	// Feedback
	start.comands[5] = 0x00;
 124:	1c ae       	std	Y+60, r1	; 0x3c
	// parameter1
	start.comands[6] = 0x02; // start Param U/TF/AUX/SLEEP/FLASH
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	8d af       	std	Y+61, r24	; 0x3d
	// parameter2
	int start_check = returnChecksum(start.comands[1], start.comands[2], start.comands[3], start.comands[5], start.comands[6]);
 12a:	4d ad       	ldd	r20, Y+61	; 0x3d
 12c:	2c ad       	ldd	r18, Y+60	; 0x3c
 12e:	3a ad       	ldd	r19, Y+58	; 0x3a
 130:	99 ad       	ldd	r25, Y+57	; 0x39
 132:	88 ad       	ldd	r24, Y+56	; 0x38
 134:	04 2f       	mov	r16, r20
 136:	43 2f       	mov	r20, r19
 138:	69 2f       	mov	r22, r25
 13a:	3a d2       	rcall	.+1140   	; 0x5b0 <returnChecksum>
 13c:	98 87       	std	Y+8, r25	; 0x08
 13e:	8f 83       	std	Y+7, r24	; 0x07
	int test = 0 - (0xFF + 0x06 + 0x09 + 0x01);
 140:	81 ef       	ldi	r24, 0xF1	; 241
 142:	9e ef       	ldi	r25, 0xFE	; 254
 144:	9a 87       	std	Y+10, r25	; 0x0a
 146:	89 87       	std	Y+9, r24	; 0x09
	//start.comands[7] = (char)(start_check >>8);
	start.comands[7] = ((char)(test >> 8));
 148:	89 85       	ldd	r24, Y+9	; 0x09
 14a:	9a 85       	ldd	r25, Y+10	; 0x0a
 14c:	89 2f       	mov	r24, r25
 14e:	99 0f       	add	r25, r25
 150:	99 0b       	sbc	r25, r25
 152:	8e af       	std	Y+62, r24	; 0x3e
	// checksum H
	//start.comands[8] = (char)(start_check & 0xFF);
	start.comands[8] = ((char)(test & 0x00FF));
 154:	89 85       	ldd	r24, Y+9	; 0x09
 156:	8f af       	std	Y+63, r24	; 0x3f
	// checksum L
	start.comands[9] = 0xEF;
 158:	2f ee       	ldi	r18, 0xEF	; 239
 15a:	ce 01       	movw	r24, r28
 15c:	80 5c       	subi	r24, 0xC0	; 192
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	// END
	
	union cmd doit;
	doit.comands[0] = 0x7E;
 164:	ce 01       	movw	r24, r28
 166:	8f 5b       	subi	r24, 0xBF	; 191
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	2e e7       	ldi	r18, 0x7E	; 126
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	// start
	doit.comands[1] = 0xFF;
 170:	ce 01       	movw	r24, r28
 172:	8f 5b       	subi	r24, 0xBF	; 191
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	21 83       	std	Z+1, r18	; 0x01
	// version
	doit.comands[2] = 0x06;
 17c:	ce 01       	movw	r24, r28
 17e:	8f 5b       	subi	r24, 0xBF	; 191
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	26 e0       	ldi	r18, 0x06	; 6
 184:	fc 01       	movw	r30, r24
 186:	22 83       	std	Z+2, r18	; 0x02
	// Len
	doit.comands[3] = 0x01;
 188:	ce 01       	movw	r24, r28
 18a:	8f 5b       	subi	r24, 0xBF	; 191
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	23 83       	std	Z+3, r18	; 0x03
	// CMD
	doit.comands[4] = 0x00;
 194:	ce 01       	movw	r24, r28
 196:	8f 5b       	subi	r24, 0xBF	; 191
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	fc 01       	movw	r30, r24
 19c:	14 82       	std	Z+4, r1	; 0x04
	// Feedback
	doit.comands[5] = 0x00;
 19e:	ce 01       	movw	r24, r28
 1a0:	8f 5b       	subi	r24, 0xBF	; 191
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	fc 01       	movw	r30, r24
 1a6:	15 82       	std	Z+5, r1	; 0x05
	// parameter1
	doit.comands[6] = 0x00; 
 1a8:	ce 01       	movw	r24, r28
 1aa:	8f 5b       	subi	r24, 0xBF	; 191
 1ac:	9f 4f       	sbci	r25, 0xFF	; 255
 1ae:	fc 01       	movw	r30, r24
 1b0:	16 82       	std	Z+6, r1	; 0x06
	// parameter2
	int doit_check = returnChecksum(doit.comands[1], doit.comands[2], doit.comands[3], doit.comands[5], doit.comands[6]);
 1b2:	ce 01       	movw	r24, r28
 1b4:	8f 5b       	subi	r24, 0xBF	; 191
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	fc 01       	movw	r30, r24
 1ba:	56 81       	ldd	r21, Z+6	; 0x06
 1bc:	ce 01       	movw	r24, r28
 1be:	8f 5b       	subi	r24, 0xBF	; 191
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	fc 01       	movw	r30, r24
 1c4:	25 81       	ldd	r18, Z+5	; 0x05
 1c6:	ce 01       	movw	r24, r28
 1c8:	8f 5b       	subi	r24, 0xBF	; 191
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	fc 01       	movw	r30, r24
 1ce:	43 81       	ldd	r20, Z+3	; 0x03
 1d0:	ce 01       	movw	r24, r28
 1d2:	8f 5b       	subi	r24, 0xBF	; 191
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	32 81       	ldd	r19, Z+2	; 0x02
 1da:	ce 01       	movw	r24, r28
 1dc:	8f 5b       	subi	r24, 0xBF	; 191
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	81 81       	ldd	r24, Z+1	; 0x01
 1e4:	05 2f       	mov	r16, r21
 1e6:	63 2f       	mov	r22, r19
 1e8:	e3 d1       	rcall	.+966    	; 0x5b0 <returnChecksum>
 1ea:	9c 87       	std	Y+12, r25	; 0x0c
 1ec:	8b 87       	std	Y+11, r24	; 0x0b
	test = 0 - (0xFF + 0x06 + 0x01);
 1ee:	8a ef       	ldi	r24, 0xFA	; 250
 1f0:	9e ef       	ldi	r25, 0xFE	; 254
 1f2:	9a 87       	std	Y+10, r25	; 0x0a
 1f4:	89 87       	std	Y+9, r24	; 0x09
	doit.comands[7] = ((char)(test >> 8));
 1f6:	89 85       	ldd	r24, Y+9	; 0x09
 1f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1fa:	89 2f       	mov	r24, r25
 1fc:	99 0f       	add	r25, r25
 1fe:	99 0b       	sbc	r25, r25
 200:	28 2f       	mov	r18, r24
 202:	ce 01       	movw	r24, r28
 204:	8f 5b       	subi	r24, 0xBF	; 191
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	fc 01       	movw	r30, r24
 20a:	27 83       	std	Z+7, r18	; 0x07
	// checksum H
	doit.comands[8] = ((char)(test & 0x00FF));
 20c:	29 85       	ldd	r18, Y+9	; 0x09
 20e:	ce 01       	movw	r24, r28
 210:	8f 5b       	subi	r24, 0xBF	; 191
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	fc 01       	movw	r30, r24
 216:	20 87       	std	Z+8, r18	; 0x08
	// checksum L
	doit.comands[9] = 0xEF;
 218:	ce 01       	movw	r24, r28
 21a:	8f 5b       	subi	r24, 0xBF	; 191
 21c:	9f 4f       	sbci	r25, 0xFF	; 255
 21e:	2f ee       	ldi	r18, 0xEF	; 239
 220:	fc 01       	movw	r30, r24
 222:	21 87       	std	Z+9, r18	; 0x09
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	a8 ec       	ldi	r26, 0xC8	; 200
 22a:	b2 e4       	ldi	r27, 0x42	; 66
 22c:	8d 8b       	std	Y+21, r24	; 0x15
 22e:	9e 8b       	std	Y+22, r25	; 0x16
 230:	af 8b       	std	Y+23, r26	; 0x17
 232:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	4a e7       	ldi	r20, 0x7A	; 122
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	6d 89       	ldd	r22, Y+21	; 0x15
 23e:	7e 89       	ldd	r23, Y+22	; 0x16
 240:	8f 89       	ldd	r24, Y+23	; 0x17
 242:	98 8d       	ldd	r25, Y+24	; 0x18
 244:	73 d2       	rcall	.+1254   	; 0x72c <__mulsf3>
 246:	dc 01       	movw	r26, r24
 248:	cb 01       	movw	r24, r22
 24a:	89 8f       	std	Y+25, r24	; 0x19
 24c:	9a 8f       	std	Y+26, r25	; 0x1a
 24e:	ab 8f       	std	Y+27, r26	; 0x1b
 250:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e8       	ldi	r20, 0x80	; 128
 258:	5f e3       	ldi	r21, 0x3F	; 63
 25a:	69 8d       	ldd	r22, Y+25	; 0x19
 25c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 25e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 260:	9c 8d       	ldd	r25, Y+28	; 0x1c
 262:	e3 d1       	rcall	.+966    	; 0x62a <__cmpsf2>
 264:	88 23       	and	r24, r24
 266:	2c f4       	brge	.+10     	; 0x272 <main+0x1d4>
		__ticks = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9e 8f       	std	Y+30, r25	; 0x1e
 26e:	8d 8f       	std	Y+29, r24	; 0x1d
 270:	3b c0       	rjmp	.+118    	; 0x2e8 <main+0x24a>
	else if (__tmp > 65535)
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	3f ef       	ldi	r19, 0xFF	; 255
 276:	4f e7       	ldi	r20, 0x7F	; 127
 278:	57 e4       	ldi	r21, 0x47	; 71
 27a:	69 8d       	ldd	r22, Y+25	; 0x19
 27c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 27e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 280:	9c 8d       	ldd	r25, Y+28	; 0x1c
 282:	50 d2       	rcall	.+1184   	; 0x724 <__gesf2>
 284:	18 16       	cp	r1, r24
 286:	3c f5       	brge	.+78     	; 0x2d6 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e2       	ldi	r20, 0x20	; 32
 28e:	51 e4       	ldi	r21, 0x41	; 65
 290:	6d 89       	ldd	r22, Y+21	; 0x15
 292:	7e 89       	ldd	r23, Y+22	; 0x16
 294:	8f 89       	ldd	r24, Y+23	; 0x17
 296:	98 8d       	ldd	r25, Y+24	; 0x18
 298:	49 d2       	rcall	.+1170   	; 0x72c <__mulsf3>
 29a:	dc 01       	movw	r26, r24
 29c:	cb 01       	movw	r24, r22
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	c7 d1       	rcall	.+910    	; 0x632 <__fixunssfsi>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	9e 8f       	std	Y+30, r25	; 0x1e
 2aa:	8d 8f       	std	Y+29, r24	; 0x1d
 2ac:	0f c0       	rjmp	.+30     	; 0x2cc <main+0x22e>
 2ae:	80 e9       	ldi	r24, 0x90	; 144
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	98 a3       	std	Y+32, r25	; 0x20
 2b4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2b8:	98 a1       	ldd	r25, Y+32	; 0x20
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x21c>
 2be:	98 a3       	std	Y+32, r25	; 0x20
 2c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	9e 8f       	std	Y+30, r25	; 0x1e
 2ca:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2d0:	89 2b       	or	r24, r25
 2d2:	69 f7       	brne	.-38     	; 0x2ae <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2d4:	13 c0       	rjmp	.+38     	; 0x2fc <main+0x25e>
 2d6:	69 8d       	ldd	r22, Y+25	; 0x19
 2d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2da:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2de:	a9 d1       	rcall	.+850    	; 0x632 <__fixunssfsi>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	9e 8f       	std	Y+30, r25	; 0x1e
 2e6:	8d 8f       	std	Y+29, r24	; 0x1d
 2e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ec:	9a a3       	std	Y+34, r25	; 0x22
 2ee:	89 a3       	std	Y+33, r24	; 0x21
 2f0:	89 a1       	ldd	r24, Y+33	; 0x21
 2f2:	9a a1       	ldd	r25, Y+34	; 0x22
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x256>
 2f8:	9a a3       	std	Y+34, r25	; 0x22
 2fa:	89 a3       	std	Y+33, r24	; 0x21
		UART1_Putchar(*p++);
	}
	*/
	
    /* Replace with your application code */
	for(int i = 0 ; i < 10 ; i ++){
 2fc:	1a 82       	std	Y+2, r1	; 0x02
 2fe:	19 82       	std	Y+1, r1	; 0x01
 300:	12 c0       	rjmp	.+36     	; 0x326 <main+0x288>
		UART1_Putchar(start.comands[i]);
 302:	9e 01       	movw	r18, r28
 304:	29 5c       	subi	r18, 0xC9	; 201
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	82 0f       	add	r24, r18
 30e:	93 1f       	adc	r25, r19
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	08 2e       	mov	r0, r24
 316:	00 0c       	add	r0, r0
 318:	99 0b       	sbc	r25, r25
 31a:	14 d1       	rcall	.+552    	; 0x544 <UART1_Putchar>
		UART1_Putchar(*p++);
	}
	*/
	
    /* Replace with your application code */
	for(int i = 0 ; i < 10 ; i ++){
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	0a 97       	sbiw	r24, 0x0a	; 10
 32c:	54 f3       	brlt	.-44     	; 0x302 <main+0x264>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	aa e7       	ldi	r26, 0x7A	; 122
 334:	b4 e4       	ldi	r27, 0x44	; 68
 336:	8d 87       	std	Y+13, r24	; 0x0d
 338:	9e 87       	std	Y+14, r25	; 0x0e
 33a:	af 87       	std	Y+15, r26	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33c:	b8 8b       	std	Y+16, r27	; 0x10
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	4a e7       	ldi	r20, 0x7A	; 122
 344:	55 e4       	ldi	r21, 0x45	; 69
 346:	6d 85       	ldd	r22, Y+13	; 0x0d
 348:	7e 85       	ldd	r23, Y+14	; 0x0e
 34a:	8f 85       	ldd	r24, Y+15	; 0x0f
 34c:	98 89       	ldd	r25, Y+16	; 0x10
 34e:	ee d1       	rcall	.+988    	; 0x72c <__mulsf3>
 350:	dc 01       	movw	r26, r24
 352:	cb 01       	movw	r24, r22
 354:	8b a3       	std	Y+35, r24	; 0x23
 356:	9c a3       	std	Y+36, r25	; 0x24
 358:	ad a3       	std	Y+37, r26	; 0x25
	if (__tmp < 1.0)
 35a:	be a3       	std	Y+38, r27	; 0x26
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e8       	ldi	r20, 0x80	; 128
 362:	5f e3       	ldi	r21, 0x3F	; 63
 364:	6b a1       	ldd	r22, Y+35	; 0x23
 366:	7c a1       	ldd	r23, Y+36	; 0x24
 368:	8d a1       	ldd	r24, Y+37	; 0x25
 36a:	9e a1       	ldd	r25, Y+38	; 0x26
 36c:	5e d1       	rcall	.+700    	; 0x62a <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <main+0x2de>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 a7       	std	Y+40, r25	; 0x28
 378:	8f a3       	std	Y+39, r24	; 0x27
	else if (__tmp > 65535)
 37a:	3b c0       	rjmp	.+118    	; 0x3f2 <main+0x354>
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	3f ef       	ldi	r19, 0xFF	; 255
 380:	4f e7       	ldi	r20, 0x7F	; 127
 382:	57 e4       	ldi	r21, 0x47	; 71
 384:	6b a1       	ldd	r22, Y+35	; 0x23
 386:	7c a1       	ldd	r23, Y+36	; 0x24
 388:	8d a1       	ldd	r24, Y+37	; 0x25
 38a:	9e a1       	ldd	r25, Y+38	; 0x26
 38c:	cb d1       	rcall	.+918    	; 0x724 <__gesf2>
 38e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 390:	3c f5       	brge	.+78     	; 0x3e0 <main+0x342>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e2       	ldi	r20, 0x20	; 32
 398:	51 e4       	ldi	r21, 0x41	; 65
 39a:	6d 85       	ldd	r22, Y+13	; 0x0d
 39c:	7e 85       	ldd	r23, Y+14	; 0x0e
 39e:	8f 85       	ldd	r24, Y+15	; 0x0f
 3a0:	98 89       	ldd	r25, Y+16	; 0x10
 3a2:	c4 d1       	rcall	.+904    	; 0x72c <__mulsf3>
 3a4:	dc 01       	movw	r26, r24
 3a6:	cb 01       	movw	r24, r22
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	42 d1       	rcall	.+644    	; 0x632 <__fixunssfsi>
 3ae:	dc 01       	movw	r26, r24
 3b0:	cb 01       	movw	r24, r22
 3b2:	98 a7       	std	Y+40, r25	; 0x28
 3b4:	8f a3       	std	Y+39, r24	; 0x27
 3b6:	0f c0       	rjmp	.+30     	; 0x3d6 <main+0x338>
 3b8:	80 e9       	ldi	r24, 0x90	; 144
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	9a a7       	std	Y+42, r25	; 0x2a
 3be:	89 a7       	std	Y+41, r24	; 0x29
 3c0:	89 a5       	ldd	r24, Y+41	; 0x29
 3c2:	9a a5       	ldd	r25, Y+42	; 0x2a
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x326>
 3c8:	9a a7       	std	Y+42, r25	; 0x2a
 3ca:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3cc:	8f a1       	ldd	r24, Y+39	; 0x27
 3ce:	98 a5       	ldd	r25, Y+40	; 0x28
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	98 a7       	std	Y+40, r25	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d4:	8f a3       	std	Y+39, r24	; 0x27
 3d6:	8f a1       	ldd	r24, Y+39	; 0x27
 3d8:	98 a5       	ldd	r25, Y+40	; 0x28
 3da:	89 2b       	or	r24, r25
 3dc:	69 f7       	brne	.-38     	; 0x3b8 <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3de:	13 c0       	rjmp	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e0:	6b a1       	ldd	r22, Y+35	; 0x23
 3e2:	7c a1       	ldd	r23, Y+36	; 0x24
 3e4:	8d a1       	ldd	r24, Y+37	; 0x25
 3e6:	9e a1       	ldd	r25, Y+38	; 0x26
 3e8:	24 d1       	rcall	.+584    	; 0x632 <__fixunssfsi>
 3ea:	dc 01       	movw	r26, r24
 3ec:	cb 01       	movw	r24, r22
 3ee:	98 a7       	std	Y+40, r25	; 0x28
 3f0:	8f a3       	std	Y+39, r24	; 0x27
 3f2:	8f a1       	ldd	r24, Y+39	; 0x27
 3f4:	98 a5       	ldd	r25, Y+40	; 0x28
 3f6:	9c a7       	std	Y+44, r25	; 0x2c
 3f8:	8b a7       	std	Y+43, r24	; 0x2b
 3fa:	8b a5       	ldd	r24, Y+43	; 0x2b
 3fc:	9c a5       	ldd	r25, Y+44	; 0x2c
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x360>
 402:	9c a7       	std	Y+44, r25	; 0x2c
 404:	8b a7       	std	Y+43, r24	; 0x2b
		UART1_Putchar(start.comands[i]);
	}
	_delay_ms(1000);
	for(int i = 0 ; i < 10 ; i ++){
 406:	1c 82       	std	Y+4, r1	; 0x04
 408:	1b 82       	std	Y+3, r1	; 0x03
		UART1_Putchar(doit.comands[i]);
 40a:	12 c0       	rjmp	.+36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40c:	9e 01       	movw	r18, r28
 40e:	2f 5b       	subi	r18, 0xBF	; 191
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	9c 81       	ldd	r25, Y+4	; 0x04
 416:	82 0f       	add	r24, r18
 418:	93 1f       	adc	r25, r19
 41a:	fc 01       	movw	r30, r24
 41c:	80 81       	ld	r24, Z
 41e:	08 2e       	mov	r0, r24
 420:	00 0c       	add	r0, r0
 422:	99 0b       	sbc	r25, r25
 424:	8f d0       	rcall	.+286    	; 0x544 <UART1_Putchar>
    /* Replace with your application code */
	for(int i = 0 ; i < 10 ; i ++){
		UART1_Putchar(start.comands[i]);
	}
	_delay_ms(1000);
	for(int i = 0 ; i < 10 ; i ++){
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	9c 81       	ldd	r25, Y+4	; 0x04
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	9c 83       	std	Y+4, r25	; 0x04
 42e:	8b 83       	std	Y+3, r24	; 0x03
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	9c 81       	ldd	r25, Y+4	; 0x04
 434:	0a 97       	sbiw	r24, 0x0a	; 10
	}
	
    while (1) 
    {		
		
		for(int i = 0 ; i < 10 ; i ++){
 436:	54 f3       	brlt	.-44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 438:	1e 82       	std	Y+6, r1	; 0x06
 43a:	1d 82       	std	Y+5, r1	; 0x05
			UART0_Putchar(doit.comands[i]);
 43c:	12 c0       	rjmp	.+36     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 43e:	9e 01       	movw	r18, r28
 440:	2f 5b       	subi	r18, 0xBF	; 191
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	8d 81       	ldd	r24, Y+5	; 0x05
 446:	9e 81       	ldd	r25, Y+6	; 0x06
 448:	82 0f       	add	r24, r18
 44a:	93 1f       	adc	r25, r19
 44c:	fc 01       	movw	r30, r24
 44e:	80 81       	ld	r24, Z
 450:	08 2e       	mov	r0, r24
 452:	00 0c       	add	r0, r0
 454:	99 0b       	sbc	r25, r25
 456:	91 d0       	rcall	.+290    	; 0x57a <UART0_Putchar>
	}
	
    while (1) 
    {		
		
		for(int i = 0 ; i < 10 ; i ++){
 458:	8d 81       	ldd	r24, Y+5	; 0x05
 45a:	9e 81       	ldd	r25, Y+6	; 0x06
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	9e 83       	std	Y+6, r25	; 0x06
 460:	8d 83       	std	Y+5, r24	; 0x05
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	0a 97       	sbiw	r24, 0x0a	; 10
 468:	54 f3       	brlt	.-44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	aa e7       	ldi	r26, 0x7A	; 122
 470:	b4 e4       	ldi	r27, 0x44	; 68
 472:	89 8b       	std	Y+17, r24	; 0x11
 474:	9a 8b       	std	Y+18, r25	; 0x12
 476:	ab 8b       	std	Y+19, r26	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 478:	bc 8b       	std	Y+20, r27	; 0x14
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	4a e7       	ldi	r20, 0x7A	; 122
 480:	55 e4       	ldi	r21, 0x45	; 69
 482:	69 89       	ldd	r22, Y+17	; 0x11
 484:	7a 89       	ldd	r23, Y+18	; 0x12
 486:	8b 89       	ldd	r24, Y+19	; 0x13
 488:	9c 89       	ldd	r25, Y+20	; 0x14
 48a:	50 d1       	rcall	.+672    	; 0x72c <__mulsf3>
 48c:	dc 01       	movw	r26, r24
 48e:	cb 01       	movw	r24, r22
 490:	8d a7       	std	Y+45, r24	; 0x2d
 492:	9e a7       	std	Y+46, r25	; 0x2e
 494:	af a7       	std	Y+47, r26	; 0x2f
	if (__tmp < 1.0)
 496:	b8 ab       	std	Y+48, r27	; 0x30
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e8       	ldi	r20, 0x80	; 128
 49e:	5f e3       	ldi	r21, 0x3F	; 63
 4a0:	6d a5       	ldd	r22, Y+45	; 0x2d
 4a2:	7e a5       	ldd	r23, Y+46	; 0x2e
 4a4:	8f a5       	ldd	r24, Y+47	; 0x2f
 4a6:	98 a9       	ldd	r25, Y+48	; 0x30
 4a8:	c0 d0       	rcall	.+384    	; 0x62a <__cmpsf2>
 4aa:	88 23       	and	r24, r24
		__ticks = 1;
 4ac:	2c f4       	brge	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	9a ab       	std	Y+50, r25	; 0x32
 4b4:	89 ab       	std	Y+49, r24	; 0x31
	else if (__tmp > 65535)
 4b6:	3b c0       	rjmp	.+118    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	3f ef       	ldi	r19, 0xFF	; 255
 4bc:	4f e7       	ldi	r20, 0x7F	; 127
 4be:	57 e4       	ldi	r21, 0x47	; 71
 4c0:	6d a5       	ldd	r22, Y+45	; 0x2d
 4c2:	7e a5       	ldd	r23, Y+46	; 0x2e
 4c4:	8f a5       	ldd	r24, Y+47	; 0x2f
 4c6:	98 a9       	ldd	r25, Y+48	; 0x30
 4c8:	2d d1       	rcall	.+602    	; 0x724 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ca:	18 16       	cp	r1, r24
 4cc:	3c f5       	brge	.+78     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e2       	ldi	r20, 0x20	; 32
 4d4:	51 e4       	ldi	r21, 0x41	; 65
 4d6:	69 89       	ldd	r22, Y+17	; 0x11
 4d8:	7a 89       	ldd	r23, Y+18	; 0x12
 4da:	8b 89       	ldd	r24, Y+19	; 0x13
 4dc:	9c 89       	ldd	r25, Y+20	; 0x14
 4de:	26 d1       	rcall	.+588    	; 0x72c <__mulsf3>
 4e0:	dc 01       	movw	r26, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	bc 01       	movw	r22, r24
 4e6:	cd 01       	movw	r24, r26
 4e8:	a4 d0       	rcall	.+328    	; 0x632 <__fixunssfsi>
 4ea:	dc 01       	movw	r26, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	9a ab       	std	Y+50, r25	; 0x32
 4f0:	89 ab       	std	Y+49, r24	; 0x31
 4f2:	0f c0       	rjmp	.+30     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4f4:	80 e9       	ldi	r24, 0x90	; 144
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	9c ab       	std	Y+52, r25	; 0x34
 4fa:	8b ab       	std	Y+51, r24	; 0x33
 4fc:	8b a9       	ldd	r24, Y+51	; 0x33
 4fe:	9c a9       	ldd	r25, Y+52	; 0x34
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 504:	9c ab       	std	Y+52, r25	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 506:	8b ab       	std	Y+51, r24	; 0x33
 508:	89 a9       	ldd	r24, Y+49	; 0x31
 50a:	9a a9       	ldd	r25, Y+50	; 0x32
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	9a ab       	std	Y+50, r25	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 510:	89 ab       	std	Y+49, r24	; 0x31
 512:	89 a9       	ldd	r24, Y+49	; 0x31
 514:	9a a9       	ldd	r25, Y+50	; 0x32
 516:	89 2b       	or	r24, r25
 518:	69 f7       	brne	.-38     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 51a:	13 c0       	rjmp	.+38     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 51c:	6d a5       	ldd	r22, Y+45	; 0x2d
 51e:	7e a5       	ldd	r23, Y+46	; 0x2e
 520:	8f a5       	ldd	r24, Y+47	; 0x2f
 522:	98 a9       	ldd	r25, Y+48	; 0x30
 524:	86 d0       	rcall	.+268    	; 0x632 <__fixunssfsi>
 526:	dc 01       	movw	r26, r24
 528:	cb 01       	movw	r24, r22
 52a:	9a ab       	std	Y+50, r25	; 0x32
 52c:	89 ab       	std	Y+49, r24	; 0x31
 52e:	89 a9       	ldd	r24, Y+49	; 0x31
 530:	9a a9       	ldd	r25, Y+50	; 0x32
 532:	9e ab       	std	Y+54, r25	; 0x36
 534:	8d ab       	std	Y+53, r24	; 0x35
 536:	8d a9       	ldd	r24, Y+53	; 0x35
 538:	9e a9       	ldd	r25, Y+54	; 0x36
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 53e:	9e ab       	std	Y+54, r25	; 0x36
 540:	8d ab       	std	Y+53, r24	; 0x35
			UART0_Putchar(doit.comands[i]);
		}
		_delay_ms(1000);
    }
 542:	7a cf       	rjmp	.-268    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

00000544 <UART1_Putchar>:
}
void UART1_Putchar(char data){
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	1f 92       	push	r1
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR1A & 0x20) == 0x0){
 550:	00 00       	nop
 552:	8b e9       	ldi	r24, 0x9B	; 155
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	80 81       	ld	r24, Z
 55a:	88 2f       	mov	r24, r24
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	80 72       	andi	r24, 0x20	; 32
 560:	99 27       	eor	r25, r25
 562:	89 2b       	or	r24, r25
 564:	b1 f3       	breq	.-20     	; 0x552 <UART1_Putchar+0xe>
		// UDRE0 이 1이 될때가지 대기
		// 즉 데이터 전송 버퍼가 비일때까지 대기
		// 전송버퍼가 비인다면 1로 Set 됨
		;
	}
	UDR1 = data;
 566:	8c e9       	ldi	r24, 0x9C	; 156
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	29 81       	ldd	r18, Y+1	; 0x01
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
	//데이터 씀
}
 570:	00 00       	nop
 572:	0f 90       	pop	r0
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <UART0_Putchar>:

void UART0_Putchar(char data){
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	1f 92       	push	r1
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR0A & 0x20) == 0x0){
 586:	00 00       	nop
 588:	8b e2       	ldi	r24, 0x2B	; 43
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	80 72       	andi	r24, 0x20	; 32
 596:	99 27       	eor	r25, r25
 598:	89 2b       	or	r24, r25
 59a:	b1 f3       	breq	.-20     	; 0x588 <UART0_Putchar+0xe>
		// UDRE0 이 1이 될때가지 대기
		// 즉 데이터 전송 버퍼가 비일때까지 대기
		// 전송버퍼가 비인다면 1로 Set 됨
		;
	}
	UDR0 = data;
 59c:	8c e2       	ldi	r24, 0x2C	; 44
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	29 81       	ldd	r18, Y+1	; 0x01
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
	//데이터 씀
}
 5a6:	00 00       	nop
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <returnChecksum>:

int returnChecksum(char _ver, char _len, char _cmd, char _param1, char _param2){
 5b0:	0f 93       	push	r16
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	27 97       	sbiw	r28, 0x07	; 7
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	8b 83       	std	Y+3, r24	; 0x03
 5c8:	6c 83       	std	Y+4, r22	; 0x04
 5ca:	4d 83       	std	Y+5, r20	; 0x05
 5cc:	2e 83       	std	Y+6, r18	; 0x06
 5ce:	0f 83       	std	Y+7, r16	; 0x07
	int result = 0 - (_ver + _len + _cmd + _param1 + _param2);
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	28 2f       	mov	r18, r24
 5d4:	88 0f       	add	r24, r24
 5d6:	33 0b       	sbc	r19, r19
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	08 2e       	mov	r0, r24
 5dc:	00 0c       	add	r0, r0
 5de:	99 0b       	sbc	r25, r25
 5e0:	28 0f       	add	r18, r24
 5e2:	39 1f       	adc	r19, r25
 5e4:	8d 81       	ldd	r24, Y+5	; 0x05
 5e6:	08 2e       	mov	r0, r24
 5e8:	00 0c       	add	r0, r0
 5ea:	99 0b       	sbc	r25, r25
 5ec:	28 0f       	add	r18, r24
 5ee:	39 1f       	adc	r19, r25
 5f0:	8e 81       	ldd	r24, Y+6	; 0x06
 5f2:	08 2e       	mov	r0, r24
 5f4:	00 0c       	add	r0, r0
 5f6:	99 0b       	sbc	r25, r25
 5f8:	28 0f       	add	r18, r24
 5fa:	39 1f       	adc	r19, r25
 5fc:	8f 81       	ldd	r24, Y+7	; 0x07
 5fe:	08 2e       	mov	r0, r24
 600:	00 0c       	add	r0, r0
 602:	99 0b       	sbc	r25, r25
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	91 95       	neg	r25
 60a:	81 95       	neg	r24
 60c:	91 09       	sbc	r25, r1
 60e:	9a 83       	std	Y+2, r25	; 0x02
 610:	89 83       	std	Y+1, r24	; 0x01
	return result;
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	27 96       	adiw	r28, 0x07	; 7
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <__cmpsf2>:
 62a:	2f d0       	rcall	.+94     	; 0x68a <__fp_cmp>
 62c:	08 f4       	brcc	.+2      	; 0x630 <__cmpsf2+0x6>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret

00000632 <__fixunssfsi>:
 632:	57 d0       	rcall	.+174    	; 0x6e2 <__fp_splitA>
 634:	88 f0       	brcs	.+34     	; 0x658 <__fixunssfsi+0x26>
 636:	9f 57       	subi	r25, 0x7F	; 127
 638:	90 f0       	brcs	.+36     	; 0x65e <__fixunssfsi+0x2c>
 63a:	b9 2f       	mov	r27, r25
 63c:	99 27       	eor	r25, r25
 63e:	b7 51       	subi	r27, 0x17	; 23
 640:	a0 f0       	brcs	.+40     	; 0x66a <__fixunssfsi+0x38>
 642:	d1 f0       	breq	.+52     	; 0x678 <__fixunssfsi+0x46>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	1a f0       	brmi	.+6      	; 0x654 <__fixunssfsi+0x22>
 64e:	ba 95       	dec	r27
 650:	c9 f7       	brne	.-14     	; 0x644 <__fixunssfsi+0x12>
 652:	12 c0       	rjmp	.+36     	; 0x678 <__fixunssfsi+0x46>
 654:	b1 30       	cpi	r27, 0x01	; 1
 656:	81 f0       	breq	.+32     	; 0x678 <__fixunssfsi+0x46>
 658:	5e d0       	rcall	.+188    	; 0x716 <__fp_zero>
 65a:	b1 e0       	ldi	r27, 0x01	; 1
 65c:	08 95       	ret
 65e:	5b c0       	rjmp	.+182    	; 0x716 <__fp_zero>
 660:	67 2f       	mov	r22, r23
 662:	78 2f       	mov	r23, r24
 664:	88 27       	eor	r24, r24
 666:	b8 5f       	subi	r27, 0xF8	; 248
 668:	39 f0       	breq	.+14     	; 0x678 <__fixunssfsi+0x46>
 66a:	b9 3f       	cpi	r27, 0xF9	; 249
 66c:	cc f3       	brlt	.-14     	; 0x660 <__fixunssfsi+0x2e>
 66e:	86 95       	lsr	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b3 95       	inc	r27
 676:	d9 f7       	brne	.-10     	; 0x66e <__fixunssfsi+0x3c>
 678:	3e f4       	brtc	.+14     	; 0x688 <__fixunssfsi+0x56>
 67a:	90 95       	com	r25
 67c:	80 95       	com	r24
 67e:	70 95       	com	r23
 680:	61 95       	neg	r22
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	08 95       	ret

0000068a <__fp_cmp>:
 68a:	99 0f       	add	r25, r25
 68c:	00 08       	sbc	r0, r0
 68e:	55 0f       	add	r21, r21
 690:	aa 0b       	sbc	r26, r26
 692:	e0 e8       	ldi	r30, 0x80	; 128
 694:	fe ef       	ldi	r31, 0xFE	; 254
 696:	16 16       	cp	r1, r22
 698:	17 06       	cpc	r1, r23
 69a:	e8 07       	cpc	r30, r24
 69c:	f9 07       	cpc	r31, r25
 69e:	c0 f0       	brcs	.+48     	; 0x6d0 <__fp_cmp+0x46>
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	e4 07       	cpc	r30, r20
 6a6:	f5 07       	cpc	r31, r21
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <__fp_cmp+0x46>
 6aa:	62 1b       	sub	r22, r18
 6ac:	73 0b       	sbc	r23, r19
 6ae:	84 0b       	sbc	r24, r20
 6b0:	95 0b       	sbc	r25, r21
 6b2:	39 f4       	brne	.+14     	; 0x6c2 <__fp_cmp+0x38>
 6b4:	0a 26       	eor	r0, r26
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <__fp_cmp+0x46>
 6b8:	23 2b       	or	r18, r19
 6ba:	24 2b       	or	r18, r20
 6bc:	25 2b       	or	r18, r21
 6be:	21 f4       	brne	.+8      	; 0x6c8 <__fp_cmp+0x3e>
 6c0:	08 95       	ret
 6c2:	0a 26       	eor	r0, r26
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <__fp_cmp+0x3e>
 6c6:	a1 40       	sbci	r26, 0x01	; 1
 6c8:	a6 95       	lsr	r26
 6ca:	8f ef       	ldi	r24, 0xFF	; 255
 6cc:	81 1d       	adc	r24, r1
 6ce:	81 1d       	adc	r24, r1
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__gesf2>:
 724:	b2 df       	rcall	.-156    	; 0x68a <__fp_cmp>
 726:	08 f4       	brcc	.+2      	; 0x72a <__gesf2+0x6>
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__mulsf3>:
 72c:	0b d0       	rcall	.+22     	; 0x744 <__mulsf3x>
 72e:	78 c0       	rjmp	.+240    	; 0x820 <__fp_round>
 730:	69 d0       	rcall	.+210    	; 0x804 <__fp_pscA>
 732:	28 f0       	brcs	.+10     	; 0x73e <__mulsf3+0x12>
 734:	6e d0       	rcall	.+220    	; 0x812 <__fp_pscB>
 736:	18 f0       	brcs	.+6      	; 0x73e <__mulsf3+0x12>
 738:	95 23       	and	r25, r21
 73a:	09 f0       	breq	.+2      	; 0x73e <__mulsf3+0x12>
 73c:	5a c0       	rjmp	.+180    	; 0x7f2 <__fp_inf>
 73e:	5f c0       	rjmp	.+190    	; 0x7fe <__fp_nan>
 740:	11 24       	eor	r1, r1
 742:	ea cf       	rjmp	.-44     	; 0x718 <__fp_szero>

00000744 <__mulsf3x>:
 744:	c6 df       	rcall	.-116    	; 0x6d2 <__fp_split3>
 746:	a0 f3       	brcs	.-24     	; 0x730 <__mulsf3+0x4>

00000748 <__mulsf3_pse>:
 748:	95 9f       	mul	r25, r21
 74a:	d1 f3       	breq	.-12     	; 0x740 <__mulsf3+0x14>
 74c:	95 0f       	add	r25, r21
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	55 1f       	adc	r21, r21
 752:	62 9f       	mul	r22, r18
 754:	f0 01       	movw	r30, r0
 756:	72 9f       	mul	r23, r18
 758:	bb 27       	eor	r27, r27
 75a:	f0 0d       	add	r31, r0
 75c:	b1 1d       	adc	r27, r1
 75e:	63 9f       	mul	r22, r19
 760:	aa 27       	eor	r26, r26
 762:	f0 0d       	add	r31, r0
 764:	b1 1d       	adc	r27, r1
 766:	aa 1f       	adc	r26, r26
 768:	64 9f       	mul	r22, r20
 76a:	66 27       	eor	r22, r22
 76c:	b0 0d       	add	r27, r0
 76e:	a1 1d       	adc	r26, r1
 770:	66 1f       	adc	r22, r22
 772:	82 9f       	mul	r24, r18
 774:	22 27       	eor	r18, r18
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	62 1f       	adc	r22, r18
 77c:	73 9f       	mul	r23, r19
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	62 1f       	adc	r22, r18
 784:	83 9f       	mul	r24, r19
 786:	a0 0d       	add	r26, r0
 788:	61 1d       	adc	r22, r1
 78a:	22 1f       	adc	r18, r18
 78c:	74 9f       	mul	r23, r20
 78e:	33 27       	eor	r19, r19
 790:	a0 0d       	add	r26, r0
 792:	61 1d       	adc	r22, r1
 794:	23 1f       	adc	r18, r19
 796:	84 9f       	mul	r24, r20
 798:	60 0d       	add	r22, r0
 79a:	21 1d       	adc	r18, r1
 79c:	82 2f       	mov	r24, r18
 79e:	76 2f       	mov	r23, r22
 7a0:	6a 2f       	mov	r22, r26
 7a2:	11 24       	eor	r1, r1
 7a4:	9f 57       	subi	r25, 0x7F	; 127
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	8a f0       	brmi	.+34     	; 0x7cc <__mulsf3_pse+0x84>
 7aa:	e1 f0       	breq	.+56     	; 0x7e4 <__mulsf3_pse+0x9c>
 7ac:	88 23       	and	r24, r24
 7ae:	4a f0       	brmi	.+18     	; 0x7c2 <__mulsf3_pse+0x7a>
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	bb 1f       	adc	r27, r27
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	91 50       	subi	r25, 0x01	; 1
 7be:	50 40       	sbci	r21, 0x00	; 0
 7c0:	a9 f7       	brne	.-22     	; 0x7ac <__mulsf3_pse+0x64>
 7c2:	9e 3f       	cpi	r25, 0xFE	; 254
 7c4:	51 05       	cpc	r21, r1
 7c6:	70 f0       	brcs	.+28     	; 0x7e4 <__mulsf3_pse+0x9c>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fp_inf>
 7ca:	a6 cf       	rjmp	.-180    	; 0x718 <__fp_szero>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	ec f3       	brlt	.-6      	; 0x7ca <__mulsf3_pse+0x82>
 7d0:	98 3e       	cpi	r25, 0xE8	; 232
 7d2:	dc f3       	brlt	.-10     	; 0x7ca <__mulsf3_pse+0x82>
 7d4:	86 95       	lsr	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f7 95       	ror	r31
 7de:	e7 95       	ror	r30
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c1 f7       	brne	.-16     	; 0x7d4 <__mulsf3_pse+0x8c>
 7e4:	fe 2b       	or	r31, r30
 7e6:	88 0f       	add	r24, r24
 7e8:	91 1d       	adc	r25, r1
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__fp_inf>:
 7f2:	97 f9       	bld	r25, 7
 7f4:	9f 67       	ori	r25, 0x7F	; 127
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	08 95       	ret

000007fe <__fp_nan>:
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	80 ec       	ldi	r24, 0xC0	; 192
 802:	08 95       	ret

00000804 <__fp_pscA>:
 804:	00 24       	eor	r0, r0
 806:	0a 94       	dec	r0
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	18 06       	cpc	r1, r24
 80e:	09 06       	cpc	r0, r25
 810:	08 95       	ret

00000812 <__fp_pscB>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	05 06       	cpc	r0, r21
 81e:	08 95       	ret

00000820 <__fp_round>:
 820:	09 2e       	mov	r0, r25
 822:	03 94       	inc	r0
 824:	00 0c       	add	r0, r0
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0xc>
 828:	88 23       	and	r24, r24
 82a:	52 f0       	brmi	.+20     	; 0x840 <__fp_round+0x20>
 82c:	bb 0f       	add	r27, r27
 82e:	40 f4       	brcc	.+16     	; 0x840 <__fp_round+0x20>
 830:	bf 2b       	or	r27, r31
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0x18>
 834:	60 ff       	sbrs	r22, 0
 836:	04 c0       	rjmp	.+8      	; 0x840 <__fp_round+0x20>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
