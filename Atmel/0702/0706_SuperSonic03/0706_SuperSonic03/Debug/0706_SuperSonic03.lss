
0706_SuperSonic03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000ece  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c0e  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000889  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00002ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	85 c4       	rjmp	.+2314   	; 0x938 <__vector_11>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	d5 c6       	rjmp	.+3498   	; 0xe56 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

unsigned int pastICR = 0;
unsigned int currentICR = 0;

int main(void)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	c9 55       	subi	r28, 0x59	; 89
  bc:	d1 09       	sbc	r29, r1
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
    TCCR1A = 0x00;
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
    // COM1A1 COM1A0 COM1B1 COM1B0 COM1C1 COM1C0 WGM11 WGM10
    // nomal 모드
    
    TCCR1B = 0x01;
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
    // ICNC1 ICES1 WGM13 WGM12 CS12 CS11 CS10
    // ICES3: Input Capture Edge Select
    // 0 이면 하강엣지, 1이면 상승엣지
    // 분주율 1
    
    TCCR1C = 0x00;
  da:	8a e7       	ldi	r24, 0x7A	; 122
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
    // FOC1A FOC1B FOC1C
    // OC1 출력 X
    // Input으로 받아 Input Cature형태로 진행해야 하니까
    TIMSK = 0x21;
  e2:	87 e5       	ldi	r24, 0x57	; 87
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 e2       	ldi	r18, 0x21	; 33
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
    TCNT1 = 0;
  ec:	8c e4       	ldi	r24, 0x4C	; 76
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	11 82       	std	Z+1, r1	; 0x01
  f4:	10 82       	st	Z, r1
    // TOP설정
    
    DDRD |= 0x08;
  f6:	81 e3       	ldi	r24, 0x31	; 49
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	21 e3       	ldi	r18, 0x31	; 49
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	28 60       	ori	r18, 0x08	; 8
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
    // PD4가 ICP1 이므로 echo의 값을 받으니 Input 설정
    // PD3은 Trigger 역할을 할것이므로 Output 설정
    
    UCSR0A = 0x0;
 108:	8b e2       	ldi	r24, 0x2B	; 43
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1
    UCSR0B = 0x98; // RXCIE1 = 1,수신완료 인터럽트 인에이블 , 송수신 인에이블= 1
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e9       	ldi	r18, 0x98	; 152
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
    UCSR0C = 0x06; // 비동 기, 데이터 8비트 모드
 11a:	85 e9       	ldi	r24, 0x95	; 149
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e0       	ldi	r18, 0x06	; 6
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
    UBRR0H = 0;
 124:	80 e9       	ldi	r24, 0x90	; 144
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	10 82       	st	Z, r1
    UBRR0L = 103; //16MHz , BAUD 9600
 12c:	89 e2       	ldi	r24, 0x29	; 41
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	27 e6       	ldi	r18, 0x67	; 103
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    
	sei();
 136:	78 94       	sei
	
    while (1) 
    {
		if(captFlag == 0){			
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	88 23       	and	r24, r24
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0x94>
 140:	4b c2       	rjmp	.+1174   	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			TCCR1B = 0x41;
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	21 e4       	ldi	r18, 0x41	; 65
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
			// Input Capture 상승엣지 Set
			PORTD = 0x00;
 14c:	82 e3       	ldi	r24, 0x32	; 50
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	10 82       	st	Z, r1
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	a0 e8       	ldi	r26, 0x80	; 128
 15a:	bf e3       	ldi	r27, 0x3F	; 63
 15c:	8e 83       	std	Y+6, r24	; 0x06
 15e:	9f 83       	std	Y+7, r25	; 0x07
 160:	a8 87       	std	Y+8, r26	; 0x08
 162:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 164:	2b ea       	ldi	r18, 0xAB	; 171
 166:	3a ea       	ldi	r19, 0xAA	; 170
 168:	4a ea       	ldi	r20, 0xAA	; 170
 16a:	50 e4       	ldi	r21, 0x40	; 64
 16c:	6e 81       	ldd	r22, Y+6	; 0x06
 16e:	7f 81       	ldd	r23, Y+7	; 0x07
 170:	88 85       	ldd	r24, Y+8	; 0x08
 172:	99 85       	ldd	r25, Y+9	; 0x09
 174:	fe d5       	rcall	.+3068   	; 0xd72 <__mulsf3>
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	8c ab       	std	Y+52, r24	; 0x34
 17c:	9d ab       	std	Y+53, r25	; 0x35
 17e:	ae ab       	std	Y+54, r26	; 0x36
 180:	bf ab       	std	Y+55, r27	; 0x37
	__tmp2 = ((F_CPU) / 4e6) * __us;
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	50 e4       	ldi	r21, 0x40	; 64
 18a:	6e 81       	ldd	r22, Y+6	; 0x06
 18c:	7f 81       	ldd	r23, Y+7	; 0x07
 18e:	88 85       	ldd	r24, Y+8	; 0x08
 190:	99 85       	ldd	r25, Y+9	; 0x09
 192:	ef d5       	rcall	.+3038   	; 0xd72 <__mulsf3>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	88 af       	std	Y+56, r24	; 0x38
 19a:	99 af       	std	Y+57, r25	; 0x39
 19c:	aa af       	std	Y+58, r26	; 0x3a
 19e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5f e3       	ldi	r21, 0x3F	; 63
 1a8:	6c a9       	ldd	r22, Y+52	; 0x34
 1aa:	7d a9       	ldd	r23, Y+53	; 0x35
 1ac:	8e a9       	ldd	r24, Y+54	; 0x36
 1ae:	9f a9       	ldd	r25, Y+55	; 0x37
 1b0:	92 d4       	rcall	.+2340   	; 0xad6 <__cmpsf2>
 1b2:	88 23       	and	r24, r24
 1b4:	1c f4       	brge	.+6      	; 0x1bc <main+0x10e>
		__ticks = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	8c af       	std	Y+60, r24	; 0x3c
 1ba:	0b c1       	rjmp	.+534    	; 0x3d2 <main+0x324>
	else if (__tmp2 > 65535)
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	3f ef       	ldi	r19, 0xFF	; 255
 1c0:	4f e7       	ldi	r20, 0x7F	; 127
 1c2:	57 e4       	ldi	r21, 0x47	; 71
 1c4:	68 ad       	ldd	r22, Y+56	; 0x38
 1c6:	79 ad       	ldd	r23, Y+57	; 0x39
 1c8:	8a ad       	ldd	r24, Y+58	; 0x3a
 1ca:	9b ad       	ldd	r25, Y+59	; 0x3b
 1cc:	ce d5       	rcall	.+2972   	; 0xd6a <__gesf2>
 1ce:	18 16       	cp	r1, r24
 1d0:	0c f0       	brlt	.+2      	; 0x1d4 <main+0x126>
 1d2:	c4 c0       	rjmp	.+392    	; 0x35c <main+0x2ae>
	{
		_delay_ms(__us / 1000.0);
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	4a e7       	ldi	r20, 0x7A	; 122
 1da:	54 e4       	ldi	r21, 0x44	; 68
 1dc:	6e 81       	ldd	r22, Y+6	; 0x06
 1de:	7f 81       	ldd	r23, Y+7	; 0x07
 1e0:	88 85       	ldd	r24, Y+8	; 0x08
 1e2:	99 85       	ldd	r25, Y+9	; 0x09
 1e4:	7c d4       	rcall	.+2296   	; 0xade <__divsf3>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	9e 01       	movw	r18, r28
 1ec:	23 5c       	subi	r18, 0xC3	; 195
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	f9 01       	movw	r30, r18
 1f2:	80 83       	st	Z, r24
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	a2 83       	std	Z+2, r26	; 0x02
 1f8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1fa:	8e 01       	movw	r16, r28
 1fc:	0f 5b       	subi	r16, 0xBF	; 191
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4a e7       	ldi	r20, 0x7A	; 122
 206:	55 e4       	ldi	r21, 0x45	; 69
 208:	ce 01       	movw	r24, r28
 20a:	cd 96       	adiw	r24, 0x3d	; 61
 20c:	fc 01       	movw	r30, r24
 20e:	60 81       	ld	r22, Z
 210:	71 81       	ldd	r23, Z+1	; 0x01
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	ad d5       	rcall	.+2906   	; 0xd72 <__mulsf3>
 218:	dc 01       	movw	r26, r24
 21a:	cb 01       	movw	r24, r22
 21c:	f8 01       	movw	r30, r16
 21e:	80 83       	st	Z, r24
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	a2 83       	std	Z+2, r26	; 0x02
 224:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 226:	ce 01       	movw	r24, r28
 228:	8f 5b       	subi	r24, 0xBF	; 191
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e8       	ldi	r20, 0x80	; 128
 232:	5f e3       	ldi	r21, 0x3F	; 63
 234:	fc 01       	movw	r30, r24
 236:	60 81       	ld	r22, Z
 238:	71 81       	ldd	r23, Z+1	; 0x01
 23a:	82 81       	ldd	r24, Z+2	; 0x02
 23c:	93 81       	ldd	r25, Z+3	; 0x03
 23e:	4b d4       	rcall	.+2198   	; 0xad6 <__cmpsf2>
 240:	88 23       	and	r24, r24
 242:	4c f4       	brge	.+18     	; 0x256 <main+0x1a8>
		__ticks = 1;
 244:	ce 01       	movw	r24, r28
 246:	8b 5b       	subi	r24, 0xBB	; 187
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	31 83       	std	Z+1, r19	; 0x01
 252:	20 83       	st	Z, r18
 254:	68 c0       	rjmp	.+208    	; 0x326 <main+0x278>
	else if (__tmp > 65535)
 256:	ce 01       	movw	r24, r28
 258:	8f 5b       	subi	r24, 0xBF	; 191
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	3f ef       	ldi	r19, 0xFF	; 255
 260:	4f e7       	ldi	r20, 0x7F	; 127
 262:	57 e4       	ldi	r21, 0x47	; 71
 264:	fc 01       	movw	r30, r24
 266:	60 81       	ld	r22, Z
 268:	71 81       	ldd	r23, Z+1	; 0x01
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	93 81       	ldd	r25, Z+3	; 0x03
 26e:	7d d5       	rcall	.+2810   	; 0xd6a <__gesf2>
 270:	18 16       	cp	r1, r24
 272:	0c f0       	brlt	.+2      	; 0x276 <main+0x1c8>
 274:	47 c0       	rjmp	.+142    	; 0x304 <main+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e2       	ldi	r20, 0x20	; 32
 27c:	51 e4       	ldi	r21, 0x41	; 65
 27e:	ce 01       	movw	r24, r28
 280:	cd 96       	adiw	r24, 0x3d	; 61
 282:	fc 01       	movw	r30, r24
 284:	60 81       	ld	r22, Z
 286:	71 81       	ldd	r23, Z+1	; 0x01
 288:	82 81       	ldd	r24, Z+2	; 0x02
 28a:	93 81       	ldd	r25, Z+3	; 0x03
 28c:	72 d5       	rcall	.+2788   	; 0xd72 <__mulsf3>
 28e:	dc 01       	movw	r26, r24
 290:	cb 01       	movw	r24, r22
 292:	8e 01       	movw	r16, r28
 294:	0b 5b       	subi	r16, 0xBB	; 187
 296:	1f 4f       	sbci	r17, 0xFF	; 255
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	88 d4       	rcall	.+2320   	; 0xbae <__fixunssfsi>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	f8 01       	movw	r30, r16
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	80 83       	st	Z, r24
 2a8:	24 c0       	rjmp	.+72     	; 0x2f2 <main+0x244>
 2aa:	ce 01       	movw	r24, r28
 2ac:	89 5b       	subi	r24, 0xB9	; 185
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	20 e9       	ldi	r18, 0x90	; 144
 2b2:	31 e0       	ldi	r19, 0x01	; 1
 2b4:	fc 01       	movw	r30, r24
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ba:	ce 01       	movw	r24, r28
 2bc:	89 5b       	subi	r24, 0xB9	; 185
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	fc 01       	movw	r30, r24
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x218>
 2ca:	9e 01       	movw	r18, r28
 2cc:	29 5b       	subi	r18, 0xB9	; 185
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	f9 01       	movw	r30, r18
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	ce 01       	movw	r24, r28
 2d8:	8b 5b       	subi	r24, 0xBB	; 187
 2da:	9f 4f       	sbci	r25, 0xFF	; 255
 2dc:	9e 01       	movw	r18, r28
 2de:	2b 5b       	subi	r18, 0xBB	; 187
 2e0:	3f 4f       	sbci	r19, 0xFF	; 255
 2e2:	f9 01       	movw	r30, r18
 2e4:	20 81       	ld	r18, Z
 2e6:	31 81       	ldd	r19, Z+1	; 0x01
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	31 09       	sbc	r19, r1
 2ec:	fc 01       	movw	r30, r24
 2ee:	31 83       	std	Z+1, r19	; 0x01
 2f0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	ce 01       	movw	r24, r28
 2f4:	8b 5b       	subi	r24, 0xBB	; 187
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	91 81       	ldd	r25, Z+1	; 0x01
 2fe:	89 2b       	or	r24, r25
 300:	a1 f6       	brne	.-88     	; 0x2aa <main+0x1fc>
 302:	67 c0       	rjmp	.+206    	; 0x3d2 <main+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 304:	8e 01       	movw	r16, r28
 306:	0b 5b       	subi	r16, 0xBB	; 187
 308:	1f 4f       	sbci	r17, 0xFF	; 255
 30a:	ce 01       	movw	r24, r28
 30c:	8f 5b       	subi	r24, 0xBF	; 191
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	fc 01       	movw	r30, r24
 312:	60 81       	ld	r22, Z
 314:	71 81       	ldd	r23, Z+1	; 0x01
 316:	82 81       	ldd	r24, Z+2	; 0x02
 318:	93 81       	ldd	r25, Z+3	; 0x03
 31a:	49 d4       	rcall	.+2194   	; 0xbae <__fixunssfsi>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	f8 01       	movw	r30, r16
 322:	91 83       	std	Z+1, r25	; 0x01
 324:	80 83       	st	Z, r24
 326:	ce 01       	movw	r24, r28
 328:	87 5b       	subi	r24, 0xB7	; 183
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	9e 01       	movw	r18, r28
 32e:	2b 5b       	subi	r18, 0xBB	; 187
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	f9 01       	movw	r30, r18
 334:	20 81       	ld	r18, Z
 336:	31 81       	ldd	r19, Z+1	; 0x01
 338:	fc 01       	movw	r30, r24
 33a:	31 83       	std	Z+1, r19	; 0x01
 33c:	20 83       	st	Z, r18
 33e:	ce 01       	movw	r24, r28
 340:	87 5b       	subi	r24, 0xB7	; 183
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	91 81       	ldd	r25, Z+1	; 0x01
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x29c>
 34e:	9e 01       	movw	r18, r28
 350:	27 5b       	subi	r18, 0xB7	; 183
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	f9 01       	movw	r30, r18
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 35a:	3b c0       	rjmp	.+118    	; 0x3d2 <main+0x324>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	4f e7       	ldi	r20, 0x7F	; 127
 362:	53 e4       	ldi	r21, 0x43	; 67
 364:	6c a9       	ldd	r22, Y+52	; 0x34
 366:	7d a9       	ldd	r23, Y+53	; 0x35
 368:	8e a9       	ldd	r24, Y+54	; 0x36
 36a:	9f a9       	ldd	r25, Y+55	; 0x37
 36c:	fe d4       	rcall	.+2556   	; 0xd6a <__gesf2>
 36e:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 370:	44 f5       	brge	.+80     	; 0x3c2 <main+0x314>
 372:	8e 01       	movw	r16, r28
 374:	05 5b       	subi	r16, 0xB5	; 181
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	68 ad       	ldd	r22, Y+56	; 0x38
 37a:	79 ad       	ldd	r23, Y+57	; 0x39
 37c:	8a ad       	ldd	r24, Y+58	; 0x3a
 37e:	9b ad       	ldd	r25, Y+59	; 0x3b
 380:	16 d4       	rcall	.+2092   	; 0xbae <__fixunssfsi>
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
 386:	f8 01       	movw	r30, r16
 388:	91 83       	std	Z+1, r25	; 0x01
 38a:	80 83       	st	Z, r24
 38c:	ce 01       	movw	r24, r28
 38e:	83 5b       	subi	r24, 0xB3	; 179
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	9e 01       	movw	r18, r28
 394:	25 5b       	subi	r18, 0xB5	; 181
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	31 81       	ldd	r19, Z+1	; 0x01
 39e:	fc 01       	movw	r30, r24
 3a0:	31 83       	std	Z+1, r19	; 0x01
 3a2:	20 83       	st	Z, r18
 3a4:	ce 01       	movw	r24, r28
 3a6:	83 5b       	subi	r24, 0xB3	; 179
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	fc 01       	movw	r30, r24
 3ac:	80 81       	ld	r24, Z
 3ae:	91 81       	ldd	r25, Z+1	; 0x01
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x302>
 3b4:	9e 01       	movw	r18, r28
 3b6:	23 5b       	subi	r18, 0xB3	; 179
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	f9 01       	movw	r30, r18
 3bc:	91 83       	std	Z+1, r25	; 0x01
 3be:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 3c0:	1b c0       	rjmp	.+54     	; 0x3f8 <main+0x34a>
 3c2:	6c a9       	ldd	r22, Y+52	; 0x34
 3c4:	7d a9       	ldd	r23, Y+53	; 0x35
 3c6:	8e a9       	ldd	r24, Y+54	; 0x36
 3c8:	9f a9       	ldd	r25, Y+55	; 0x37
 3ca:	f1 d3       	rcall	.+2018   	; 0xbae <__fixunssfsi>
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22
 3d0:	8c af       	std	Y+60, r24	; 0x3c
 3d2:	ce 01       	movw	r24, r28
 3d4:	81 5b       	subi	r24, 0xB1	; 177
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	2c ad       	ldd	r18, Y+60	; 0x3c
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3de:	ce 01       	movw	r24, r28
 3e0:	81 5b       	subi	r24, 0xB1	; 177
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	28 2f       	mov	r18, r24
 3ea:	2a 95       	dec	r18
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x33c>
 3ee:	ce 01       	movw	r24, r28
 3f0:	81 5b       	subi	r24, 0xB1	; 177
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
			_delay_us(1);
			PORTD = 0x08;
 3f8:	82 e3       	ldi	r24, 0x32	; 50
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	28 e0       	ldi	r18, 0x08	; 8
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	a0 e3       	ldi	r26, 0x30	; 48
 408:	b1 e4       	ldi	r27, 0x41	; 65
 40a:	8c 8b       	std	Y+20, r24	; 0x14
 40c:	9d 8b       	std	Y+21, r25	; 0x15
 40e:	ae 8b       	std	Y+22, r26	; 0x16
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 410:	bf 8b       	std	Y+23, r27	; 0x17
 412:	2b ea       	ldi	r18, 0xAB	; 171
 414:	3a ea       	ldi	r19, 0xAA	; 170
 416:	4a ea       	ldi	r20, 0xAA	; 170
 418:	50 e4       	ldi	r21, 0x40	; 64
 41a:	6c 89       	ldd	r22, Y+20	; 0x14
 41c:	7d 89       	ldd	r23, Y+21	; 0x15
 41e:	8e 89       	ldd	r24, Y+22	; 0x16
 420:	9f 89       	ldd	r25, Y+23	; 0x17
 422:	a7 d4       	rcall	.+2382   	; 0xd72 <__mulsf3>
 424:	dc 01       	movw	r26, r24
 426:	cb 01       	movw	r24, r22
 428:	88 8f       	std	Y+24, r24	; 0x18
 42a:	99 8f       	std	Y+25, r25	; 0x19
 42c:	aa 8f       	std	Y+26, r26	; 0x1a
	__tmp2 = ((F_CPU) / 4e6) * __us;
 42e:	bb 8f       	std	Y+27, r27	; 0x1b
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	40 e8       	ldi	r20, 0x80	; 128
 436:	50 e4       	ldi	r21, 0x40	; 64
 438:	6c 89       	ldd	r22, Y+20	; 0x14
 43a:	7d 89       	ldd	r23, Y+21	; 0x15
 43c:	8e 89       	ldd	r24, Y+22	; 0x16
 43e:	9f 89       	ldd	r25, Y+23	; 0x17
 440:	98 d4       	rcall	.+2352   	; 0xd72 <__mulsf3>
 442:	dc 01       	movw	r26, r24
 444:	cb 01       	movw	r24, r22
 446:	8c 8f       	std	Y+28, r24	; 0x1c
 448:	9d 8f       	std	Y+29, r25	; 0x1d
 44a:	ae 8f       	std	Y+30, r26	; 0x1e
	if (__tmp < 1.0)
 44c:	bf 8f       	std	Y+31, r27	; 0x1f
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	5f e3       	ldi	r21, 0x3F	; 63
 456:	68 8d       	ldd	r22, Y+24	; 0x18
 458:	79 8d       	ldd	r23, Y+25	; 0x19
 45a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 45c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 45e:	3b d3       	rcall	.+1654   	; 0xad6 <__cmpsf2>
 460:	88 23       	and	r24, r24
		__ticks = 1;
 462:	1c f4       	brge	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	88 a3       	std	Y+32, r24	; 0x20
	else if (__tmp2 > 65535)
 468:	a7 c0       	rjmp	.+334    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	3f ef       	ldi	r19, 0xFF	; 255
 46e:	4f e7       	ldi	r20, 0x7F	; 127
 470:	57 e4       	ldi	r21, 0x47	; 71
 472:	6c 8d       	ldd	r22, Y+28	; 0x1c
 474:	7d 8d       	ldd	r23, Y+29	; 0x1d
 476:	8e 8d       	ldd	r24, Y+30	; 0x1e
 478:	9f 8d       	ldd	r25, Y+31	; 0x1f
 47a:	77 d4       	rcall	.+2286   	; 0xd6a <__gesf2>
 47c:	18 16       	cp	r1, r24
 47e:	0c f0       	brlt	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		_delay_ms(__us / 1000.0);
 480:	74 c0       	rjmp	.+232    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	4a e7       	ldi	r20, 0x7A	; 122
 488:	54 e4       	ldi	r21, 0x44	; 68
 48a:	6c 89       	ldd	r22, Y+20	; 0x14
 48c:	7d 89       	ldd	r23, Y+21	; 0x15
 48e:	8e 89       	ldd	r24, Y+22	; 0x16
 490:	9f 89       	ldd	r25, Y+23	; 0x17
 492:	25 d3       	rcall	.+1610   	; 0xade <__divsf3>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	89 a3       	std	Y+33, r24	; 0x21
 49a:	9a a3       	std	Y+34, r25	; 0x22
 49c:	ab a3       	std	Y+35, r26	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 49e:	bc a3       	std	Y+36, r27	; 0x24
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	4a e7       	ldi	r20, 0x7A	; 122
 4a6:	55 e4       	ldi	r21, 0x45	; 69
 4a8:	69 a1       	ldd	r22, Y+33	; 0x21
 4aa:	7a a1       	ldd	r23, Y+34	; 0x22
 4ac:	8b a1       	ldd	r24, Y+35	; 0x23
 4ae:	9c a1       	ldd	r25, Y+36	; 0x24
 4b0:	60 d4       	rcall	.+2240   	; 0xd72 <__mulsf3>
 4b2:	dc 01       	movw	r26, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	8d a3       	std	Y+37, r24	; 0x25
 4b8:	9e a3       	std	Y+38, r25	; 0x26
 4ba:	af a3       	std	Y+39, r26	; 0x27
	if (__tmp < 1.0)
 4bc:	b8 a7       	std	Y+40, r27	; 0x28
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e8       	ldi	r20, 0x80	; 128
 4c4:	5f e3       	ldi	r21, 0x3F	; 63
 4c6:	6d a1       	ldd	r22, Y+37	; 0x25
 4c8:	7e a1       	ldd	r23, Y+38	; 0x26
 4ca:	8f a1       	ldd	r24, Y+39	; 0x27
 4cc:	98 a5       	ldd	r25, Y+40	; 0x28
 4ce:	03 d3       	rcall	.+1542   	; 0xad6 <__cmpsf2>
 4d0:	88 23       	and	r24, r24
		__ticks = 1;
 4d2:	2c f4       	brge	.+10     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	9a a7       	std	Y+42, r25	; 0x2a
	else if (__tmp > 65535)
 4da:	89 a7       	std	Y+41, r24	; 0x29
 4dc:	3b c0       	rjmp	.+118    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	3f ef       	ldi	r19, 0xFF	; 255
 4e2:	4f e7       	ldi	r20, 0x7F	; 127
 4e4:	57 e4       	ldi	r21, 0x47	; 71
 4e6:	6d a1       	ldd	r22, Y+37	; 0x25
 4e8:	7e a1       	ldd	r23, Y+38	; 0x26
 4ea:	8f a1       	ldd	r24, Y+39	; 0x27
 4ec:	98 a5       	ldd	r25, Y+40	; 0x28
 4ee:	3d d4       	rcall	.+2170   	; 0xd6a <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4f0:	18 16       	cp	r1, r24
 4f2:	3c f5       	brge	.+78     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e2       	ldi	r20, 0x20	; 32
 4fa:	51 e4       	ldi	r21, 0x41	; 65
 4fc:	69 a1       	ldd	r22, Y+33	; 0x21
 4fe:	7a a1       	ldd	r23, Y+34	; 0x22
 500:	8b a1       	ldd	r24, Y+35	; 0x23
 502:	9c a1       	ldd	r25, Y+36	; 0x24
 504:	36 d4       	rcall	.+2156   	; 0xd72 <__mulsf3>
 506:	dc 01       	movw	r26, r24
 508:	cb 01       	movw	r24, r22
 50a:	bc 01       	movw	r22, r24
 50c:	cd 01       	movw	r24, r26
 50e:	4f d3       	rcall	.+1694   	; 0xbae <__fixunssfsi>
 510:	dc 01       	movw	r26, r24
 512:	cb 01       	movw	r24, r22
 514:	9a a7       	std	Y+42, r25	; 0x2a
 516:	89 a7       	std	Y+41, r24	; 0x29
 518:	0f c0       	rjmp	.+30     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 51a:	80 e9       	ldi	r24, 0x90	; 144
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	9c a7       	std	Y+44, r25	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 520:	8b a7       	std	Y+43, r24	; 0x2b
 522:	8b a5       	ldd	r24, Y+43	; 0x2b
 524:	9c a5       	ldd	r25, Y+44	; 0x2c
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 52a:	9c a7       	std	Y+44, r25	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 52c:	8b a7       	std	Y+43, r24	; 0x2b
 52e:	89 a5       	ldd	r24, Y+41	; 0x29
 530:	9a a5       	ldd	r25, Y+42	; 0x2a
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	9a a7       	std	Y+42, r25	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 536:	89 a7       	std	Y+41, r24	; 0x29
 538:	89 a5       	ldd	r24, Y+41	; 0x29
 53a:	9a a5       	ldd	r25, Y+42	; 0x2a
 53c:	89 2b       	or	r24, r25
 53e:	69 f7       	brne	.-38     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 540:	3b c0       	rjmp	.+118    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 542:	6d a1       	ldd	r22, Y+37	; 0x25
 544:	7e a1       	ldd	r23, Y+38	; 0x26
 546:	8f a1       	ldd	r24, Y+39	; 0x27
 548:	98 a5       	ldd	r25, Y+40	; 0x28
 54a:	31 d3       	rcall	.+1634   	; 0xbae <__fixunssfsi>
 54c:	dc 01       	movw	r26, r24
 54e:	cb 01       	movw	r24, r22
 550:	9a a7       	std	Y+42, r25	; 0x2a
 552:	89 a7       	std	Y+41, r24	; 0x29
 554:	89 a5       	ldd	r24, Y+41	; 0x29
 556:	9a a5       	ldd	r25, Y+42	; 0x2a
 558:	9e a7       	std	Y+46, r25	; 0x2e
 55a:	8d a7       	std	Y+45, r24	; 0x2d
 55c:	8d a5       	ldd	r24, Y+45	; 0x2d
 55e:	9e a5       	ldd	r25, Y+46	; 0x2e
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 564:	9e a7       	std	Y+46, r25	; 0x2e
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 566:	8d a7       	std	Y+45, r24	; 0x2d
 568:	27 c0       	rjmp	.+78     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	4f e7       	ldi	r20, 0x7F	; 127
 570:	53 e4       	ldi	r21, 0x43	; 67
 572:	68 8d       	ldd	r22, Y+24	; 0x18
 574:	79 8d       	ldd	r23, Y+25	; 0x19
 576:	8a 8d       	ldd	r24, Y+26	; 0x1a
 578:	9b 8d       	ldd	r25, Y+27	; 0x1b
 57a:	f7 d3       	rcall	.+2030   	; 0xd6a <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 57c:	18 16       	cp	r1, r24
 57e:	a4 f4       	brge	.+40     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 580:	6c 8d       	ldd	r22, Y+28	; 0x1c
 582:	7d 8d       	ldd	r23, Y+29	; 0x1d
 584:	8e 8d       	ldd	r24, Y+30	; 0x1e
 586:	9f 8d       	ldd	r25, Y+31	; 0x1f
 588:	12 d3       	rcall	.+1572   	; 0xbae <__fixunssfsi>
 58a:	dc 01       	movw	r26, r24
 58c:	cb 01       	movw	r24, r22
 58e:	98 ab       	std	Y+48, r25	; 0x30
 590:	8f a7       	std	Y+47, r24	; 0x2f
 592:	8f a5       	ldd	r24, Y+47	; 0x2f
 594:	98 a9       	ldd	r25, Y+48	; 0x30
 596:	9a ab       	std	Y+50, r25	; 0x32
 598:	89 ab       	std	Y+49, r24	; 0x31
 59a:	89 a9       	ldd	r24, Y+49	; 0x31
 59c:	9a a9       	ldd	r25, Y+50	; 0x32
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 5a2:	9a ab       	std	Y+50, r25	; 0x32
 5a4:	89 ab       	std	Y+49, r24	; 0x31
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 5a6:	0e c0       	rjmp	.+28     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5a8:	68 8d       	ldd	r22, Y+24	; 0x18
 5aa:	79 8d       	ldd	r23, Y+25	; 0x19
 5ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
 5ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
 5b0:	fe d2       	rcall	.+1532   	; 0xbae <__fixunssfsi>
 5b2:	dc 01       	movw	r26, r24
 5b4:	cb 01       	movw	r24, r22
 5b6:	88 a3       	std	Y+32, r24	; 0x20
 5b8:	88 a1       	ldd	r24, Y+32	; 0x20
 5ba:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5bc:	8b a9       	ldd	r24, Y+51	; 0x33
 5be:	8a 95       	dec	r24
 5c0:	f1 f7       	brne	.-4      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5c2:	8b ab       	std	Y+51, r24	; 0x33
			// Trigger Activate			
			_delay_us(11);
			TCNT1 = 0;
 5c4:	8c e4       	ldi	r24, 0x4C	; 76
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	11 82       	std	Z+1, r1	; 0x01
 5cc:	10 82       	st	Z, r1
			PORTD = 0x00;
 5ce:	82 e3       	ldi	r24, 0x32	; 50
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	10 82       	st	Z, r1
 5d6:	b0 cd       	rjmp	.-1184   	; 0x138 <main+0x8a>
			
		}
		else if(captFlag == 1){
 5d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	91 f4       	brne	.+36     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
			if(ICR1 > 65000){
 5e0:	86 e4       	ldi	r24, 0x46	; 70
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	80 81       	ld	r24, Z
 5e8:	91 81       	ldd	r25, Z+1	; 0x01
 5ea:	89 3e       	cpi	r24, 0xE9	; 233
 5ec:	9d 4f       	sbci	r25, 0xFD	; 253
 5ee:	08 f4       	brcc	.+2      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5f0:	a3 cd       	rjmp	.-1210   	; 0x138 <main+0x8a>
				captFlag == 2;
				pastICR = 0;
 5f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 5f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
				currentICR = 0;				
 5fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 5fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
			}
		}
		else if(captFlag == 2){
 602:	9a cd       	rjmp	.-1228   	; 0x138 <main+0x8a>
 604:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	09 f0       	breq	.+2      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			unsigned int disGet = (currentICR - pastICR);
 60c:	95 cd       	rjmp	.-1238   	; 0x138 <main+0x8a>
 60e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <currentICR>
 612:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <currentICR+0x1>
 616:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pastICR>
 61a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <pastICR+0x1>
 61e:	a9 01       	movw	r20, r18
 620:	48 1b       	sub	r20, r24
 622:	59 0b       	sbc	r21, r25
 624:	ca 01       	movw	r24, r20
			
			double testDis = (double)disGet;
 626:	9b 87       	std	Y+11, r25	; 0x0b
 628:	8a 87       	std	Y+10, r24	; 0x0a
 62a:	8a 85       	ldd	r24, Y+10	; 0x0a
 62c:	9b 85       	ldd	r25, Y+11	; 0x0b
 62e:	cc 01       	movw	r24, r24
 630:	a0 e0       	ldi	r26, 0x00	; 0
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	bc 01       	movw	r22, r24
 636:	cd 01       	movw	r24, r26
 638:	e6 d2       	rcall	.+1484   	; 0xc06 <__floatunsisf>
 63a:	dc 01       	movw	r26, r24
 63c:	cb 01       	movw	r24, r22
 63e:	8c 87       	std	Y+12, r24	; 0x0c
						
			testDis = disGet /9.4;
 640:	9d 87       	std	Y+13, r25	; 0x0d
 642:	ae 87       	std	Y+14, r26	; 0x0e
 644:	bf 87       	std	Y+15, r27	; 0x0f
 646:	8a 85       	ldd	r24, Y+10	; 0x0a
 648:	9b 85       	ldd	r25, Y+11	; 0x0b
 64a:	cc 01       	movw	r24, r24
 64c:	a0 e0       	ldi	r26, 0x00	; 0
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	bc 01       	movw	r22, r24
 652:	cd 01       	movw	r24, r26
 654:	d8 d2       	rcall	.+1456   	; 0xc06 <__floatunsisf>
 656:	dc 01       	movw	r26, r24
 658:	cb 01       	movw	r24, r22
 65a:	26 e6       	ldi	r18, 0x66	; 102
 65c:	36 e6       	ldi	r19, 0x66	; 102
 65e:	46 e1       	ldi	r20, 0x16	; 22
 660:	51 e4       	ldi	r21, 0x41	; 65
 662:	bc 01       	movw	r22, r24
 664:	cd 01       	movw	r24, r26
 666:	3b d2       	rcall	.+1142   	; 0xade <__divsf3>
 668:	dc 01       	movw	r26, r24
 66a:	cb 01       	movw	r24, r22
 66c:	8c 87       	std	Y+12, r24	; 0x0c
			
			unsigned int valuecm = (unsigned int)testDis;
 66e:	9d 87       	std	Y+13, r25	; 0x0d
 670:	ae 87       	std	Y+14, r26	; 0x0e
 672:	bf 87       	std	Y+15, r27	; 0x0f
 674:	6c 85       	ldd	r22, Y+12	; 0x0c
 676:	7d 85       	ldd	r23, Y+13	; 0x0d
 678:	8e 85       	ldd	r24, Y+14	; 0x0e
 67a:	9f 85       	ldd	r25, Y+15	; 0x0f
 67c:	98 d2       	rcall	.+1328   	; 0xbae <__fixunssfsi>
			unsigned int valuemm = (unsigned int)((testDis - valuecm) * 10);
 67e:	dc 01       	movw	r26, r24
 680:	cb 01       	movw	r24, r22
 682:	99 8b       	std	Y+17, r25	; 0x11
 684:	88 8b       	std	Y+16, r24	; 0x10
 686:	88 89       	ldd	r24, Y+16	; 0x10
 688:	99 89       	ldd	r25, Y+17	; 0x11
 68a:	cc 01       	movw	r24, r24
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	bc 01       	movw	r22, r24
 692:	cd 01       	movw	r24, r26
 694:	b8 d2       	rcall	.+1392   	; 0xc06 <__floatunsisf>
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	9c 01       	movw	r18, r24
 69c:	ad 01       	movw	r20, r26
 69e:	6c 85       	ldd	r22, Y+12	; 0x0c
 6a0:	7d 85       	ldd	r23, Y+13	; 0x0d
 6a2:	8e 85       	ldd	r24, Y+14	; 0x0e
 6a4:	9f 85       	ldd	r25, Y+15	; 0x0f
 6a6:	b2 d1       	rcall	.+868    	; 0xa0c <__subsf3>
 6a8:	dc 01       	movw	r26, r24
 6aa:	cb 01       	movw	r24, r22
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	40 e2       	ldi	r20, 0x20	; 32
 6b2:	51 e4       	ldi	r21, 0x41	; 65
 6b4:	bc 01       	movw	r22, r24
 6b6:	cd 01       	movw	r24, r26
 6b8:	5c d3       	rcall	.+1720   	; 0xd72 <__mulsf3>
 6ba:	dc 01       	movw	r26, r24
 6bc:	cb 01       	movw	r24, r22
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	75 d2       	rcall	.+1258   	; 0xbae <__fixunssfsi>
 6c4:	dc 01       	movw	r26, r24
			
			unsigned char image = 0;
 6c6:	cb 01       	movw	r24, r22
			
			if((disGet/15) > 30.0){
 6c8:	9b 8b       	std	Y+19, r25	; 0x13
 6ca:	8a 8b       	std	Y+18, r24	; 0x12
 6cc:	19 82       	std	Y+1, r1	; 0x01
 6ce:	8a 85       	ldd	r24, Y+10	; 0x0a
 6d0:	9b 85       	ldd	r25, Y+11	; 0x0b
 6d2:	9c 01       	movw	r18, r24
 6d4:	a9 e8       	ldi	r26, 0x89	; 137
 6d6:	b8 e8       	ldi	r27, 0x88	; 136
 6d8:	af d3       	rcall	.+1886   	; 0xe38 <__umulhisi3>
 6da:	96 95       	lsr	r25
 6dc:	87 95       	ror	r24
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	cc 01       	movw	r24, r24
 6e8:	a0 e0       	ldi	r26, 0x00	; 0
 6ea:	b0 e0       	ldi	r27, 0x00	; 0
 6ec:	bc 01       	movw	r22, r24
 6ee:	cd 01       	movw	r24, r26
 6f0:	8a d2       	rcall	.+1300   	; 0xc06 <__floatunsisf>
 6f2:	dc 01       	movw	r26, r24
 6f4:	cb 01       	movw	r24, r22
 6f6:	20 e0       	ldi	r18, 0x00	; 0
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	40 ef       	ldi	r20, 0xF0	; 240
 6fc:	51 e4       	ldi	r21, 0x41	; 65
 6fe:	bc 01       	movw	r22, r24
 700:	cd 01       	movw	r24, r26
				image = 0;
 702:	33 d3       	rcall	.+1638   	; 0xd6a <__gesf2>
			}
			else if((disGet/15) > 20.0){
 704:	18 16       	cp	r1, r24
 706:	14 f4       	brge	.+4      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 708:	19 82       	std	Y+1, r1	; 0x01
 70a:	42 c0       	rjmp	.+132    	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 70c:	8a 85       	ldd	r24, Y+10	; 0x0a
 70e:	9b 85       	ldd	r25, Y+11	; 0x0b
 710:	9c 01       	movw	r18, r24
 712:	a9 e8       	ldi	r26, 0x89	; 137
 714:	b8 e8       	ldi	r27, 0x88	; 136
 716:	90 d3       	rcall	.+1824   	; 0xe38 <__umulhisi3>
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	96 95       	lsr	r25
 722:	87 95       	ror	r24
 724:	cc 01       	movw	r24, r24
 726:	a0 e0       	ldi	r26, 0x00	; 0
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	bc 01       	movw	r22, r24
 72c:	cd 01       	movw	r24, r26
 72e:	6b d2       	rcall	.+1238   	; 0xc06 <__floatunsisf>
 730:	dc 01       	movw	r26, r24
 732:	cb 01       	movw	r24, r22
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	40 ea       	ldi	r20, 0xA0	; 160
 73a:	51 e4       	ldi	r21, 0x41	; 65
 73c:	bc 01       	movw	r22, r24
				image = 1;
 73e:	cd 01       	movw	r24, r26
 740:	14 d3       	rcall	.+1576   	; 0xd6a <__gesf2>
			}
			else if((disGet/15) > 10.0){
 742:	18 16       	cp	r1, r24
 744:	1c f4       	brge	.+6      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	89 83       	std	Y+1, r24	; 0x01
 74a:	22 c0       	rjmp	.+68     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 74c:	8a 85       	ldd	r24, Y+10	; 0x0a
 74e:	9b 85       	ldd	r25, Y+11	; 0x0b
 750:	9c 01       	movw	r18, r24
 752:	a9 e8       	ldi	r26, 0x89	; 137
 754:	b8 e8       	ldi	r27, 0x88	; 136
 756:	70 d3       	rcall	.+1760   	; 0xe38 <__umulhisi3>
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	cc 01       	movw	r24, r24
 766:	a0 e0       	ldi	r26, 0x00	; 0
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	bc 01       	movw	r22, r24
 76c:	cd 01       	movw	r24, r26
 76e:	4b d2       	rcall	.+1174   	; 0xc06 <__floatunsisf>
 770:	dc 01       	movw	r26, r24
 772:	cb 01       	movw	r24, r22
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	40 e2       	ldi	r20, 0x20	; 32
 77a:	51 e4       	ldi	r21, 0x41	; 65
				image = 2;
 77c:	bc 01       	movw	r22, r24
 77e:	cd 01       	movw	r24, r26
 780:	f4 d2       	rcall	.+1512   	; 0xd6a <__gesf2>
			}
			else{
				image = 3;
 782:	18 16       	cp	r1, r24
 784:	1c f4       	brge	.+6      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
			}
			
			UART0_Putch(0xFF);
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	02 c0       	rjmp	.+4      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
 78c:	83 e0       	ldi	r24, 0x03	; 3
			UART0_Putch(valuecm);
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	90 e0       	ldi	r25, 0x00	; 0
			UART0_Putch(valuemm);
 794:	20 d1       	rcall	.+576    	; 0x9d6 <UART0_Putch>
 796:	88 89       	ldd	r24, Y+16	; 0x10
 798:	99 89       	ldd	r25, Y+17	; 0x11
 79a:	1d d1       	rcall	.+570    	; 0x9d6 <UART0_Putch>
			UART0_Putch(image);
 79c:	8a 89       	ldd	r24, Y+18	; 0x12
 79e:	9b 89       	ldd	r25, Y+19	; 0x13
 7a0:	1a d1       	rcall	.+564    	; 0x9d6 <UART0_Putch>
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	88 2f       	mov	r24, r24
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	16 d1       	rcall	.+556    	; 0x9d6 <UART0_Putch>
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	a8 ec       	ldi	r26, 0xC8	; 200
 7b0:	b2 e4       	ldi	r27, 0x42	; 66
 7b2:	8a 83       	std	Y+2, r24	; 0x02
 7b4:	9b 83       	std	Y+3, r25	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7b6:	ac 83       	std	Y+4, r26	; 0x04
 7b8:	bd 83       	std	Y+5, r27	; 0x05
 7ba:	8e 01       	movw	r16, r28
 7bc:	00 5b       	subi	r16, 0xB0	; 176
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	4a e7       	ldi	r20, 0x7A	; 122
 7c6:	55 e4       	ldi	r21, 0x45	; 69
 7c8:	6a 81       	ldd	r22, Y+2	; 0x02
 7ca:	7b 81       	ldd	r23, Y+3	; 0x03
 7cc:	8c 81       	ldd	r24, Y+4	; 0x04
 7ce:	9d 81       	ldd	r25, Y+5	; 0x05
 7d0:	d0 d2       	rcall	.+1440   	; 0xd72 <__mulsf3>
 7d2:	dc 01       	movw	r26, r24
 7d4:	cb 01       	movw	r24, r22
 7d6:	f8 01       	movw	r30, r16
 7d8:	80 83       	st	Z, r24
	if (__tmp < 1.0)
 7da:	91 83       	std	Z+1, r25	; 0x01
 7dc:	a2 83       	std	Z+2, r26	; 0x02
 7de:	b3 83       	std	Z+3, r27	; 0x03
 7e0:	ce 01       	movw	r24, r28
 7e2:	80 5b       	subi	r24, 0xB0	; 176
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	40 e8       	ldi	r20, 0x80	; 128
 7ec:	5f e3       	ldi	r21, 0x3F	; 63
 7ee:	fc 01       	movw	r30, r24
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
		__ticks = 1;
 7f8:	6e d1       	rcall	.+732    	; 0xad6 <__cmpsf2>
 7fa:	88 23       	and	r24, r24
 7fc:	4c f4       	brge	.+18     	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
 7fe:	ce 01       	movw	r24, r28
 800:	8c 5a       	subi	r24, 0xAC	; 172
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	fc 01       	movw	r30, r24
	else if (__tmp > 65535)
 80a:	31 83       	std	Z+1, r19	; 0x01
 80c:	20 83       	st	Z, r18
 80e:	65 c0       	rjmp	.+202    	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
 810:	ce 01       	movw	r24, r28
 812:	80 5b       	subi	r24, 0xB0	; 176
 814:	9f 4f       	sbci	r25, 0xFF	; 255
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	3f ef       	ldi	r19, 0xFF	; 255
 81a:	4f e7       	ldi	r20, 0x7F	; 127
 81c:	57 e4       	ldi	r21, 0x47	; 71
 81e:	fc 01       	movw	r30, r24
 820:	60 81       	ld	r22, Z
 822:	71 81       	ldd	r23, Z+1	; 0x01
 824:	82 81       	ldd	r24, Z+2	; 0x02
 826:	93 81       	ldd	r25, Z+3	; 0x03
 828:	a0 d2       	rcall	.+1344   	; 0xd6a <__gesf2>
 82a:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 82c:	0c f0       	brlt	.+2      	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
 82e:	44 c0       	rjmp	.+136    	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	40 e2       	ldi	r20, 0x20	; 32
 836:	51 e4       	ldi	r21, 0x41	; 65
 838:	6a 81       	ldd	r22, Y+2	; 0x02
 83a:	7b 81       	ldd	r23, Y+3	; 0x03
 83c:	8c 81       	ldd	r24, Y+4	; 0x04
 83e:	9d 81       	ldd	r25, Y+5	; 0x05
 840:	98 d2       	rcall	.+1328   	; 0xd72 <__mulsf3>
 842:	dc 01       	movw	r26, r24
 844:	cb 01       	movw	r24, r22
 846:	8e 01       	movw	r16, r28
 848:	0c 5a       	subi	r16, 0xAC	; 172
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	bc 01       	movw	r22, r24
 84e:	cd 01       	movw	r24, r26
 850:	ae d1       	rcall	.+860    	; 0xbae <__fixunssfsi>
 852:	dc 01       	movw	r26, r24
 854:	cb 01       	movw	r24, r22
 856:	f8 01       	movw	r30, r16
 858:	91 83       	std	Z+1, r25	; 0x01
 85a:	80 83       	st	Z, r24
 85c:	24 c0       	rjmp	.+72     	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
 85e:	ce 01       	movw	r24, r28
 860:	8a 5a       	subi	r24, 0xAA	; 170
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	20 e9       	ldi	r18, 0x90	; 144
 866:	31 e0       	ldi	r19, 0x01	; 1
 868:	fc 01       	movw	r30, r24
 86a:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 86c:	20 83       	st	Z, r18
 86e:	ce 01       	movw	r24, r28
 870:	8a 5a       	subi	r24, 0xAA	; 170
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	fc 01       	movw	r30, r24
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
 87e:	9e 01       	movw	r18, r28
 880:	2a 5a       	subi	r18, 0xAA	; 170
 882:	3f 4f       	sbci	r19, 0xFF	; 255
 884:	f9 01       	movw	r30, r18
 886:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 888:	80 83       	st	Z, r24
 88a:	ce 01       	movw	r24, r28
 88c:	8c 5a       	subi	r24, 0xAC	; 172
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	9e 01       	movw	r18, r28
 892:	2c 5a       	subi	r18, 0xAC	; 172
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	f9 01       	movw	r30, r18
 898:	20 81       	ld	r18, Z
 89a:	31 81       	ldd	r19, Z+1	; 0x01
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	31 09       	sbc	r19, r1
 8a0:	fc 01       	movw	r30, r24
 8a2:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8a4:	20 83       	st	Z, r18
 8a6:	ce 01       	movw	r24, r28
 8a8:	8c 5a       	subi	r24, 0xAC	; 172
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	91 81       	ldd	r25, Z+1	; 0x01
 8b2:	89 2b       	or	r24, r25
 8b4:	a1 f6       	brne	.-88     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8b6:	2b c0       	rjmp	.+86     	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
 8b8:	8e 01       	movw	r16, r28
 8ba:	0c 5a       	subi	r16, 0xAC	; 172
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	ce 01       	movw	r24, r28
 8c0:	80 5b       	subi	r24, 0xB0	; 176
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	fc 01       	movw	r30, r24
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	82 81       	ldd	r24, Z+2	; 0x02
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	6f d1       	rcall	.+734    	; 0xbae <__fixunssfsi>
 8d0:	dc 01       	movw	r26, r24
 8d2:	cb 01       	movw	r24, r22
 8d4:	f8 01       	movw	r30, r16
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	80 83       	st	Z, r24
 8da:	ce 01       	movw	r24, r28
 8dc:	88 5a       	subi	r24, 0xA8	; 168
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	9e 01       	movw	r18, r28
 8e2:	2c 5a       	subi	r18, 0xAC	; 172
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	f9 01       	movw	r30, r18
 8e8:	20 81       	ld	r18, Z
 8ea:	31 81       	ldd	r19, Z+1	; 0x01
 8ec:	fc 01       	movw	r30, r24
 8ee:	31 83       	std	Z+1, r19	; 0x01
 8f0:	20 83       	st	Z, r18
 8f2:	ce 01       	movw	r24, r28
 8f4:	88 5a       	subi	r24, 0xA8	; 168
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	fc 01       	movw	r30, r24
 8fa:	80 81       	ld	r24, Z
 8fc:	91 81       	ldd	r25, Z+1	; 0x01
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
 902:	9e 01       	movw	r18, r28
 904:	28 5a       	subi	r18, 0xA8	; 168
 906:	3f 4f       	sbci	r19, 0xFF	; 255
 908:	f9 01       	movw	r30, r18
 90a:	91 83       	std	Z+1, r25	; 0x01
 90c:	80 83       	st	Z, r24
			_delay_ms(100);
			TCNT1 = 0;
 90e:	8c e4       	ldi	r24, 0x4C	; 76
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	fc 01       	movw	r30, r24
 914:	11 82       	std	Z+1, r1	; 0x01
 916:	10 82       	st	Z, r1
			// TC
			TCCR1B = 0x41;
 918:	8e e4       	ldi	r24, 0x4E	; 78
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	21 e4       	ldi	r18, 0x41	; 65
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
			// 기록하였으니 다시 상승엣지 Set
			captFlag = 0;
 922:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			currentICR = 0;
 926:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 92a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
			pastICR = 0;
 92e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 932:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
			// 사용했던 Flag와 기록 초기화
		}
		
    }
 936:	00 cc       	rjmp	.-2048   	; 0x138 <main+0x8a>

00000938 <__vector_11>:
}

ISR(TIMER1_CAPT_vect){
 938:	1f 92       	push	r1
 93a:	0f 92       	push	r0
 93c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 940:	0f 92       	push	r0
 942:	11 24       	eor	r1, r1
 944:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 948:	0f 92       	push	r0
 94a:	2f 93       	push	r18
 94c:	8f 93       	push	r24
 94e:	9f 93       	push	r25
 950:	ef 93       	push	r30
 952:	ff 93       	push	r31
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
	if(TCCR1B & 0x40){
 95c:	8e e4       	ldi	r24, 0x4E	; 78
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	fc 01       	movw	r30, r24
 962:	80 81       	ld	r24, Z
 964:	88 2f       	mov	r24, r24
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	80 74       	andi	r24, 0x40	; 64
 96a:	99 27       	eor	r25, r25
 96c:	89 2b       	or	r24, r25
 96e:	91 f0       	breq	.+36     	; 0x994 <__vector_11+0x5c>
		// 상승엣지 인경우
		pastICR = ICR1;
 970:	86 e4       	ldi	r24, 0x46	; 70
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	fc 01       	movw	r30, r24
 976:	80 81       	ld	r24, Z
 978:	91 81       	ldd	r25, Z+1	; 0x01
 97a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <pastICR+0x1>
 97e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pastICR>
		TCCR1B = 0x01;
 982:	8e e4       	ldi	r24, 0x4E	; 78
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	21 e0       	ldi	r18, 0x01	; 1
 988:	fc 01       	movw	r30, r24
 98a:	20 83       	st	Z, r18
		// 하강엣지 Clear
		captFlag = 1;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(captFlag == 1){
			currentICR = ICR1;
			captFlag = 2;
		}
	}
}
 992:	10 c0       	rjmp	.+32     	; 0x9b4 <__vector_11+0x7c>
		captFlag = 1;
	}
	else{
		// 하강엣지 인경우
		// 시작 pastICR이 기록되었을때 작동되면 현재를 기록
		if(captFlag == 1){
 994:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 998:	81 30       	cpi	r24, 0x01	; 1
 99a:	61 f4       	brne	.+24     	; 0x9b4 <__vector_11+0x7c>
			currentICR = ICR1;
 99c:	86 e4       	ldi	r24, 0x46	; 70
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	fc 01       	movw	r30, r24
 9a2:	80 81       	ld	r24, Z
 9a4:	91 81       	ldd	r25, Z+1	; 0x01
 9a6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <currentICR+0x1>
 9aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentICR>
			captFlag = 2;
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 9b4:	00 00       	nop
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	9f 91       	pop	r25
 9c0:	8f 91       	pop	r24
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 9ca:	0f 90       	pop	r0
 9cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9d0:	0f 90       	pop	r0
 9d2:	1f 90       	pop	r1
 9d4:	18 95       	reti

000009d6 <UART0_Putch>:

void UART0_Putch(unsigned char data) // 송신
{
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	1f 92       	push	r1
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
 9e2:	00 00       	nop
 9e4:	8b e2       	ldi	r24, 0x2B	; 43
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	fc 01       	movw	r30, r24
 9ea:	80 81       	ld	r24, Z
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	80 72       	andi	r24, 0x20	; 32
 9f2:	99 27       	eor	r25, r25
 9f4:	89 2b       	or	r24, r25
 9f6:	b1 f3       	breq	.-20     	; 0x9e4 <UART0_Putch+0xe>
	UDR0 = data;
 9f8:	8c e2       	ldi	r24, 0x2C	; 44
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	29 81       	ldd	r18, Y+1	; 0x01
 9fe:	fc 01       	movw	r30, r24
 a00:	20 83       	st	Z, r18
}
 a02:	00 00       	nop
 a04:	0f 90       	pop	r0
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <__subsf3>:
 a0c:	50 58       	subi	r21, 0x80	; 128

00000a0e <__addsf3>:
 a0e:	bb 27       	eor	r27, r27
 a10:	aa 27       	eor	r26, r26
 a12:	0e d0       	rcall	.+28     	; 0xa30 <__addsf3x>
 a14:	70 c1       	rjmp	.+736    	; 0xcf6 <__fp_round>
 a16:	61 d1       	rcall	.+706    	; 0xcda <__fp_pscA>
 a18:	30 f0       	brcs	.+12     	; 0xa26 <__addsf3+0x18>
 a1a:	66 d1       	rcall	.+716    	; 0xce8 <__fp_pscB>
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <__addsf3+0x18>
 a1e:	31 f4       	brne	.+12     	; 0xa2c <__addsf3+0x1e>
 a20:	9f 3f       	cpi	r25, 0xFF	; 255
 a22:	11 f4       	brne	.+4      	; 0xa28 <__addsf3+0x1a>
 a24:	1e f4       	brtc	.+6      	; 0xa2c <__addsf3+0x1e>
 a26:	56 c1       	rjmp	.+684    	; 0xcd4 <__fp_nan>
 a28:	0e f4       	brtc	.+2      	; 0xa2c <__addsf3+0x1e>
 a2a:	e0 95       	com	r30
 a2c:	e7 fb       	bst	r30, 7
 a2e:	4c c1       	rjmp	.+664    	; 0xcc8 <__fp_inf>

00000a30 <__addsf3x>:
 a30:	e9 2f       	mov	r30, r25
 a32:	72 d1       	rcall	.+740    	; 0xd18 <__fp_split3>
 a34:	80 f3       	brcs	.-32     	; 0xa16 <__addsf3+0x8>
 a36:	ba 17       	cp	r27, r26
 a38:	62 07       	cpc	r22, r18
 a3a:	73 07       	cpc	r23, r19
 a3c:	84 07       	cpc	r24, r20
 a3e:	95 07       	cpc	r25, r21
 a40:	18 f0       	brcs	.+6      	; 0xa48 <__addsf3x+0x18>
 a42:	71 f4       	brne	.+28     	; 0xa60 <__addsf3x+0x30>
 a44:	9e f5       	brtc	.+102    	; 0xaac <__addsf3x+0x7c>
 a46:	8a c1       	rjmp	.+788    	; 0xd5c <__fp_zero>
 a48:	0e f4       	brtc	.+2      	; 0xa4c <__addsf3x+0x1c>
 a4a:	e0 95       	com	r30
 a4c:	0b 2e       	mov	r0, r27
 a4e:	ba 2f       	mov	r27, r26
 a50:	a0 2d       	mov	r26, r0
 a52:	0b 01       	movw	r0, r22
 a54:	b9 01       	movw	r22, r18
 a56:	90 01       	movw	r18, r0
 a58:	0c 01       	movw	r0, r24
 a5a:	ca 01       	movw	r24, r20
 a5c:	a0 01       	movw	r20, r0
 a5e:	11 24       	eor	r1, r1
 a60:	ff 27       	eor	r31, r31
 a62:	59 1b       	sub	r21, r25
 a64:	99 f0       	breq	.+38     	; 0xa8c <__addsf3x+0x5c>
 a66:	59 3f       	cpi	r21, 0xF9	; 249
 a68:	50 f4       	brcc	.+20     	; 0xa7e <__addsf3x+0x4e>
 a6a:	50 3e       	cpi	r21, 0xE0	; 224
 a6c:	68 f1       	brcs	.+90     	; 0xac8 <__addsf3x+0x98>
 a6e:	1a 16       	cp	r1, r26
 a70:	f0 40       	sbci	r31, 0x00	; 0
 a72:	a2 2f       	mov	r26, r18
 a74:	23 2f       	mov	r18, r19
 a76:	34 2f       	mov	r19, r20
 a78:	44 27       	eor	r20, r20
 a7a:	58 5f       	subi	r21, 0xF8	; 248
 a7c:	f3 cf       	rjmp	.-26     	; 0xa64 <__addsf3x+0x34>
 a7e:	46 95       	lsr	r20
 a80:	37 95       	ror	r19
 a82:	27 95       	ror	r18
 a84:	a7 95       	ror	r26
 a86:	f0 40       	sbci	r31, 0x00	; 0
 a88:	53 95       	inc	r21
 a8a:	c9 f7       	brne	.-14     	; 0xa7e <__addsf3x+0x4e>
 a8c:	7e f4       	brtc	.+30     	; 0xaac <__addsf3x+0x7c>
 a8e:	1f 16       	cp	r1, r31
 a90:	ba 0b       	sbc	r27, r26
 a92:	62 0b       	sbc	r22, r18
 a94:	73 0b       	sbc	r23, r19
 a96:	84 0b       	sbc	r24, r20
 a98:	ba f0       	brmi	.+46     	; 0xac8 <__addsf3x+0x98>
 a9a:	91 50       	subi	r25, 0x01	; 1
 a9c:	a1 f0       	breq	.+40     	; 0xac6 <__addsf3x+0x96>
 a9e:	ff 0f       	add	r31, r31
 aa0:	bb 1f       	adc	r27, r27
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	c2 f7       	brpl	.-16     	; 0xa9a <__addsf3x+0x6a>
 aaa:	0e c0       	rjmp	.+28     	; 0xac8 <__addsf3x+0x98>
 aac:	ba 0f       	add	r27, r26
 aae:	62 1f       	adc	r22, r18
 ab0:	73 1f       	adc	r23, r19
 ab2:	84 1f       	adc	r24, r20
 ab4:	48 f4       	brcc	.+18     	; 0xac8 <__addsf3x+0x98>
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f7 95       	ror	r31
 ac0:	9e 3f       	cpi	r25, 0xFE	; 254
 ac2:	08 f0       	brcs	.+2      	; 0xac6 <__addsf3x+0x96>
 ac4:	b3 cf       	rjmp	.-154    	; 0xa2c <__addsf3+0x1e>
 ac6:	93 95       	inc	r25
 ac8:	88 0f       	add	r24, r24
 aca:	08 f0       	brcs	.+2      	; 0xace <__addsf3x+0x9e>
 acc:	99 27       	eor	r25, r25
 ace:	ee 0f       	add	r30, r30
 ad0:	97 95       	ror	r25
 ad2:	87 95       	ror	r24
 ad4:	08 95       	ret

00000ad6 <__cmpsf2>:
 ad6:	d4 d0       	rcall	.+424    	; 0xc80 <__fp_cmp>
 ad8:	08 f4       	brcc	.+2      	; 0xadc <__cmpsf2+0x6>
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	08 95       	ret

00000ade <__divsf3>:
 ade:	0c d0       	rcall	.+24     	; 0xaf8 <__divsf3x>
 ae0:	0a c1       	rjmp	.+532    	; 0xcf6 <__fp_round>
 ae2:	02 d1       	rcall	.+516    	; 0xce8 <__fp_pscB>
 ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__divsf3+0x18>
 ae6:	f9 d0       	rcall	.+498    	; 0xcda <__fp_pscA>
 ae8:	30 f0       	brcs	.+12     	; 0xaf6 <__divsf3+0x18>
 aea:	21 f4       	brne	.+8      	; 0xaf4 <__divsf3+0x16>
 aec:	5f 3f       	cpi	r21, 0xFF	; 255
 aee:	19 f0       	breq	.+6      	; 0xaf6 <__divsf3+0x18>
 af0:	eb c0       	rjmp	.+470    	; 0xcc8 <__fp_inf>
 af2:	51 11       	cpse	r21, r1
 af4:	34 c1       	rjmp	.+616    	; 0xd5e <__fp_szero>
 af6:	ee c0       	rjmp	.+476    	; 0xcd4 <__fp_nan>

00000af8 <__divsf3x>:
 af8:	0f d1       	rcall	.+542    	; 0xd18 <__fp_split3>
 afa:	98 f3       	brcs	.-26     	; 0xae2 <__divsf3+0x4>

00000afc <__divsf3_pse>:
 afc:	99 23       	and	r25, r25
 afe:	c9 f3       	breq	.-14     	; 0xaf2 <__divsf3+0x14>
 b00:	55 23       	and	r21, r21
 b02:	b1 f3       	breq	.-20     	; 0xaf0 <__divsf3+0x12>
 b04:	95 1b       	sub	r25, r21
 b06:	55 0b       	sbc	r21, r21
 b08:	bb 27       	eor	r27, r27
 b0a:	aa 27       	eor	r26, r26
 b0c:	62 17       	cp	r22, r18
 b0e:	73 07       	cpc	r23, r19
 b10:	84 07       	cpc	r24, r20
 b12:	38 f0       	brcs	.+14     	; 0xb22 <__divsf3_pse+0x26>
 b14:	9f 5f       	subi	r25, 0xFF	; 255
 b16:	5f 4f       	sbci	r21, 0xFF	; 255
 b18:	22 0f       	add	r18, r18
 b1a:	33 1f       	adc	r19, r19
 b1c:	44 1f       	adc	r20, r20
 b1e:	aa 1f       	adc	r26, r26
 b20:	a9 f3       	breq	.-22     	; 0xb0c <__divsf3_pse+0x10>
 b22:	33 d0       	rcall	.+102    	; 0xb8a <__divsf3_pse+0x8e>
 b24:	0e 2e       	mov	r0, r30
 b26:	3a f0       	brmi	.+14     	; 0xb36 <__divsf3_pse+0x3a>
 b28:	e0 e8       	ldi	r30, 0x80	; 128
 b2a:	30 d0       	rcall	.+96     	; 0xb8c <__divsf3_pse+0x90>
 b2c:	91 50       	subi	r25, 0x01	; 1
 b2e:	50 40       	sbci	r21, 0x00	; 0
 b30:	e6 95       	lsr	r30
 b32:	00 1c       	adc	r0, r0
 b34:	ca f7       	brpl	.-14     	; 0xb28 <__divsf3_pse+0x2c>
 b36:	29 d0       	rcall	.+82     	; 0xb8a <__divsf3_pse+0x8e>
 b38:	fe 2f       	mov	r31, r30
 b3a:	27 d0       	rcall	.+78     	; 0xb8a <__divsf3_pse+0x8e>
 b3c:	66 0f       	add	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	bb 1f       	adc	r27, r27
 b44:	26 17       	cp	r18, r22
 b46:	37 07       	cpc	r19, r23
 b48:	48 07       	cpc	r20, r24
 b4a:	ab 07       	cpc	r26, r27
 b4c:	b0 e8       	ldi	r27, 0x80	; 128
 b4e:	09 f0       	breq	.+2      	; 0xb52 <__divsf3_pse+0x56>
 b50:	bb 0b       	sbc	r27, r27
 b52:	80 2d       	mov	r24, r0
 b54:	bf 01       	movw	r22, r30
 b56:	ff 27       	eor	r31, r31
 b58:	93 58       	subi	r25, 0x83	; 131
 b5a:	5f 4f       	sbci	r21, 0xFF	; 255
 b5c:	2a f0       	brmi	.+10     	; 0xb68 <__divsf3_pse+0x6c>
 b5e:	9e 3f       	cpi	r25, 0xFE	; 254
 b60:	51 05       	cpc	r21, r1
 b62:	68 f0       	brcs	.+26     	; 0xb7e <__divsf3_pse+0x82>
 b64:	b1 c0       	rjmp	.+354    	; 0xcc8 <__fp_inf>
 b66:	fb c0       	rjmp	.+502    	; 0xd5e <__fp_szero>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	ec f3       	brlt	.-6      	; 0xb66 <__divsf3_pse+0x6a>
 b6c:	98 3e       	cpi	r25, 0xE8	; 232
 b6e:	dc f3       	brlt	.-10     	; 0xb66 <__divsf3_pse+0x6a>
 b70:	86 95       	lsr	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__divsf3_pse+0x74>
 b7e:	88 0f       	add	r24, r24
 b80:	91 1d       	adc	r25, r1
 b82:	96 95       	lsr	r25
 b84:	87 95       	ror	r24
 b86:	97 f9       	bld	r25, 7
 b88:	08 95       	ret
 b8a:	e1 e0       	ldi	r30, 0x01	; 1
 b8c:	66 0f       	add	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	bb 1f       	adc	r27, r27
 b94:	62 17       	cp	r22, r18
 b96:	73 07       	cpc	r23, r19
 b98:	84 07       	cpc	r24, r20
 b9a:	ba 07       	cpc	r27, r26
 b9c:	20 f0       	brcs	.+8      	; 0xba6 <__divsf3_pse+0xaa>
 b9e:	62 1b       	sub	r22, r18
 ba0:	73 0b       	sbc	r23, r19
 ba2:	84 0b       	sbc	r24, r20
 ba4:	ba 0b       	sbc	r27, r26
 ba6:	ee 1f       	adc	r30, r30
 ba8:	88 f7       	brcc	.-30     	; 0xb8c <__divsf3_pse+0x90>
 baa:	e0 95       	com	r30
 bac:	08 95       	ret

00000bae <__fixunssfsi>:
 bae:	bc d0       	rcall	.+376    	; 0xd28 <__fp_splitA>
 bb0:	88 f0       	brcs	.+34     	; 0xbd4 <__fixunssfsi+0x26>
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	90 f0       	brcs	.+36     	; 0xbda <__fixunssfsi+0x2c>
 bb6:	b9 2f       	mov	r27, r25
 bb8:	99 27       	eor	r25, r25
 bba:	b7 51       	subi	r27, 0x17	; 23
 bbc:	a0 f0       	brcs	.+40     	; 0xbe6 <__fixunssfsi+0x38>
 bbe:	d1 f0       	breq	.+52     	; 0xbf4 <__fixunssfsi+0x46>
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	1a f0       	brmi	.+6      	; 0xbd0 <__fixunssfsi+0x22>
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__fixunssfsi+0x12>
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <__fixunssfsi+0x46>
 bd0:	b1 30       	cpi	r27, 0x01	; 1
 bd2:	81 f0       	breq	.+32     	; 0xbf4 <__fixunssfsi+0x46>
 bd4:	c3 d0       	rcall	.+390    	; 0xd5c <__fp_zero>
 bd6:	b1 e0       	ldi	r27, 0x01	; 1
 bd8:	08 95       	ret
 bda:	c0 c0       	rjmp	.+384    	; 0xd5c <__fp_zero>
 bdc:	67 2f       	mov	r22, r23
 bde:	78 2f       	mov	r23, r24
 be0:	88 27       	eor	r24, r24
 be2:	b8 5f       	subi	r27, 0xF8	; 248
 be4:	39 f0       	breq	.+14     	; 0xbf4 <__fixunssfsi+0x46>
 be6:	b9 3f       	cpi	r27, 0xF9	; 249
 be8:	cc f3       	brlt	.-14     	; 0xbdc <__fixunssfsi+0x2e>
 bea:	86 95       	lsr	r24
 bec:	77 95       	ror	r23
 bee:	67 95       	ror	r22
 bf0:	b3 95       	inc	r27
 bf2:	d9 f7       	brne	.-10     	; 0xbea <__fixunssfsi+0x3c>
 bf4:	3e f4       	brtc	.+14     	; 0xc04 <__fixunssfsi+0x56>
 bf6:	90 95       	com	r25
 bf8:	80 95       	com	r24
 bfa:	70 95       	com	r23
 bfc:	61 95       	neg	r22
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	08 95       	ret

00000c06 <__floatunsisf>:
 c06:	e8 94       	clt
 c08:	09 c0       	rjmp	.+18     	; 0xc1c <__floatsisf+0x12>

00000c0a <__floatsisf>:
 c0a:	97 fb       	bst	r25, 7
 c0c:	3e f4       	brtc	.+14     	; 0xc1c <__floatsisf+0x12>
 c0e:	90 95       	com	r25
 c10:	80 95       	com	r24
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255
 c18:	8f 4f       	sbci	r24, 0xFF	; 255
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	99 23       	and	r25, r25
 c1e:	a9 f0       	breq	.+42     	; 0xc4a <__floatsisf+0x40>
 c20:	f9 2f       	mov	r31, r25
 c22:	96 e9       	ldi	r25, 0x96	; 150
 c24:	bb 27       	eor	r27, r27
 c26:	93 95       	inc	r25
 c28:	f6 95       	lsr	r31
 c2a:	87 95       	ror	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b7 95       	ror	r27
 c32:	f1 11       	cpse	r31, r1
 c34:	f8 cf       	rjmp	.-16     	; 0xc26 <__floatsisf+0x1c>
 c36:	fa f4       	brpl	.+62     	; 0xc76 <__floatsisf+0x6c>
 c38:	bb 0f       	add	r27, r27
 c3a:	11 f4       	brne	.+4      	; 0xc40 <__floatsisf+0x36>
 c3c:	60 ff       	sbrs	r22, 0
 c3e:	1b c0       	rjmp	.+54     	; 0xc76 <__floatsisf+0x6c>
 c40:	6f 5f       	subi	r22, 0xFF	; 255
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	16 c0       	rjmp	.+44     	; 0xc76 <__floatsisf+0x6c>
 c4a:	88 23       	and	r24, r24
 c4c:	11 f0       	breq	.+4      	; 0xc52 <__floatsisf+0x48>
 c4e:	96 e9       	ldi	r25, 0x96	; 150
 c50:	11 c0       	rjmp	.+34     	; 0xc74 <__floatsisf+0x6a>
 c52:	77 23       	and	r23, r23
 c54:	21 f0       	breq	.+8      	; 0xc5e <__floatsisf+0x54>
 c56:	9e e8       	ldi	r25, 0x8E	; 142
 c58:	87 2f       	mov	r24, r23
 c5a:	76 2f       	mov	r23, r22
 c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__floatsisf+0x5e>
 c5e:	66 23       	and	r22, r22
 c60:	71 f0       	breq	.+28     	; 0xc7e <__floatsisf+0x74>
 c62:	96 e8       	ldi	r25, 0x86	; 134
 c64:	86 2f       	mov	r24, r22
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	2a f0       	brmi	.+10     	; 0xc76 <__floatsisf+0x6c>
 c6c:	9a 95       	dec	r25
 c6e:	66 0f       	add	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	da f7       	brpl	.-10     	; 0xc6c <__floatsisf+0x62>
 c76:	88 0f       	add	r24, r24
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <__fp_cmp>:
 c80:	99 0f       	add	r25, r25
 c82:	00 08       	sbc	r0, r0
 c84:	55 0f       	add	r21, r21
 c86:	aa 0b       	sbc	r26, r26
 c88:	e0 e8       	ldi	r30, 0x80	; 128
 c8a:	fe ef       	ldi	r31, 0xFE	; 254
 c8c:	16 16       	cp	r1, r22
 c8e:	17 06       	cpc	r1, r23
 c90:	e8 07       	cpc	r30, r24
 c92:	f9 07       	cpc	r31, r25
 c94:	c0 f0       	brcs	.+48     	; 0xcc6 <__fp_cmp+0x46>
 c96:	12 16       	cp	r1, r18
 c98:	13 06       	cpc	r1, r19
 c9a:	e4 07       	cpc	r30, r20
 c9c:	f5 07       	cpc	r31, r21
 c9e:	98 f0       	brcs	.+38     	; 0xcc6 <__fp_cmp+0x46>
 ca0:	62 1b       	sub	r22, r18
 ca2:	73 0b       	sbc	r23, r19
 ca4:	84 0b       	sbc	r24, r20
 ca6:	95 0b       	sbc	r25, r21
 ca8:	39 f4       	brne	.+14     	; 0xcb8 <__fp_cmp+0x38>
 caa:	0a 26       	eor	r0, r26
 cac:	61 f0       	breq	.+24     	; 0xcc6 <__fp_cmp+0x46>
 cae:	23 2b       	or	r18, r19
 cb0:	24 2b       	or	r18, r20
 cb2:	25 2b       	or	r18, r21
 cb4:	21 f4       	brne	.+8      	; 0xcbe <__fp_cmp+0x3e>
 cb6:	08 95       	ret
 cb8:	0a 26       	eor	r0, r26
 cba:	09 f4       	brne	.+2      	; 0xcbe <__fp_cmp+0x3e>
 cbc:	a1 40       	sbci	r26, 0x01	; 1
 cbe:	a6 95       	lsr	r26
 cc0:	8f ef       	ldi	r24, 0xFF	; 255
 cc2:	81 1d       	adc	r24, r1
 cc4:	81 1d       	adc	r24, r1
 cc6:	08 95       	ret

00000cc8 <__fp_inf>:
 cc8:	97 f9       	bld	r25, 7
 cca:	9f 67       	ori	r25, 0x7F	; 127
 ccc:	80 e8       	ldi	r24, 0x80	; 128
 cce:	70 e0       	ldi	r23, 0x00	; 0
 cd0:	60 e0       	ldi	r22, 0x00	; 0
 cd2:	08 95       	ret

00000cd4 <__fp_nan>:
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	80 ec       	ldi	r24, 0xC0	; 192
 cd8:	08 95       	ret

00000cda <__fp_pscA>:
 cda:	00 24       	eor	r0, r0
 cdc:	0a 94       	dec	r0
 cde:	16 16       	cp	r1, r22
 ce0:	17 06       	cpc	r1, r23
 ce2:	18 06       	cpc	r1, r24
 ce4:	09 06       	cpc	r0, r25
 ce6:	08 95       	ret

00000ce8 <__fp_pscB>:
 ce8:	00 24       	eor	r0, r0
 cea:	0a 94       	dec	r0
 cec:	12 16       	cp	r1, r18
 cee:	13 06       	cpc	r1, r19
 cf0:	14 06       	cpc	r1, r20
 cf2:	05 06       	cpc	r0, r21
 cf4:	08 95       	ret

00000cf6 <__fp_round>:
 cf6:	09 2e       	mov	r0, r25
 cf8:	03 94       	inc	r0
 cfa:	00 0c       	add	r0, r0
 cfc:	11 f4       	brne	.+4      	; 0xd02 <__fp_round+0xc>
 cfe:	88 23       	and	r24, r24
 d00:	52 f0       	brmi	.+20     	; 0xd16 <__fp_round+0x20>
 d02:	bb 0f       	add	r27, r27
 d04:	40 f4       	brcc	.+16     	; 0xd16 <__fp_round+0x20>
 d06:	bf 2b       	or	r27, r31
 d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0x18>
 d0a:	60 ff       	sbrs	r22, 0
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__fp_round+0x20>
 d0e:	6f 5f       	subi	r22, 0xFF	; 255
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	08 95       	ret

00000d18 <__fp_split3>:
 d18:	57 fd       	sbrc	r21, 7
 d1a:	90 58       	subi	r25, 0x80	; 128
 d1c:	44 0f       	add	r20, r20
 d1e:	55 1f       	adc	r21, r21
 d20:	59 f0       	breq	.+22     	; 0xd38 <__fp_splitA+0x10>
 d22:	5f 3f       	cpi	r21, 0xFF	; 255
 d24:	71 f0       	breq	.+28     	; 0xd42 <__fp_splitA+0x1a>
 d26:	47 95       	ror	r20

00000d28 <__fp_splitA>:
 d28:	88 0f       	add	r24, r24
 d2a:	97 fb       	bst	r25, 7
 d2c:	99 1f       	adc	r25, r25
 d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_splitA+0x20>
 d30:	9f 3f       	cpi	r25, 0xFF	; 255
 d32:	79 f0       	breq	.+30     	; 0xd52 <__fp_splitA+0x2a>
 d34:	87 95       	ror	r24
 d36:	08 95       	ret
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	14 06       	cpc	r1, r20
 d3e:	55 1f       	adc	r21, r21
 d40:	f2 cf       	rjmp	.-28     	; 0xd26 <__fp_split3+0xe>
 d42:	46 95       	lsr	r20
 d44:	f1 df       	rcall	.-30     	; 0xd28 <__fp_splitA>
 d46:	08 c0       	rjmp	.+16     	; 0xd58 <__fp_splitA+0x30>
 d48:	16 16       	cp	r1, r22
 d4a:	17 06       	cpc	r1, r23
 d4c:	18 06       	cpc	r1, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	f1 cf       	rjmp	.-30     	; 0xd34 <__fp_splitA+0xc>
 d52:	86 95       	lsr	r24
 d54:	71 05       	cpc	r23, r1
 d56:	61 05       	cpc	r22, r1
 d58:	08 94       	sec
 d5a:	08 95       	ret

00000d5c <__fp_zero>:
 d5c:	e8 94       	clt

00000d5e <__fp_szero>:
 d5e:	bb 27       	eor	r27, r27
 d60:	66 27       	eor	r22, r22
 d62:	77 27       	eor	r23, r23
 d64:	cb 01       	movw	r24, r22
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__gesf2>:
 d6a:	8a df       	rcall	.-236    	; 0xc80 <__fp_cmp>
 d6c:	08 f4       	brcc	.+2      	; 0xd70 <__gesf2+0x6>
 d6e:	8f ef       	ldi	r24, 0xFF	; 255
 d70:	08 95       	ret

00000d72 <__mulsf3>:
 d72:	0b d0       	rcall	.+22     	; 0xd8a <__mulsf3x>
 d74:	c0 cf       	rjmp	.-128    	; 0xcf6 <__fp_round>
 d76:	b1 df       	rcall	.-158    	; 0xcda <__fp_pscA>
 d78:	28 f0       	brcs	.+10     	; 0xd84 <__mulsf3+0x12>
 d7a:	b6 df       	rcall	.-148    	; 0xce8 <__fp_pscB>
 d7c:	18 f0       	brcs	.+6      	; 0xd84 <__mulsf3+0x12>
 d7e:	95 23       	and	r25, r21
 d80:	09 f0       	breq	.+2      	; 0xd84 <__mulsf3+0x12>
 d82:	a2 cf       	rjmp	.-188    	; 0xcc8 <__fp_inf>
 d84:	a7 cf       	rjmp	.-178    	; 0xcd4 <__fp_nan>
 d86:	11 24       	eor	r1, r1
 d88:	ea cf       	rjmp	.-44     	; 0xd5e <__fp_szero>

00000d8a <__mulsf3x>:
 d8a:	c6 df       	rcall	.-116    	; 0xd18 <__fp_split3>
 d8c:	a0 f3       	brcs	.-24     	; 0xd76 <__mulsf3+0x4>

00000d8e <__mulsf3_pse>:
 d8e:	95 9f       	mul	r25, r21
 d90:	d1 f3       	breq	.-12     	; 0xd86 <__mulsf3+0x14>
 d92:	95 0f       	add	r25, r21
 d94:	50 e0       	ldi	r21, 0x00	; 0
 d96:	55 1f       	adc	r21, r21
 d98:	62 9f       	mul	r22, r18
 d9a:	f0 01       	movw	r30, r0
 d9c:	72 9f       	mul	r23, r18
 d9e:	bb 27       	eor	r27, r27
 da0:	f0 0d       	add	r31, r0
 da2:	b1 1d       	adc	r27, r1
 da4:	63 9f       	mul	r22, r19
 da6:	aa 27       	eor	r26, r26
 da8:	f0 0d       	add	r31, r0
 daa:	b1 1d       	adc	r27, r1
 dac:	aa 1f       	adc	r26, r26
 dae:	64 9f       	mul	r22, r20
 db0:	66 27       	eor	r22, r22
 db2:	b0 0d       	add	r27, r0
 db4:	a1 1d       	adc	r26, r1
 db6:	66 1f       	adc	r22, r22
 db8:	82 9f       	mul	r24, r18
 dba:	22 27       	eor	r18, r18
 dbc:	b0 0d       	add	r27, r0
 dbe:	a1 1d       	adc	r26, r1
 dc0:	62 1f       	adc	r22, r18
 dc2:	73 9f       	mul	r23, r19
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	62 1f       	adc	r22, r18
 dca:	83 9f       	mul	r24, r19
 dcc:	a0 0d       	add	r26, r0
 dce:	61 1d       	adc	r22, r1
 dd0:	22 1f       	adc	r18, r18
 dd2:	74 9f       	mul	r23, r20
 dd4:	33 27       	eor	r19, r19
 dd6:	a0 0d       	add	r26, r0
 dd8:	61 1d       	adc	r22, r1
 dda:	23 1f       	adc	r18, r19
 ddc:	84 9f       	mul	r24, r20
 dde:	60 0d       	add	r22, r0
 de0:	21 1d       	adc	r18, r1
 de2:	82 2f       	mov	r24, r18
 de4:	76 2f       	mov	r23, r22
 de6:	6a 2f       	mov	r22, r26
 de8:	11 24       	eor	r1, r1
 dea:	9f 57       	subi	r25, 0x7F	; 127
 dec:	50 40       	sbci	r21, 0x00	; 0
 dee:	8a f0       	brmi	.+34     	; 0xe12 <__mulsf3_pse+0x84>
 df0:	e1 f0       	breq	.+56     	; 0xe2a <__mulsf3_pse+0x9c>
 df2:	88 23       	and	r24, r24
 df4:	4a f0       	brmi	.+18     	; 0xe08 <__mulsf3_pse+0x7a>
 df6:	ee 0f       	add	r30, r30
 df8:	ff 1f       	adc	r31, r31
 dfa:	bb 1f       	adc	r27, r27
 dfc:	66 1f       	adc	r22, r22
 dfe:	77 1f       	adc	r23, r23
 e00:	88 1f       	adc	r24, r24
 e02:	91 50       	subi	r25, 0x01	; 1
 e04:	50 40       	sbci	r21, 0x00	; 0
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <__mulsf3_pse+0x64>
 e08:	9e 3f       	cpi	r25, 0xFE	; 254
 e0a:	51 05       	cpc	r21, r1
 e0c:	70 f0       	brcs	.+28     	; 0xe2a <__mulsf3_pse+0x9c>
 e0e:	5c cf       	rjmp	.-328    	; 0xcc8 <__fp_inf>
 e10:	a6 cf       	rjmp	.-180    	; 0xd5e <__fp_szero>
 e12:	5f 3f       	cpi	r21, 0xFF	; 255
 e14:	ec f3       	brlt	.-6      	; 0xe10 <__mulsf3_pse+0x82>
 e16:	98 3e       	cpi	r25, 0xE8	; 232
 e18:	dc f3       	brlt	.-10     	; 0xe10 <__mulsf3_pse+0x82>
 e1a:	86 95       	lsr	r24
 e1c:	77 95       	ror	r23
 e1e:	67 95       	ror	r22
 e20:	b7 95       	ror	r27
 e22:	f7 95       	ror	r31
 e24:	e7 95       	ror	r30
 e26:	9f 5f       	subi	r25, 0xFF	; 255
 e28:	c1 f7       	brne	.-16     	; 0xe1a <__mulsf3_pse+0x8c>
 e2a:	fe 2b       	or	r31, r30
 e2c:	88 0f       	add	r24, r24
 e2e:	91 1d       	adc	r25, r1
 e30:	96 95       	lsr	r25
 e32:	87 95       	ror	r24
 e34:	97 f9       	bld	r25, 7
 e36:	08 95       	ret

00000e38 <__umulhisi3>:
 e38:	a2 9f       	mul	r26, r18
 e3a:	b0 01       	movw	r22, r0
 e3c:	b3 9f       	mul	r27, r19
 e3e:	c0 01       	movw	r24, r0
 e40:	a3 9f       	mul	r26, r19
 e42:	70 0d       	add	r23, r0
 e44:	81 1d       	adc	r24, r1
 e46:	11 24       	eor	r1, r1
 e48:	91 1d       	adc	r25, r1
 e4a:	b2 9f       	mul	r27, r18
 e4c:	70 0d       	add	r23, r0
 e4e:	81 1d       	adc	r24, r1
 e50:	11 24       	eor	r1, r1
 e52:	91 1d       	adc	r25, r1
 e54:	08 95       	ret

00000e56 <_exit>:
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
