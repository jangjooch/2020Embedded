
0702_SuperSonic02_ProfessorOne.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000c04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be1  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000889  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00002bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002cfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c2 c3       	rjmp	.+1924   	; 0x7b2 <__vector_11>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	70 c5       	rjmp	.+2784   	; 0xb8c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

unsigned int pastICR = 0;
unsigned int currentICR = 0;

int main(void)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	c1 55       	subi	r28, 0x51	; 81
  bc:	d1 09       	sbc	r29, r1
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
    TCCR1A = 0x00;
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
    // COM1A1 COM1A0 COM1B1 COM1B0 COM1C1 COM1C0 WGM11 WGM10
    // nomal 모드
    
    TCCR1B = 0x03;
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
    // ICNC1 ICES1 WGM13 WGM12 CS12 CS11 CS10
    // ICES3: Input Capture Edge Select
    // 0 이면 하강엣지, 1이면 상승엣지
    // 분주율 64
    
    TCCR1C = 0x00;
  da:	8a e7       	ldi	r24, 0x7A	; 122
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
    // FOC1A FOC1B FOC1C
    // OC1 출력 X
    // Input으로 받아 Input Cature형태로 진행해야 하니까
    TIMSK = 0x21;
  e2:	87 e5       	ldi	r24, 0x57	; 87
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 e2       	ldi	r18, 0x21	; 33
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
    TCNT1 = 100;
  ec:	8c e4       	ldi	r24, 0x4C	; 76
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e6       	ldi	r18, 0x64	; 100
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	31 83       	std	Z+1, r19	; 0x01
  f8:	20 83       	st	Z, r18
    // TOP설정
    
    DDRD |= 0x08;
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	21 e3       	ldi	r18, 0x31	; 49
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	28 60       	ori	r18, 0x08	; 8
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
    // PD4가 ICP1 이므로 echo의 값을 받으니 Input 설정
    // PD3은 Trigger 역할을 할것이므로 Output 설정
    
    UCSR0A = 0x0;
 10c:	8b e2       	ldi	r24, 0x2B	; 43
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
    UCSR0B = 0x98; // RXCIE1 = 1,수신완료 인터럽트 인에이블 , 송수신 인에이블= 1
 114:	8a e2       	ldi	r24, 0x2A	; 42
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	28 e9       	ldi	r18, 0x98	; 152
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
    UCSR0C = 0x06; // 비동 기, 데이터 8비트 모드
 11e:	85 e9       	ldi	r24, 0x95	; 149
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	26 e0       	ldi	r18, 0x06	; 6
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
    UBRR0H = 0;
 128:	80 e9       	ldi	r24, 0x90	; 144
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	10 82       	st	Z, r1
    UBRR0L = 103; //16MHz , BAUD 9600
 130:	89 e2       	ldi	r24, 0x29	; 41
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	27 e6       	ldi	r18, 0x67	; 103
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
    
	sei();
 13a:	78 94       	sei
	
    while (1) 
    {
		if(captFlag == 0){			
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	88 23       	and	r24, r24
 142:	09 f0       	breq	.+2      	; 0x146 <main+0x98>
 144:	11 c2       	rjmp	.+1058   	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
			TCCR1B = 0x43;
 146:	8e e4       	ldi	r24, 0x4E	; 78
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	23 e4       	ldi	r18, 0x43	; 67
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
			// Input Capture 상승엣지 Set
			PORTD = 0x00;
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	10 82       	st	Z, r1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a0 e8       	ldi	r26, 0x80	; 128
 15e:	bf e3       	ldi	r27, 0x3F	; 63
 160:	8e 83       	std	Y+6, r24	; 0x06
 162:	9f 83       	std	Y+7, r25	; 0x07
 164:	a8 87       	std	Y+8, r26	; 0x08
 166:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 168:	2b ea       	ldi	r18, 0xAB	; 171
 16a:	3a ea       	ldi	r19, 0xAA	; 170
 16c:	4a ea       	ldi	r20, 0xAA	; 170
 16e:	50 e4       	ldi	r21, 0x40	; 64
 170:	6e 81       	ldd	r22, Y+6	; 0x06
 172:	7f 81       	ldd	r23, Y+7	; 0x07
 174:	88 85       	ldd	r24, Y+8	; 0x08
 176:	99 85       	ldd	r25, Y+9	; 0x09
 178:	97 d4       	rcall	.+2350   	; 0xaa8 <__mulsf3>
 17a:	dc 01       	movw	r26, r24
 17c:	cb 01       	movw	r24, r22
 17e:	8c a7       	std	Y+44, r24	; 0x2c
 180:	9d a7       	std	Y+45, r25	; 0x2d
 182:	ae a7       	std	Y+46, r26	; 0x2e
 184:	bf a7       	std	Y+47, r27	; 0x2f
	__tmp2 = ((F_CPU) / 4e6) * __us;
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e8       	ldi	r20, 0x80	; 128
 18c:	50 e4       	ldi	r21, 0x40	; 64
 18e:	6e 81       	ldd	r22, Y+6	; 0x06
 190:	7f 81       	ldd	r23, Y+7	; 0x07
 192:	88 85       	ldd	r24, Y+8	; 0x08
 194:	99 85       	ldd	r25, Y+9	; 0x09
 196:	88 d4       	rcall	.+2320   	; 0xaa8 <__mulsf3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	88 ab       	std	Y+48, r24	; 0x30
 19e:	99 ab       	std	Y+49, r25	; 0x31
 1a0:	aa ab       	std	Y+50, r26	; 0x32
 1a2:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e8       	ldi	r20, 0x80	; 128
 1aa:	5f e3       	ldi	r21, 0x3F	; 63
 1ac:	6c a5       	ldd	r22, Y+44	; 0x2c
 1ae:	7d a5       	ldd	r23, Y+45	; 0x2d
 1b0:	8e a5       	ldd	r24, Y+46	; 0x2e
 1b2:	9f a5       	ldd	r25, Y+47	; 0x2f
 1b4:	68 d3       	rcall	.+1744   	; 0x886 <__cmpsf2>
 1b6:	88 23       	and	r24, r24
 1b8:	1c f4       	brge	.+6      	; 0x1c0 <main+0x112>
		__ticks = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8c ab       	std	Y+52, r24	; 0x34
 1be:	d1 c0       	rjmp	.+418    	; 0x362 <main+0x2b4>
	else if (__tmp2 > 65535)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	3f ef       	ldi	r19, 0xFF	; 255
 1c4:	4f e7       	ldi	r20, 0x7F	; 127
 1c6:	57 e4       	ldi	r21, 0x47	; 71
 1c8:	68 a9       	ldd	r22, Y+48	; 0x30
 1ca:	79 a9       	ldd	r23, Y+49	; 0x31
 1cc:	8a a9       	ldd	r24, Y+50	; 0x32
 1ce:	9b a9       	ldd	r25, Y+51	; 0x33
 1d0:	67 d4       	rcall	.+2254   	; 0xaa0 <__gesf2>
 1d2:	18 16       	cp	r1, r24
 1d4:	0c f0       	brlt	.+2      	; 0x1d8 <main+0x12a>
 1d6:	8a c0       	rjmp	.+276    	; 0x2ec <main+0x23e>
	{
		_delay_ms(__us / 1000.0);
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	4a e7       	ldi	r20, 0x7A	; 122
 1de:	54 e4       	ldi	r21, 0x44	; 68
 1e0:	6e 81       	ldd	r22, Y+6	; 0x06
 1e2:	7f 81       	ldd	r23, Y+7	; 0x07
 1e4:	88 85       	ldd	r24, Y+8	; 0x08
 1e6:	99 85       	ldd	r25, Y+9	; 0x09
 1e8:	52 d3       	rcall	.+1700   	; 0x88e <__divsf3>
 1ea:	dc 01       	movw	r26, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	8d ab       	std	Y+53, r24	; 0x35
 1f0:	9e ab       	std	Y+54, r25	; 0x36
 1f2:	af ab       	std	Y+55, r26	; 0x37
 1f4:	b8 af       	std	Y+56, r27	; 0x38

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	4a e7       	ldi	r20, 0x7A	; 122
 1fc:	55 e4       	ldi	r21, 0x45	; 69
 1fe:	6d a9       	ldd	r22, Y+53	; 0x35
 200:	7e a9       	ldd	r23, Y+54	; 0x36
 202:	8f a9       	ldd	r24, Y+55	; 0x37
 204:	98 ad       	ldd	r25, Y+56	; 0x38
 206:	50 d4       	rcall	.+2208   	; 0xaa8 <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	89 af       	std	Y+57, r24	; 0x39
 20e:	9a af       	std	Y+58, r25	; 0x3a
 210:	ab af       	std	Y+59, r26	; 0x3b
 212:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e8       	ldi	r20, 0x80	; 128
 21a:	5f e3       	ldi	r21, 0x3F	; 63
 21c:	69 ad       	ldd	r22, Y+57	; 0x39
 21e:	7a ad       	ldd	r23, Y+58	; 0x3a
 220:	8b ad       	ldd	r24, Y+59	; 0x3b
 222:	9c ad       	ldd	r25, Y+60	; 0x3c
 224:	30 d3       	rcall	.+1632   	; 0x886 <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	2c f4       	brge	.+10     	; 0x234 <main+0x186>
		__ticks = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9e af       	std	Y+62, r25	; 0x3e
 230:	8d af       	std	Y+61, r24	; 0x3d
 232:	45 c0       	rjmp	.+138    	; 0x2be <main+0x210>
	else if (__tmp > 65535)
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	3f ef       	ldi	r19, 0xFF	; 255
 238:	4f e7       	ldi	r20, 0x7F	; 127
 23a:	57 e4       	ldi	r21, 0x47	; 71
 23c:	69 ad       	ldd	r22, Y+57	; 0x39
 23e:	7a ad       	ldd	r23, Y+58	; 0x3a
 240:	8b ad       	ldd	r24, Y+59	; 0x3b
 242:	9c ad       	ldd	r25, Y+60	; 0x3c
 244:	2d d4       	rcall	.+2138   	; 0xaa0 <__gesf2>
 246:	18 16       	cp	r1, r24
 248:	8c f5       	brge	.+98     	; 0x2ac <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e2       	ldi	r20, 0x20	; 32
 250:	51 e4       	ldi	r21, 0x41	; 65
 252:	6d a9       	ldd	r22, Y+53	; 0x35
 254:	7e a9       	ldd	r23, Y+54	; 0x36
 256:	8f a9       	ldd	r24, Y+55	; 0x37
 258:	98 ad       	ldd	r25, Y+56	; 0x38
 25a:	26 d4       	rcall	.+2124   	; 0xaa8 <__mulsf3>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	7c d3       	rcall	.+1784   	; 0x95e <__fixunssfsi>
 266:	dc 01       	movw	r26, r24
 268:	cb 01       	movw	r24, r22
 26a:	9e af       	std	Y+62, r25	; 0x3e
 26c:	8d af       	std	Y+61, r24	; 0x3d
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <main+0x1f4>
 270:	20 e9       	ldi	r18, 0x90	; 144
 272:	31 e0       	ldi	r19, 0x01	; 1
 274:	ce 01       	movw	r24, r28
 276:	cf 96       	adiw	r24, 0x3f	; 63
 278:	fc 01       	movw	r30, r24
 27a:	31 83       	std	Z+1, r19	; 0x01
 27c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27e:	ce 01       	movw	r24, r28
 280:	cf 96       	adiw	r24, 0x3f	; 63
 282:	fc 01       	movw	r30, r24
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x1da>
 28c:	9e 01       	movw	r18, r28
 28e:	21 5c       	subi	r18, 0xC1	; 193
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	f9 01       	movw	r30, r18
 294:	91 83       	std	Z+1, r25	; 0x01
 296:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	8d ad       	ldd	r24, Y+61	; 0x3d
 29a:	9e ad       	ldd	r25, Y+62	; 0x3e
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	9e af       	std	Y+62, r25	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a0:	8d af       	std	Y+61, r24	; 0x3d
 2a2:	8d ad       	ldd	r24, Y+61	; 0x3d
 2a4:	9e ad       	ldd	r25, Y+62	; 0x3e
 2a6:	89 2b       	or	r24, r25
 2a8:	19 f7       	brne	.-58     	; 0x270 <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2aa:	5b c0       	rjmp	.+182    	; 0x362 <main+0x2b4>
 2ac:	69 ad       	ldd	r22, Y+57	; 0x39
 2ae:	7a ad       	ldd	r23, Y+58	; 0x3a
 2b0:	8b ad       	ldd	r24, Y+59	; 0x3b
 2b2:	9c ad       	ldd	r25, Y+60	; 0x3c
 2b4:	54 d3       	rcall	.+1704   	; 0x95e <__fixunssfsi>
 2b6:	dc 01       	movw	r26, r24
 2b8:	cb 01       	movw	r24, r22
 2ba:	9e af       	std	Y+62, r25	; 0x3e
 2bc:	8d af       	std	Y+61, r24	; 0x3d
 2be:	ce 01       	movw	r24, r28
 2c0:	8f 5b       	subi	r24, 0xBF	; 191
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	2d ad       	ldd	r18, Y+61	; 0x3d
 2c6:	3e ad       	ldd	r19, Y+62	; 0x3e
 2c8:	fc 01       	movw	r30, r24
 2ca:	31 83       	std	Z+1, r19	; 0x01
 2cc:	20 83       	st	Z, r18
 2ce:	ce 01       	movw	r24, r28
 2d0:	8f 5b       	subi	r24, 0xBF	; 191
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	fc 01       	movw	r30, r24
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x22c>
 2de:	9e 01       	movw	r18, r28
 2e0:	2f 5b       	subi	r18, 0xBF	; 191
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	f9 01       	movw	r30, r18
 2e6:	91 83       	std	Z+1, r25	; 0x01
 2e8:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 2ea:	3b c0       	rjmp	.+118    	; 0x362 <main+0x2b4>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4f e7       	ldi	r20, 0x7F	; 127
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	6c a5       	ldd	r22, Y+44	; 0x2c
 2f6:	7d a5       	ldd	r23, Y+45	; 0x2d
 2f8:	8e a5       	ldd	r24, Y+46	; 0x2e
 2fa:	9f a5       	ldd	r25, Y+47	; 0x2f
 2fc:	d1 d3       	rcall	.+1954   	; 0xaa0 <__gesf2>
 2fe:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 300:	44 f5       	brge	.+80     	; 0x352 <main+0x2a4>
 302:	8e 01       	movw	r16, r28
 304:	0d 5b       	subi	r16, 0xBD	; 189
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	68 a9       	ldd	r22, Y+48	; 0x30
 30a:	79 a9       	ldd	r23, Y+49	; 0x31
 30c:	8a a9       	ldd	r24, Y+50	; 0x32
 30e:	9b a9       	ldd	r25, Y+51	; 0x33
 310:	26 d3       	rcall	.+1612   	; 0x95e <__fixunssfsi>
 312:	dc 01       	movw	r26, r24
 314:	cb 01       	movw	r24, r22
 316:	f8 01       	movw	r30, r16
 318:	91 83       	std	Z+1, r25	; 0x01
 31a:	80 83       	st	Z, r24
 31c:	ce 01       	movw	r24, r28
 31e:	8b 5b       	subi	r24, 0xBB	; 187
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	9e 01       	movw	r18, r28
 324:	2d 5b       	subi	r18, 0xBD	; 189
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	31 81       	ldd	r19, Z+1	; 0x01
 32e:	fc 01       	movw	r30, r24
 330:	31 83       	std	Z+1, r19	; 0x01
 332:	20 83       	st	Z, r18
 334:	ce 01       	movw	r24, r28
 336:	8b 5b       	subi	r24, 0xBB	; 187
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	91 81       	ldd	r25, Z+1	; 0x01
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <main+0x292>
 344:	9e 01       	movw	r18, r28
 346:	2b 5b       	subi	r18, 0xBB	; 187
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	f9 01       	movw	r30, r18
 34c:	91 83       	std	Z+1, r25	; 0x01
 34e:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 350:	1b c0       	rjmp	.+54     	; 0x388 <main+0x2da>
 352:	6c a5       	ldd	r22, Y+44	; 0x2c
 354:	7d a5       	ldd	r23, Y+45	; 0x2d
 356:	8e a5       	ldd	r24, Y+46	; 0x2e
 358:	9f a5       	ldd	r25, Y+47	; 0x2f
 35a:	01 d3       	rcall	.+1538   	; 0x95e <__fixunssfsi>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	8c ab       	std	Y+52, r24	; 0x34
 362:	ce 01       	movw	r24, r28
 364:	89 5b       	subi	r24, 0xB9	; 185
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	2c a9       	ldd	r18, Y+52	; 0x34
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 36e:	ce 01       	movw	r24, r28
 370:	89 5b       	subi	r24, 0xB9	; 185
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	28 2f       	mov	r18, r24
 37a:	2a 95       	dec	r18
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x2cc>
 37e:	ce 01       	movw	r24, r28
 380:	89 5b       	subi	r24, 0xB9	; 185
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
			_delay_us(1);
			PORTD = 0x08;
 388:	82 e3       	ldi	r24, 0x32	; 50
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	28 e0       	ldi	r18, 0x08	; 8
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a0 e3       	ldi	r26, 0x30	; 48
 398:	b1 e4       	ldi	r27, 0x41	; 65
 39a:	8c 87       	std	Y+12, r24	; 0x0c
 39c:	9d 87       	std	Y+13, r25	; 0x0d
 39e:	ae 87       	std	Y+14, r26	; 0x0e
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 3a0:	bf 87       	std	Y+15, r27	; 0x0f
 3a2:	2b ea       	ldi	r18, 0xAB	; 171
 3a4:	3a ea       	ldi	r19, 0xAA	; 170
 3a6:	4a ea       	ldi	r20, 0xAA	; 170
 3a8:	50 e4       	ldi	r21, 0x40	; 64
 3aa:	6c 85       	ldd	r22, Y+12	; 0x0c
 3ac:	7d 85       	ldd	r23, Y+13	; 0x0d
 3ae:	8e 85       	ldd	r24, Y+14	; 0x0e
 3b0:	9f 85       	ldd	r25, Y+15	; 0x0f
 3b2:	7a d3       	rcall	.+1780   	; 0xaa8 <__mulsf3>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	88 8b       	std	Y+16, r24	; 0x10
 3ba:	99 8b       	std	Y+17, r25	; 0x11
 3bc:	aa 8b       	std	Y+18, r26	; 0x12
	__tmp2 = ((F_CPU) / 4e6) * __us;
 3be:	bb 8b       	std	Y+19, r27	; 0x13
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	40 e8       	ldi	r20, 0x80	; 128
 3c6:	50 e4       	ldi	r21, 0x40	; 64
 3c8:	6c 85       	ldd	r22, Y+12	; 0x0c
 3ca:	7d 85       	ldd	r23, Y+13	; 0x0d
 3cc:	8e 85       	ldd	r24, Y+14	; 0x0e
 3ce:	9f 85       	ldd	r25, Y+15	; 0x0f
 3d0:	6b d3       	rcall	.+1750   	; 0xaa8 <__mulsf3>
 3d2:	dc 01       	movw	r26, r24
 3d4:	cb 01       	movw	r24, r22
 3d6:	8c 8b       	std	Y+20, r24	; 0x14
 3d8:	9d 8b       	std	Y+21, r25	; 0x15
 3da:	ae 8b       	std	Y+22, r26	; 0x16
	if (__tmp < 1.0)
 3dc:	bf 8b       	std	Y+23, r27	; 0x17
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 e8       	ldi	r20, 0x80	; 128
 3e4:	5f e3       	ldi	r21, 0x3F	; 63
 3e6:	68 89       	ldd	r22, Y+16	; 0x10
 3e8:	79 89       	ldd	r23, Y+17	; 0x11
 3ea:	8a 89       	ldd	r24, Y+18	; 0x12
 3ec:	9b 89       	ldd	r25, Y+19	; 0x13
 3ee:	4b d2       	rcall	.+1174   	; 0x886 <__cmpsf2>
 3f0:	88 23       	and	r24, r24
		__ticks = 1;
 3f2:	1c f4       	brge	.+6      	; 0x3fa <main+0x34c>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	88 8f       	std	Y+24, r24	; 0x18
	else if (__tmp2 > 65535)
 3f8:	a7 c0       	rjmp	.+334    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	3f ef       	ldi	r19, 0xFF	; 255
 3fe:	4f e7       	ldi	r20, 0x7F	; 127
 400:	57 e4       	ldi	r21, 0x47	; 71
 402:	6c 89       	ldd	r22, Y+20	; 0x14
 404:	7d 89       	ldd	r23, Y+21	; 0x15
 406:	8e 89       	ldd	r24, Y+22	; 0x16
 408:	9f 89       	ldd	r25, Y+23	; 0x17
 40a:	4a d3       	rcall	.+1684   	; 0xaa0 <__gesf2>
 40c:	18 16       	cp	r1, r24
 40e:	0c f0       	brlt	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		_delay_ms(__us / 1000.0);
 410:	74 c0       	rjmp	.+232    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	4a e7       	ldi	r20, 0x7A	; 122
 418:	54 e4       	ldi	r21, 0x44	; 68
 41a:	6c 85       	ldd	r22, Y+12	; 0x0c
 41c:	7d 85       	ldd	r23, Y+13	; 0x0d
 41e:	8e 85       	ldd	r24, Y+14	; 0x0e
 420:	9f 85       	ldd	r25, Y+15	; 0x0f
 422:	35 d2       	rcall	.+1130   	; 0x88e <__divsf3>
 424:	dc 01       	movw	r26, r24
 426:	cb 01       	movw	r24, r22
 428:	89 8f       	std	Y+25, r24	; 0x19
 42a:	9a 8f       	std	Y+26, r25	; 0x1a
 42c:	ab 8f       	std	Y+27, r26	; 0x1b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 42e:	bc 8f       	std	Y+28, r27	; 0x1c
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	4a e7       	ldi	r20, 0x7A	; 122
 436:	55 e4       	ldi	r21, 0x45	; 69
 438:	69 8d       	ldd	r22, Y+25	; 0x19
 43a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 43c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 43e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 440:	33 d3       	rcall	.+1638   	; 0xaa8 <__mulsf3>
 442:	dc 01       	movw	r26, r24
 444:	cb 01       	movw	r24, r22
 446:	8d 8f       	std	Y+29, r24	; 0x1d
 448:	9e 8f       	std	Y+30, r25	; 0x1e
 44a:	af 8f       	std	Y+31, r26	; 0x1f
	if (__tmp < 1.0)
 44c:	b8 a3       	std	Y+32, r27	; 0x20
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	5f e3       	ldi	r21, 0x3F	; 63
 456:	6d 8d       	ldd	r22, Y+29	; 0x1d
 458:	7e 8d       	ldd	r23, Y+30	; 0x1e
 45a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 45c:	98 a1       	ldd	r25, Y+32	; 0x20
 45e:	13 d2       	rcall	.+1062   	; 0x886 <__cmpsf2>
 460:	88 23       	and	r24, r24
		__ticks = 1;
 462:	2c f4       	brge	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	9a a3       	std	Y+34, r25	; 0x22
	else if (__tmp > 65535)
 46a:	89 a3       	std	Y+33, r24	; 0x21
 46c:	3b c0       	rjmp	.+118    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	3f ef       	ldi	r19, 0xFF	; 255
 472:	4f e7       	ldi	r20, 0x7F	; 127
 474:	57 e4       	ldi	r21, 0x47	; 71
 476:	6d 8d       	ldd	r22, Y+29	; 0x1d
 478:	7e 8d       	ldd	r23, Y+30	; 0x1e
 47a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 47c:	98 a1       	ldd	r25, Y+32	; 0x20
 47e:	10 d3       	rcall	.+1568   	; 0xaa0 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 480:	18 16       	cp	r1, r24
 482:	3c f5       	brge	.+78     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e2       	ldi	r20, 0x20	; 32
 48a:	51 e4       	ldi	r21, 0x41	; 65
 48c:	69 8d       	ldd	r22, Y+25	; 0x19
 48e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 490:	8b 8d       	ldd	r24, Y+27	; 0x1b
 492:	9c 8d       	ldd	r25, Y+28	; 0x1c
 494:	09 d3       	rcall	.+1554   	; 0xaa8 <__mulsf3>
 496:	dc 01       	movw	r26, r24
 498:	cb 01       	movw	r24, r22
 49a:	bc 01       	movw	r22, r24
 49c:	cd 01       	movw	r24, r26
 49e:	5f d2       	rcall	.+1214   	; 0x95e <__fixunssfsi>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	9a a3       	std	Y+34, r25	; 0x22
 4a6:	89 a3       	std	Y+33, r24	; 0x21
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4aa:	80 e9       	ldi	r24, 0x90	; 144
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	9c a3       	std	Y+36, r25	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4b0:	8b a3       	std	Y+35, r24	; 0x23
 4b2:	8b a1       	ldd	r24, Y+35	; 0x23
 4b4:	9c a1       	ldd	r25, Y+36	; 0x24
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ba:	9c a3       	std	Y+36, r25	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4bc:	8b a3       	std	Y+35, r24	; 0x23
 4be:	89 a1       	ldd	r24, Y+33	; 0x21
 4c0:	9a a1       	ldd	r25, Y+34	; 0x22
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c6:	89 a3       	std	Y+33, r24	; 0x21
 4c8:	89 a1       	ldd	r24, Y+33	; 0x21
 4ca:	9a a1       	ldd	r25, Y+34	; 0x22
 4cc:	89 2b       	or	r24, r25
 4ce:	69 f7       	brne	.-38     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4d2:	6d 8d       	ldd	r22, Y+29	; 0x1d
 4d4:	7e 8d       	ldd	r23, Y+30	; 0x1e
 4d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4d8:	98 a1       	ldd	r25, Y+32	; 0x20
 4da:	41 d2       	rcall	.+1154   	; 0x95e <__fixunssfsi>
 4dc:	dc 01       	movw	r26, r24
 4de:	cb 01       	movw	r24, r22
 4e0:	9a a3       	std	Y+34, r25	; 0x22
 4e2:	89 a3       	std	Y+33, r24	; 0x21
 4e4:	89 a1       	ldd	r24, Y+33	; 0x21
 4e6:	9a a1       	ldd	r25, Y+34	; 0x22
 4e8:	9e a3       	std	Y+38, r25	; 0x26
 4ea:	8d a3       	std	Y+37, r24	; 0x25
 4ec:	8d a1       	ldd	r24, Y+37	; 0x25
 4ee:	9e a1       	ldd	r25, Y+38	; 0x26
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4f4:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 4f6:	8d a3       	std	Y+37, r24	; 0x25
 4f8:	27 c0       	rjmp	.+78     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	4f e7       	ldi	r20, 0x7F	; 127
 500:	53 e4       	ldi	r21, 0x43	; 67
 502:	68 89       	ldd	r22, Y+16	; 0x10
 504:	79 89       	ldd	r23, Y+17	; 0x11
 506:	8a 89       	ldd	r24, Y+18	; 0x12
 508:	9b 89       	ldd	r25, Y+19	; 0x13
 50a:	ca d2       	rcall	.+1428   	; 0xaa0 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 50c:	18 16       	cp	r1, r24
 50e:	a4 f4       	brge	.+40     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 510:	6c 89       	ldd	r22, Y+20	; 0x14
 512:	7d 89       	ldd	r23, Y+21	; 0x15
 514:	8e 89       	ldd	r24, Y+22	; 0x16
 516:	9f 89       	ldd	r25, Y+23	; 0x17
 518:	22 d2       	rcall	.+1092   	; 0x95e <__fixunssfsi>
 51a:	dc 01       	movw	r26, r24
 51c:	cb 01       	movw	r24, r22
 51e:	98 a7       	std	Y+40, r25	; 0x28
 520:	8f a3       	std	Y+39, r24	; 0x27
 522:	8f a1       	ldd	r24, Y+39	; 0x27
 524:	98 a5       	ldd	r25, Y+40	; 0x28
 526:	9a a7       	std	Y+42, r25	; 0x2a
 528:	89 a7       	std	Y+41, r24	; 0x29
 52a:	89 a5       	ldd	r24, Y+41	; 0x29
 52c:	9a a5       	ldd	r25, Y+42	; 0x2a
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 532:	9a a7       	std	Y+42, r25	; 0x2a
 534:	89 a7       	std	Y+41, r24	; 0x29
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 536:	0e c0       	rjmp	.+28     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 538:	68 89       	ldd	r22, Y+16	; 0x10
 53a:	79 89       	ldd	r23, Y+17	; 0x11
 53c:	8a 89       	ldd	r24, Y+18	; 0x12
 53e:	9b 89       	ldd	r25, Y+19	; 0x13
 540:	0e d2       	rcall	.+1052   	; 0x95e <__fixunssfsi>
 542:	dc 01       	movw	r26, r24
 544:	cb 01       	movw	r24, r22
 546:	88 8f       	std	Y+24, r24	; 0x18
 548:	88 8d       	ldd	r24, Y+24	; 0x18
 54a:	8b a7       	std	Y+43, r24	; 0x2b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 54c:	8b a5       	ldd	r24, Y+43	; 0x2b
 54e:	8a 95       	dec	r24
 550:	f1 f7       	brne	.-4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 552:	8b a7       	std	Y+43, r24	; 0x2b
			// Trigger Activate			
			_delay_us(11);
			TCNT1 = 0;
 554:	8c e4       	ldi	r24, 0x4C	; 76
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	fc 01       	movw	r30, r24
 55a:	11 82       	std	Z+1, r1	; 0x01
 55c:	10 82       	st	Z, r1
			PORTD = 0x00;
 55e:	82 e3       	ldi	r24, 0x32	; 50
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	fc 01       	movw	r30, r24
 564:	10 82       	st	Z, r1
 566:	ea cd       	rjmp	.-1068   	; 0x13c <main+0x8e>
			
		}
		else if(captFlag == 1){
 568:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	91 f4       	brne	.+36     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
			if(ICR1 > 65000){
 570:	86 e4       	ldi	r24, 0x46	; 70
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	fc 01       	movw	r30, r24
 576:	80 81       	ld	r24, Z
 578:	91 81       	ldd	r25, Z+1	; 0x01
 57a:	89 3e       	cpi	r24, 0xE9	; 233
 57c:	9d 4f       	sbci	r25, 0xFD	; 253
 57e:	08 f4       	brcc	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 580:	dd cd       	rjmp	.-1094   	; 0x13c <main+0x8e>
				captFlag == 2;
				pastICR = 0;
 582:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 586:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
				currentICR = 0;				
 58a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 58e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
 592:	d4 cd       	rjmp	.-1112   	; 0x13c <main+0x8e>
			}
		}
		else if(captFlag == 2){
 594:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	09 f0       	breq	.+2      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59c:	cf cd       	rjmp	.-1122   	; 0x13c <main+0x8e>
			unsigned int disGet = currentICR - pastICR;
 59e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <currentICR>
 5a2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <currentICR+0x1>
 5a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pastICR>
 5aa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <pastICR+0x1>
 5ae:	a9 01       	movw	r20, r18
 5b0:	48 1b       	sub	r20, r24
 5b2:	59 0b       	sbc	r21, r25
 5b4:	ca 01       	movw	r24, r20
 5b6:	9b 87       	std	Y+11, r25	; 0x0b
			TCNT1 = 0;
 5b8:	8a 87       	std	Y+10, r24	; 0x0a
 5ba:	8c e4       	ldi	r24, 0x4C	; 76
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	fc 01       	movw	r30, r24
 5c0:	11 82       	std	Z+1, r1	; 0x01
			// TC
			TCCR1B = 0x43;
 5c2:	10 82       	st	Z, r1
 5c4:	8e e4       	ldi	r24, 0x4E	; 78
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	23 e4       	ldi	r18, 0x43	; 67
 5ca:	fc 01       	movw	r30, r24
			// 기록하였으니 다시 상승엣지 Set
			captFlag = 0;
 5cc:	20 83       	st	Z, r18
 5ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			currentICR = 0;
 5d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <currentICR+0x1>
 5d6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <currentICR>
			pastICR = 0;
 5da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pastICR+0x1>
 5de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pastICR>
			// 사용했던 Flag와 기록 초기화
			
			disGet = disGet /15;
 5e2:	8a 85       	ldd	r24, Y+10	; 0x0a
 5e4:	9b 85       	ldd	r25, Y+11	; 0x0b
 5e6:	9c 01       	movw	r18, r24
 5e8:	a9 e8       	ldi	r26, 0x89	; 137
 5ea:	b8 e8       	ldi	r27, 0x88	; 136
 5ec:	c0 d2       	rcall	.+1408   	; 0xb6e <__umulhisi3>
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	9b 87       	std	Y+11, r25	; 0x0b
			
			unsigned char image = 0;
			
			if(disGet > 30){
 5fc:	8a 87       	std	Y+10, r24	; 0x0a
 5fe:	19 82       	std	Y+1, r1	; 0x01
 600:	8a 85       	ldd	r24, Y+10	; 0x0a
 602:	9b 85       	ldd	r25, Y+11	; 0x0b
				image = 0;
 604:	4f 97       	sbiw	r24, 0x1f	; 31
			}
			else if(disGet > 20){
 606:	10 f0       	brcs	.+4      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 608:	19 82       	std	Y+1, r1	; 0x01
 60a:	10 c0       	rjmp	.+32     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
				image = 1;
 60c:	8a 85       	ldd	r24, Y+10	; 0x0a
 60e:	9b 85       	ldd	r25, Y+11	; 0x0b
 610:	45 97       	sbiw	r24, 0x15	; 21
			}
			else if(disGet > 10){
 612:	18 f0       	brcs	.+6      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	89 83       	std	Y+1, r24	; 0x01
 618:	09 c0       	rjmp	.+18     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
				image = 2;
 61a:	8a 85       	ldd	r24, Y+10	; 0x0a
 61c:	9b 85       	ldd	r25, Y+11	; 0x0b
 61e:	0b 97       	sbiw	r24, 0x0b	; 11
			}
			else{
				image = 3;
 620:	18 f0       	brcs	.+6      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 622:	82 e0       	ldi	r24, 0x02	; 2
			}
			
			UART0_Putch(0xFF);
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	02 c0       	rjmp	.+4      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	89 83       	std	Y+1, r24	; 0x01
			UART0_Putch(disGet & 0xFF);
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0f d1       	rcall	.+542    	; 0x850 <UART0_Putch>
 632:	8a 85       	ldd	r24, Y+10	; 0x0a
			UART0_Putch(disGet >> 8);
 634:	9b 85       	ldd	r25, Y+11	; 0x0b
 636:	99 27       	eor	r25, r25
 638:	0b d1       	rcall	.+534    	; 0x850 <UART0_Putch>
 63a:	8a 85       	ldd	r24, Y+10	; 0x0a
 63c:	9b 85       	ldd	r25, Y+11	; 0x0b
 63e:	89 2f       	mov	r24, r25
			UART0_Putch(image);
 640:	99 27       	eor	r25, r25
 642:	06 d1       	rcall	.+524    	; 0x850 <UART0_Putch>
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 d1       	rcall	.+516    	; 0x850 <UART0_Putch>
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	a8 ec       	ldi	r26, 0xC8	; 200
 652:	b2 e4       	ldi	r27, 0x42	; 66
 654:	8a 83       	std	Y+2, r24	; 0x02
 656:	9b 83       	std	Y+3, r25	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 658:	ac 83       	std	Y+4, r26	; 0x04
 65a:	bd 83       	std	Y+5, r27	; 0x05
 65c:	8e 01       	movw	r16, r28
 65e:	08 5b       	subi	r16, 0xB8	; 184
 660:	1f 4f       	sbci	r17, 0xFF	; 255
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	4a e7       	ldi	r20, 0x7A	; 122
 668:	55 e4       	ldi	r21, 0x45	; 69
 66a:	6a 81       	ldd	r22, Y+2	; 0x02
 66c:	7b 81       	ldd	r23, Y+3	; 0x03
 66e:	8c 81       	ldd	r24, Y+4	; 0x04
 670:	9d 81       	ldd	r25, Y+5	; 0x05
 672:	1a d2       	rcall	.+1076   	; 0xaa8 <__mulsf3>
 674:	dc 01       	movw	r26, r24
 676:	cb 01       	movw	r24, r22
 678:	f8 01       	movw	r30, r16
 67a:	80 83       	st	Z, r24
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
 680:	b3 83       	std	Z+3, r27	; 0x03
 682:	ce 01       	movw	r24, r28
 684:	88 5b       	subi	r24, 0xB8	; 184
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	40 e8       	ldi	r20, 0x80	; 128
 68e:	5f e3       	ldi	r21, 0x3F	; 63
 690:	fc 01       	movw	r30, r24
 692:	60 81       	ld	r22, Z
 694:	71 81       	ldd	r23, Z+1	; 0x01
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	f5 d0       	rcall	.+490    	; 0x886 <__cmpsf2>
		__ticks = 1;
 69c:	88 23       	and	r24, r24
 69e:	4c f4       	brge	.+18     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6a0:	ce 01       	movw	r24, r28
 6a2:	84 5b       	subi	r24, 0xB4	; 180
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
	else if (__tmp > 65535)
 6ac:	31 83       	std	Z+1, r19	; 0x01
 6ae:	20 83       	st	Z, r18
 6b0:	65 c0       	rjmp	.+202    	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 6b2:	ce 01       	movw	r24, r28
 6b4:	88 5b       	subi	r24, 0xB8	; 184
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	3f ef       	ldi	r19, 0xFF	; 255
 6bc:	4f e7       	ldi	r20, 0x7F	; 127
 6be:	57 e4       	ldi	r21, 0x47	; 71
 6c0:	fc 01       	movw	r30, r24
 6c2:	60 81       	ld	r22, Z
 6c4:	71 81       	ldd	r23, Z+1	; 0x01
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	ea d1       	rcall	.+980    	; 0xaa0 <__gesf2>
 6cc:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6ce:	0c f0       	brlt	.+2      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6d0:	44 c0       	rjmp	.+136    	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	40 e2       	ldi	r20, 0x20	; 32
 6d8:	51 e4       	ldi	r21, 0x41	; 65
 6da:	6a 81       	ldd	r22, Y+2	; 0x02
 6dc:	7b 81       	ldd	r23, Y+3	; 0x03
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	9d 81       	ldd	r25, Y+5	; 0x05
 6e2:	e2 d1       	rcall	.+964    	; 0xaa8 <__mulsf3>
 6e4:	dc 01       	movw	r26, r24
 6e6:	cb 01       	movw	r24, r22
 6e8:	8e 01       	movw	r16, r28
 6ea:	04 5b       	subi	r16, 0xB4	; 180
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	bc 01       	movw	r22, r24
 6f0:	cd 01       	movw	r24, r26
 6f2:	35 d1       	rcall	.+618    	; 0x95e <__fixunssfsi>
 6f4:	dc 01       	movw	r26, r24
 6f6:	cb 01       	movw	r24, r22
 6f8:	f8 01       	movw	r30, r16
 6fa:	91 83       	std	Z+1, r25	; 0x01
 6fc:	80 83       	st	Z, r24
 6fe:	24 c0       	rjmp	.+72     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 700:	ce 01       	movw	r24, r28
 702:	82 5b       	subi	r24, 0xB2	; 178
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	20 e9       	ldi	r18, 0x90	; 144
 708:	31 e0       	ldi	r19, 0x01	; 1
 70a:	fc 01       	movw	r30, r24
 70c:	31 83       	std	Z+1, r19	; 0x01
 70e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 710:	ce 01       	movw	r24, r28
 712:	82 5b       	subi	r24, 0xB2	; 178
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	fc 01       	movw	r30, r24
 718:	80 81       	ld	r24, Z
 71a:	91 81       	ldd	r25, Z+1	; 0x01
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 720:	9e 01       	movw	r18, r28
 722:	22 5b       	subi	r18, 0xB2	; 178
 724:	3f 4f       	sbci	r19, 0xFF	; 255
 726:	f9 01       	movw	r30, r18
 728:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72a:	80 83       	st	Z, r24
 72c:	ce 01       	movw	r24, r28
 72e:	84 5b       	subi	r24, 0xB4	; 180
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	9e 01       	movw	r18, r28
 734:	24 5b       	subi	r18, 0xB4	; 180
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	f9 01       	movw	r30, r18
 73a:	20 81       	ld	r18, Z
 73c:	31 81       	ldd	r19, Z+1	; 0x01
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	31 09       	sbc	r19, r1
 742:	fc 01       	movw	r30, r24
 744:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 746:	20 83       	st	Z, r18
 748:	ce 01       	movw	r24, r28
 74a:	84 5b       	subi	r24, 0xB4	; 180
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	91 81       	ldd	r25, Z+1	; 0x01
 754:	89 2b       	or	r24, r25
 756:	a1 f6       	brne	.-88     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 758:	2b c0       	rjmp	.+86     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
 75a:	8e 01       	movw	r16, r28
 75c:	04 5b       	subi	r16, 0xB4	; 180
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	ce 01       	movw	r24, r28
 762:	88 5b       	subi	r24, 0xB8	; 184
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	fc 01       	movw	r30, r24
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	82 81       	ldd	r24, Z+2	; 0x02
 76e:	93 81       	ldd	r25, Z+3	; 0x03
 770:	f6 d0       	rcall	.+492    	; 0x95e <__fixunssfsi>
 772:	dc 01       	movw	r26, r24
 774:	cb 01       	movw	r24, r22
 776:	f8 01       	movw	r30, r16
 778:	91 83       	std	Z+1, r25	; 0x01
 77a:	80 83       	st	Z, r24
 77c:	ce 01       	movw	r24, r28
 77e:	80 5b       	subi	r24, 0xB0	; 176
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	9e 01       	movw	r18, r28
 784:	24 5b       	subi	r18, 0xB4	; 180
 786:	3f 4f       	sbci	r19, 0xFF	; 255
 788:	f9 01       	movw	r30, r18
 78a:	20 81       	ld	r18, Z
 78c:	31 81       	ldd	r19, Z+1	; 0x01
 78e:	fc 01       	movw	r30, r24
 790:	31 83       	std	Z+1, r19	; 0x01
 792:	20 83       	st	Z, r18
 794:	ce 01       	movw	r24, r28
 796:	80 5b       	subi	r24, 0xB0	; 176
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	fc 01       	movw	r30, r24
 79c:	80 81       	ld	r24, Z
 79e:	91 81       	ldd	r25, Z+1	; 0x01
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
 7a4:	9e 01       	movw	r18, r28
 7a6:	20 5b       	subi	r18, 0xB0	; 176
 7a8:	3f 4f       	sbci	r19, 0xFF	; 255
 7aa:	f9 01       	movw	r30, r18
 7ac:	91 83       	std	Z+1, r25	; 0x01
 7ae:	80 83       	st	Z, r24
			_delay_ms(100);
		}
		
    }
 7b0:	c5 cc       	rjmp	.-1654   	; 0x13c <main+0x8e>

000007b2 <__vector_11>:
}

ISR(TIMER1_CAPT_vect){
 7b2:	1f 92       	push	r1
 7b4:	0f 92       	push	r0
 7b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7ba:	0f 92       	push	r0
 7bc:	11 24       	eor	r1, r1
 7be:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7c2:	0f 92       	push	r0
 7c4:	2f 93       	push	r18
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
	if(TCCR1B & 0x40){
 7d6:	8e e4       	ldi	r24, 0x4E	; 78
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	fc 01       	movw	r30, r24
 7dc:	80 81       	ld	r24, Z
 7de:	88 2f       	mov	r24, r24
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	80 74       	andi	r24, 0x40	; 64
 7e4:	99 27       	eor	r25, r25
 7e6:	89 2b       	or	r24, r25
 7e8:	91 f0       	breq	.+36     	; 0x80e <__vector_11+0x5c>
		// 상승엣지 인경우
		pastICR = ICR1;
 7ea:	86 e4       	ldi	r24, 0x46	; 70
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	fc 01       	movw	r30, r24
 7f0:	80 81       	ld	r24, Z
 7f2:	91 81       	ldd	r25, Z+1	; 0x01
 7f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <pastICR+0x1>
 7f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pastICR>
		TCCR1B = 0x03;
 7fc:	8e e4       	ldi	r24, 0x4E	; 78
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	23 e0       	ldi	r18, 0x03	; 3
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
		// 하강엣지 Clear
		captFlag = 1;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(captFlag == 1){
			currentICR = ICR1;
			captFlag = 2;
		}
	}
}
 80c:	10 c0       	rjmp	.+32     	; 0x82e <__vector_11+0x7c>
		captFlag = 1;
	}
	else{
		// 하강엣지 인경우
		// 시작 pastICR이 기록되었을때 작동되면 현재를 기록
		if(captFlag == 1){
 80e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	61 f4       	brne	.+24     	; 0x82e <__vector_11+0x7c>
			currentICR = ICR1;
 816:	86 e4       	ldi	r24, 0x46	; 70
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	fc 01       	movw	r30, r24
 81c:	80 81       	ld	r24, Z
 81e:	91 81       	ldd	r25, Z+1	; 0x01
 820:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <currentICR+0x1>
 824:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentICR>
			captFlag = 2;
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 82e:	00 00       	nop
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	ff 91       	pop	r31
 836:	ef 91       	pop	r30
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	2f 91       	pop	r18
 83e:	0f 90       	pop	r0
 840:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 844:	0f 90       	pop	r0
 846:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <UART0_Putch>:

void UART0_Putch(unsigned char data) // 송신
{
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	1f 92       	push	r1
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
 85c:	00 00       	nop
 85e:	8b e2       	ldi	r24, 0x2B	; 43
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	fc 01       	movw	r30, r24
 864:	80 81       	ld	r24, Z
 866:	88 2f       	mov	r24, r24
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	80 72       	andi	r24, 0x20	; 32
 86c:	99 27       	eor	r25, r25
 86e:	89 2b       	or	r24, r25
 870:	b1 f3       	breq	.-20     	; 0x85e <UART0_Putch+0xe>
	UDR0 = data;
 872:	8c e2       	ldi	r24, 0x2C	; 44
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	29 81       	ldd	r18, Y+1	; 0x01
 878:	fc 01       	movw	r30, r24
 87a:	20 83       	st	Z, r18
}
 87c:	00 00       	nop
 87e:	0f 90       	pop	r0
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <__cmpsf2>:
 886:	97 d0       	rcall	.+302    	; 0x9b6 <__fp_cmp>
 888:	08 f4       	brcc	.+2      	; 0x88c <__cmpsf2+0x6>
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	08 95       	ret

0000088e <__divsf3>:
 88e:	0c d0       	rcall	.+24     	; 0x8a8 <__divsf3x>
 890:	cd c0       	rjmp	.+410    	; 0xa2c <__fp_round>
 892:	c5 d0       	rcall	.+394    	; 0xa1e <__fp_pscB>
 894:	40 f0       	brcs	.+16     	; 0x8a6 <__divsf3+0x18>
 896:	bc d0       	rcall	.+376    	; 0xa10 <__fp_pscA>
 898:	30 f0       	brcs	.+12     	; 0x8a6 <__divsf3+0x18>
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__divsf3+0x16>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	19 f0       	breq	.+6      	; 0x8a6 <__divsf3+0x18>
 8a0:	ae c0       	rjmp	.+348    	; 0x9fe <__fp_inf>
 8a2:	51 11       	cpse	r21, r1
 8a4:	f7 c0       	rjmp	.+494    	; 0xa94 <__fp_szero>
 8a6:	b1 c0       	rjmp	.+354    	; 0xa0a <__fp_nan>

000008a8 <__divsf3x>:
 8a8:	d2 d0       	rcall	.+420    	; 0xa4e <__fp_split3>
 8aa:	98 f3       	brcs	.-26     	; 0x892 <__divsf3+0x4>

000008ac <__divsf3_pse>:
 8ac:	99 23       	and	r25, r25
 8ae:	c9 f3       	breq	.-14     	; 0x8a2 <__divsf3+0x14>
 8b0:	55 23       	and	r21, r21
 8b2:	b1 f3       	breq	.-20     	; 0x8a0 <__divsf3+0x12>
 8b4:	95 1b       	sub	r25, r21
 8b6:	55 0b       	sbc	r21, r21
 8b8:	bb 27       	eor	r27, r27
 8ba:	aa 27       	eor	r26, r26
 8bc:	62 17       	cp	r22, r18
 8be:	73 07       	cpc	r23, r19
 8c0:	84 07       	cpc	r24, r20
 8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__divsf3_pse+0x26>
 8c4:	9f 5f       	subi	r25, 0xFF	; 255
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	44 1f       	adc	r20, r20
 8ce:	aa 1f       	adc	r26, r26
 8d0:	a9 f3       	breq	.-22     	; 0x8bc <__divsf3_pse+0x10>
 8d2:	33 d0       	rcall	.+102    	; 0x93a <__divsf3_pse+0x8e>
 8d4:	0e 2e       	mov	r0, r30
 8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x3a>
 8d8:	e0 e8       	ldi	r30, 0x80	; 128
 8da:	30 d0       	rcall	.+96     	; 0x93c <__divsf3_pse+0x90>
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	e6 95       	lsr	r30
 8e2:	00 1c       	adc	r0, r0
 8e4:	ca f7       	brpl	.-14     	; 0x8d8 <__divsf3_pse+0x2c>
 8e6:	29 d0       	rcall	.+82     	; 0x93a <__divsf3_pse+0x8e>
 8e8:	fe 2f       	mov	r31, r30
 8ea:	27 d0       	rcall	.+78     	; 0x93a <__divsf3_pse+0x8e>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	bb 1f       	adc	r27, r27
 8f4:	26 17       	cp	r18, r22
 8f6:	37 07       	cpc	r19, r23
 8f8:	48 07       	cpc	r20, r24
 8fa:	ab 07       	cpc	r26, r27
 8fc:	b0 e8       	ldi	r27, 0x80	; 128
 8fe:	09 f0       	breq	.+2      	; 0x902 <__divsf3_pse+0x56>
 900:	bb 0b       	sbc	r27, r27
 902:	80 2d       	mov	r24, r0
 904:	bf 01       	movw	r22, r30
 906:	ff 27       	eor	r31, r31
 908:	93 58       	subi	r25, 0x83	; 131
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	2a f0       	brmi	.+10     	; 0x918 <__divsf3_pse+0x6c>
 90e:	9e 3f       	cpi	r25, 0xFE	; 254
 910:	51 05       	cpc	r21, r1
 912:	68 f0       	brcs	.+26     	; 0x92e <__divsf3_pse+0x82>
 914:	74 c0       	rjmp	.+232    	; 0x9fe <__fp_inf>
 916:	be c0       	rjmp	.+380    	; 0xa94 <__fp_szero>
 918:	5f 3f       	cpi	r21, 0xFF	; 255
 91a:	ec f3       	brlt	.-6      	; 0x916 <__divsf3_pse+0x6a>
 91c:	98 3e       	cpi	r25, 0xE8	; 232
 91e:	dc f3       	brlt	.-10     	; 0x916 <__divsf3_pse+0x6a>
 920:	86 95       	lsr	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	f7 95       	ror	r31
 92a:	9f 5f       	subi	r25, 0xFF	; 255
 92c:	c9 f7       	brne	.-14     	; 0x920 <__divsf3_pse+0x74>
 92e:	88 0f       	add	r24, r24
 930:	91 1d       	adc	r25, r1
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret
 93a:	e1 e0       	ldi	r30, 0x01	; 1
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	bb 1f       	adc	r27, r27
 944:	62 17       	cp	r22, r18
 946:	73 07       	cpc	r23, r19
 948:	84 07       	cpc	r24, r20
 94a:	ba 07       	cpc	r27, r26
 94c:	20 f0       	brcs	.+8      	; 0x956 <__divsf3_pse+0xaa>
 94e:	62 1b       	sub	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	ba 0b       	sbc	r27, r26
 956:	ee 1f       	adc	r30, r30
 958:	88 f7       	brcc	.-30     	; 0x93c <__divsf3_pse+0x90>
 95a:	e0 95       	com	r30
 95c:	08 95       	ret

0000095e <__fixunssfsi>:
 95e:	7f d0       	rcall	.+254    	; 0xa5e <__fp_splitA>
 960:	88 f0       	brcs	.+34     	; 0x984 <__fixunssfsi+0x26>
 962:	9f 57       	subi	r25, 0x7F	; 127
 964:	90 f0       	brcs	.+36     	; 0x98a <__fixunssfsi+0x2c>
 966:	b9 2f       	mov	r27, r25
 968:	99 27       	eor	r25, r25
 96a:	b7 51       	subi	r27, 0x17	; 23
 96c:	a0 f0       	brcs	.+40     	; 0x996 <__fixunssfsi+0x38>
 96e:	d1 f0       	breq	.+52     	; 0x9a4 <__fixunssfsi+0x46>
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	1a f0       	brmi	.+6      	; 0x980 <__fixunssfsi+0x22>
 97a:	ba 95       	dec	r27
 97c:	c9 f7       	brne	.-14     	; 0x970 <__fixunssfsi+0x12>
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__fixunssfsi+0x46>
 980:	b1 30       	cpi	r27, 0x01	; 1
 982:	81 f0       	breq	.+32     	; 0x9a4 <__fixunssfsi+0x46>
 984:	86 d0       	rcall	.+268    	; 0xa92 <__fp_zero>
 986:	b1 e0       	ldi	r27, 0x01	; 1
 988:	08 95       	ret
 98a:	83 c0       	rjmp	.+262    	; 0xa92 <__fp_zero>
 98c:	67 2f       	mov	r22, r23
 98e:	78 2f       	mov	r23, r24
 990:	88 27       	eor	r24, r24
 992:	b8 5f       	subi	r27, 0xF8	; 248
 994:	39 f0       	breq	.+14     	; 0x9a4 <__fixunssfsi+0x46>
 996:	b9 3f       	cpi	r27, 0xF9	; 249
 998:	cc f3       	brlt	.-14     	; 0x98c <__fixunssfsi+0x2e>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b3 95       	inc	r27
 9a2:	d9 f7       	brne	.-10     	; 0x99a <__fixunssfsi+0x3c>
 9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__fixunssfsi+0x56>
 9a6:	90 95       	com	r25
 9a8:	80 95       	com	r24
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	08 95       	ret

000009b6 <__fp_cmp>:
 9b6:	99 0f       	add	r25, r25
 9b8:	00 08       	sbc	r0, r0
 9ba:	55 0f       	add	r21, r21
 9bc:	aa 0b       	sbc	r26, r26
 9be:	e0 e8       	ldi	r30, 0x80	; 128
 9c0:	fe ef       	ldi	r31, 0xFE	; 254
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	e8 07       	cpc	r30, r24
 9c8:	f9 07       	cpc	r31, r25
 9ca:	c0 f0       	brcs	.+48     	; 0x9fc <__fp_cmp+0x46>
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	98 f0       	brcs	.+38     	; 0x9fc <__fp_cmp+0x46>
 9d6:	62 1b       	sub	r22, r18
 9d8:	73 0b       	sbc	r23, r19
 9da:	84 0b       	sbc	r24, r20
 9dc:	95 0b       	sbc	r25, r21
 9de:	39 f4       	brne	.+14     	; 0x9ee <__fp_cmp+0x38>
 9e0:	0a 26       	eor	r0, r26
 9e2:	61 f0       	breq	.+24     	; 0x9fc <__fp_cmp+0x46>
 9e4:	23 2b       	or	r18, r19
 9e6:	24 2b       	or	r18, r20
 9e8:	25 2b       	or	r18, r21
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <__fp_cmp+0x3e>
 9ec:	08 95       	ret
 9ee:	0a 26       	eor	r0, r26
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <__fp_cmp+0x3e>
 9f2:	a1 40       	sbci	r26, 0x01	; 1
 9f4:	a6 95       	lsr	r26
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	81 1d       	adc	r24, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	08 95       	ret

000009fe <__fp_inf>:
 9fe:	97 f9       	bld	r25, 7
 a00:	9f 67       	ori	r25, 0x7F	; 127
 a02:	80 e8       	ldi	r24, 0x80	; 128
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	08 95       	ret

00000a0a <__fp_nan>:
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	08 95       	ret

00000a10 <__fp_pscA>:
 a10:	00 24       	eor	r0, r0
 a12:	0a 94       	dec	r0
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	09 06       	cpc	r0, r25
 a1c:	08 95       	ret

00000a1e <__fp_pscB>:
 a1e:	00 24       	eor	r0, r0
 a20:	0a 94       	dec	r0
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	05 06       	cpc	r0, r21
 a2a:	08 95       	ret

00000a2c <__fp_round>:
 a2c:	09 2e       	mov	r0, r25
 a2e:	03 94       	inc	r0
 a30:	00 0c       	add	r0, r0
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_round+0xc>
 a34:	88 23       	and	r24, r24
 a36:	52 f0       	brmi	.+20     	; 0xa4c <__fp_round+0x20>
 a38:	bb 0f       	add	r27, r27
 a3a:	40 f4       	brcc	.+16     	; 0xa4c <__fp_round+0x20>
 a3c:	bf 2b       	or	r27, r31
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0x18>
 a40:	60 ff       	sbrs	r22, 0
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__fp_round+0x20>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__gesf2>:
 aa0:	8a df       	rcall	.-236    	; 0x9b6 <__fp_cmp>
 aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__gesf2+0x6>
 aa4:	8f ef       	ldi	r24, 0xFF	; 255
 aa6:	08 95       	ret

00000aa8 <__mulsf3>:
 aa8:	0b d0       	rcall	.+22     	; 0xac0 <__mulsf3x>
 aaa:	c0 cf       	rjmp	.-128    	; 0xa2c <__fp_round>
 aac:	b1 df       	rcall	.-158    	; 0xa10 <__fp_pscA>
 aae:	28 f0       	brcs	.+10     	; 0xaba <__mulsf3+0x12>
 ab0:	b6 df       	rcall	.-148    	; 0xa1e <__fp_pscB>
 ab2:	18 f0       	brcs	.+6      	; 0xaba <__mulsf3+0x12>
 ab4:	95 23       	and	r25, r21
 ab6:	09 f0       	breq	.+2      	; 0xaba <__mulsf3+0x12>
 ab8:	a2 cf       	rjmp	.-188    	; 0x9fe <__fp_inf>
 aba:	a7 cf       	rjmp	.-178    	; 0xa0a <__fp_nan>
 abc:	11 24       	eor	r1, r1
 abe:	ea cf       	rjmp	.-44     	; 0xa94 <__fp_szero>

00000ac0 <__mulsf3x>:
 ac0:	c6 df       	rcall	.-116    	; 0xa4e <__fp_split3>
 ac2:	a0 f3       	brcs	.-24     	; 0xaac <__mulsf3+0x4>

00000ac4 <__mulsf3_pse>:
 ac4:	95 9f       	mul	r25, r21
 ac6:	d1 f3       	breq	.-12     	; 0xabc <__mulsf3+0x14>
 ac8:	95 0f       	add	r25, r21
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	55 1f       	adc	r21, r21
 ace:	62 9f       	mul	r22, r18
 ad0:	f0 01       	movw	r30, r0
 ad2:	72 9f       	mul	r23, r18
 ad4:	bb 27       	eor	r27, r27
 ad6:	f0 0d       	add	r31, r0
 ad8:	b1 1d       	adc	r27, r1
 ada:	63 9f       	mul	r22, r19
 adc:	aa 27       	eor	r26, r26
 ade:	f0 0d       	add	r31, r0
 ae0:	b1 1d       	adc	r27, r1
 ae2:	aa 1f       	adc	r26, r26
 ae4:	64 9f       	mul	r22, r20
 ae6:	66 27       	eor	r22, r22
 ae8:	b0 0d       	add	r27, r0
 aea:	a1 1d       	adc	r26, r1
 aec:	66 1f       	adc	r22, r22
 aee:	82 9f       	mul	r24, r18
 af0:	22 27       	eor	r18, r18
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	62 1f       	adc	r22, r18
 af8:	73 9f       	mul	r23, r19
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	62 1f       	adc	r22, r18
 b00:	83 9f       	mul	r24, r19
 b02:	a0 0d       	add	r26, r0
 b04:	61 1d       	adc	r22, r1
 b06:	22 1f       	adc	r18, r18
 b08:	74 9f       	mul	r23, r20
 b0a:	33 27       	eor	r19, r19
 b0c:	a0 0d       	add	r26, r0
 b0e:	61 1d       	adc	r22, r1
 b10:	23 1f       	adc	r18, r19
 b12:	84 9f       	mul	r24, r20
 b14:	60 0d       	add	r22, r0
 b16:	21 1d       	adc	r18, r1
 b18:	82 2f       	mov	r24, r18
 b1a:	76 2f       	mov	r23, r22
 b1c:	6a 2f       	mov	r22, r26
 b1e:	11 24       	eor	r1, r1
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	8a f0       	brmi	.+34     	; 0xb48 <__mulsf3_pse+0x84>
 b26:	e1 f0       	breq	.+56     	; 0xb60 <__mulsf3_pse+0x9c>
 b28:	88 23       	and	r24, r24
 b2a:	4a f0       	brmi	.+18     	; 0xb3e <__mulsf3_pse+0x7a>
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	bb 1f       	adc	r27, r27
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__mulsf3_pse+0x64>
 b3e:	9e 3f       	cpi	r25, 0xFE	; 254
 b40:	51 05       	cpc	r21, r1
 b42:	70 f0       	brcs	.+28     	; 0xb60 <__mulsf3_pse+0x9c>
 b44:	5c cf       	rjmp	.-328    	; 0x9fe <__fp_inf>
 b46:	a6 cf       	rjmp	.-180    	; 0xa94 <__fp_szero>
 b48:	5f 3f       	cpi	r21, 0xFF	; 255
 b4a:	ec f3       	brlt	.-6      	; 0xb46 <__mulsf3_pse+0x82>
 b4c:	98 3e       	cpi	r25, 0xE8	; 232
 b4e:	dc f3       	brlt	.-10     	; 0xb46 <__mulsf3_pse+0x82>
 b50:	86 95       	lsr	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	b7 95       	ror	r27
 b58:	f7 95       	ror	r31
 b5a:	e7 95       	ror	r30
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	c1 f7       	brne	.-16     	; 0xb50 <__mulsf3_pse+0x8c>
 b60:	fe 2b       	or	r31, r30
 b62:	88 0f       	add	r24, r24
 b64:	91 1d       	adc	r25, r1
 b66:	96 95       	lsr	r25
 b68:	87 95       	ror	r24
 b6a:	97 f9       	bld	r25, 7
 b6c:	08 95       	ret

00000b6e <__umulhisi3>:
 b6e:	a2 9f       	mul	r26, r18
 b70:	b0 01       	movw	r22, r0
 b72:	b3 9f       	mul	r27, r19
 b74:	c0 01       	movw	r24, r0
 b76:	a3 9f       	mul	r26, r19
 b78:	70 0d       	add	r23, r0
 b7a:	81 1d       	adc	r24, r1
 b7c:	11 24       	eor	r1, r1
 b7e:	91 1d       	adc	r25, r1
 b80:	b2 9f       	mul	r27, r18
 b82:	70 0d       	add	r23, r0
 b84:	81 1d       	adc	r24, r1
 b86:	11 24       	eor	r1, r1
 b88:	91 1d       	adc	r25, r1
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
