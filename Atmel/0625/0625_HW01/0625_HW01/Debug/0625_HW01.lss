
0625_HW01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000582  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000979  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084c  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ed  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f6  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	38 c1       	rjmp	.+624    	; 0x276 <__vector_1>
   6:	00 00       	nop
   8:	5f c1       	rjmp	.+702    	; 0x2c8 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	eb c0       	rjmp	.+470    	; 0x220 <__vector_18>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	64 c2       	rjmp	.+1224   	; 0x57e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/delay.h>

unsigned char led = 1;

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2e 97       	sbiw	r28, 0x0e	; 14
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	DDRD = 0xF0;
  cc:	81 e3       	ldi	r24, 0x31	; 49
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	20 ef       	ldi	r18, 0xF0	; 240
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	PORTD = 0x03;
  d6:	82 e3       	ldi	r24, 0x32	; 50
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	DDRB = 0xFF;
  e0:	87 e3       	ldi	r24, 0x37	; 55
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	
	EICRA = 0b00001010;
  ea:	8a e6       	ldi	r24, 0x6A	; 106
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2a e0       	ldi	r18, 0x0A	; 10
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	// Falling Edge
	EIMSK = 0x03;
  f4:	89 e5       	ldi	r24, 0x59	; 89
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	23 e0       	ldi	r18, 0x03	; 3
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	// INT0 INT1 Enable
		
	UCSR0A = 0x00;
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	10 82       	st	Z, r1
	// RXCn TXCn UDREn FEn | DORn UPEn U2Xn MPCMn
	// 비동기 방식
	// 멀티프로세서 통신모드 Enable -> 0이 Enable임
	UCSR0B = 0x98;
 106:	8a e2       	ldi	r24, 0x2A	; 42
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	28 e9       	ldi	r18, 0x98	; 152
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	// RXCIEn TXCIEn UDRIEn RXENn | TNENn UCSZ2n RXB8n TXB8n
	// RXCIE 수신완료 Interrupt Enable Set
	// RXENn 수신기 Enable Set
	// TNENn 송신기 Enable Set
	UCSR0C = 0x06;
 110:	85 e9       	ldi	r24, 0x95	; 149
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	26 e0       	ldi	r18, 0x06	; 6
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	// UMSELn UPMn1 UPMn0 USBSn | UCSZn1 UCSZn0 UCPOLn
	// 비동기 모드
	// 패리티모드 사용 안함
	// UCSZn1 UCSZn0 -> 전송 데이터 비트 수 설정.-> 011 = 8비트. 즉 char단위
	// 클럭 극성 선택 X. 동기모드에서만 사용
	UBRR0H = 0;
 11a:	80 e9       	ldi	r24, 0x90	; 144
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	10 82       	st	Z, r1
	UBRR0L = 103; //buad Rate
 122:	89 e2       	ldi	r24, 0x29	; 41
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e6       	ldi	r18, 0x67	; 103
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	
	sei();
 12c:	78 94       	sei
	
    while (1) 
    {
		PORTB = ~led;		
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 136:	20 95       	com	r18
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
		UART_Putchar(led);
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	f5 d0       	rcall	.+490    	; 0x330 <UART_Putchar>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	a8 ec       	ldi	r26, 0xC8	; 200
 14c:	b2 e4       	ldi	r27, 0x42	; 66
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	ab 83       	std	Y+3, r26	; 0x03
 154:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	4a e7       	ldi	r20, 0x7A	; 122
 15c:	55 e4       	ldi	r21, 0x45	; 69
 15e:	69 81       	ldd	r22, Y+1	; 0x01
 160:	7a 81       	ldd	r23, Y+2	; 0x02
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	9c 81       	ldd	r25, Y+4	; 0x04
 166:	80 d1       	rcall	.+768    	; 0x468 <__mulsf3>
 168:	dc 01       	movw	r26, r24
 16a:	cb 01       	movw	r24, r22
 16c:	8d 83       	std	Y+5, r24	; 0x05
 16e:	9e 83       	std	Y+6, r25	; 0x06
 170:	af 83       	std	Y+7, r26	; 0x07
 172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	5f e3       	ldi	r21, 0x3F	; 63
 17c:	6d 81       	ldd	r22, Y+5	; 0x05
 17e:	7e 81       	ldd	r23, Y+6	; 0x06
 180:	8f 81       	ldd	r24, Y+7	; 0x07
 182:	98 85       	ldd	r25, Y+8	; 0x08
 184:	f0 d0       	rcall	.+480    	; 0x366 <__cmpsf2>
 186:	88 23       	and	r24, r24
 188:	2c f4       	brge	.+10     	; 0x194 <main+0xdc>
		__ticks = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9a 87       	std	Y+10, r25	; 0x0a
 190:	89 87       	std	Y+9, r24	; 0x09
 192:	3b c0       	rjmp	.+118    	; 0x20a <main+0x152>
	else if (__tmp > 65535)
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	3f ef       	ldi	r19, 0xFF	; 255
 198:	4f e7       	ldi	r20, 0x7F	; 127
 19a:	57 e4       	ldi	r21, 0x47	; 71
 19c:	6d 81       	ldd	r22, Y+5	; 0x05
 19e:	7e 81       	ldd	r23, Y+6	; 0x06
 1a0:	8f 81       	ldd	r24, Y+7	; 0x07
 1a2:	98 85       	ldd	r25, Y+8	; 0x08
 1a4:	5d d1       	rcall	.+698    	; 0x460 <__gesf2>
 1a6:	18 16       	cp	r1, r24
 1a8:	3c f5       	brge	.+78     	; 0x1f8 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e2       	ldi	r20, 0x20	; 32
 1b0:	51 e4       	ldi	r21, 0x41	; 65
 1b2:	69 81       	ldd	r22, Y+1	; 0x01
 1b4:	7a 81       	ldd	r23, Y+2	; 0x02
 1b6:	8b 81       	ldd	r24, Y+3	; 0x03
 1b8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ba:	56 d1       	rcall	.+684    	; 0x468 <__mulsf3>
 1bc:	dc 01       	movw	r26, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	bc 01       	movw	r22, r24
 1c2:	cd 01       	movw	r24, r26
 1c4:	d4 d0       	rcall	.+424    	; 0x36e <__fixunssfsi>
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	9a 87       	std	Y+10, r25	; 0x0a
 1cc:	89 87       	std	Y+9, r24	; 0x09
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <main+0x136>
 1d0:	80 e9       	ldi	r24, 0x90	; 144
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	9c 87       	std	Y+12, r25	; 0x0c
 1d6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1da:	9c 85       	ldd	r25, Y+12	; 0x0c
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x124>
 1e0:	9c 87       	std	Y+12, r25	; 0x0c
 1e2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e4:	89 85       	ldd	r24, Y+9	; 0x09
 1e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	9a 87       	std	Y+10, r25	; 0x0a
 1ec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ee:	89 85       	ldd	r24, Y+9	; 0x09
 1f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f2:	89 2b       	or	r24, r25
 1f4:	69 f7       	brne	.-38     	; 0x1d0 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1f6:	13 c0       	rjmp	.+38     	; 0x21e <main+0x166>
 1f8:	6d 81       	ldd	r22, Y+5	; 0x05
 1fa:	7e 81       	ldd	r23, Y+6	; 0x06
 1fc:	8f 81       	ldd	r24, Y+7	; 0x07
 1fe:	98 85       	ldd	r25, Y+8	; 0x08
 200:	b6 d0       	rcall	.+364    	; 0x36e <__fixunssfsi>
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	9a 87       	std	Y+10, r25	; 0x0a
 208:	89 87       	std	Y+9, r24	; 0x09
 20a:	89 85       	ldd	r24, Y+9	; 0x09
 20c:	9a 85       	ldd	r25, Y+10	; 0x0a
 20e:	9e 87       	std	Y+14, r25	; 0x0e
 210:	8d 87       	std	Y+13, r24	; 0x0d
 212:	8d 85       	ldd	r24, Y+13	; 0x0d
 214:	9e 85       	ldd	r25, Y+14	; 0x0e
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x15e>
 21a:	9e 87       	std	Y+14, r25	; 0x0e
 21c:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(100);		
    }
 21e:	87 cf       	rjmp	.-242    	; 0x12e <main+0x76>

00000220 <__vector_18>:
}

ISR(USART0_RX_vect){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 230:	0f 92       	push	r0
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	data = UDR0;
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	89 83       	std	Y+1, r24	; 0x01
	// 수신버퍼에서 데이터 읽음
	led = data;
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 254:	00 00       	nop
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 26a:	0f 90       	pop	r0
 26c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_1>:

ISR(INT0_vect){
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	8f 93       	push	r24
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	if(led & 0x80){
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 290:	88 23       	and	r24, r24
 292:	5c f4       	brge	.+22     	; 0x2aa <__vector_1+0x34>
		// 밀려나갈 대상이 1일 경우
		led <<= 1;
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 298:	88 0f       	add	r24, r24
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		led |= 0x01;
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	else{
		// 밀려나갈 대상이 0일 경우
		led <<= 1;
	}	
}
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <__vector_1+0x3e>
		led |= 0x01;
		// 밀려나갔던 1이 뒤에와서 Set 설정
	}
	else{
		// 밀려나갈 대상이 0일 경우
		led <<= 1;
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ae:	88 0f       	add	r24, r24
 2b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}	
}
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_2>:

ISR(INT1_vect){
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	if(led & 0x01){
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	99 27       	eor	r25, r25
 2ec:	89 2b       	or	r24, r25
 2ee:	59 f0       	breq	.+22     	; 0x306 <__vector_2+0x3e>
		// 땡겨져 나갈 대상이 1일 경우
		led >>= 1;
 2f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f4:	86 95       	lsr	r24
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		led |= 0x80;
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		led >>= 1;
		// 땡겨져 나갈 대상이 0일 경우
		led &= ~(0x80);
		// MSB 0으로 Clear 혹시모르니까 unsigned이긴 하지만
	}
}
 304:	0a c0       	rjmp	.+20     	; 0x31a <__vector_2+0x52>
		
		led |= 0x80;
		// 나갔던 1을 머리에 Set
	}
	else{
		led >>= 1;
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30a:	86 95       	lsr	r24
 30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		// 땡겨져 나갈 대상이 0일 경우
		led &= ~(0x80);
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		// MSB 0으로 Clear 혹시모르니까 unsigned이긴 하지만
	}
}
 31a:	00 00       	nop
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <UART_Putchar>:

void UART_Putchar(unsigned char data){
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	1f 92       	push	r1
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR0A & 0x20) == 0x0){
 33c:	00 00       	nop
 33e:	8b e2       	ldi	r24, 0x2B	; 43
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	80 72       	andi	r24, 0x20	; 32
 34c:	99 27       	eor	r25, r25
 34e:	89 2b       	or	r24, r25
 350:	b1 f3       	breq	.-20     	; 0x33e <UART_Putchar+0xe>
		// UDRE0 이 1이 될때가지 대기
		// 즉 데이터 전송 버퍼가 비일때까지 대기
		// 전송버퍼가 비인다면 1로 Set 됨
		;
	}
	UDR0 = data;
 352:	8c e2       	ldi	r24, 0x2C	; 44
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
	//데이터 씀
 35c:	00 00       	nop
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <__cmpsf2>:
 366:	2f d0       	rcall	.+94     	; 0x3c6 <__fp_cmp>
 368:	08 f4       	brcc	.+2      	; 0x36c <__cmpsf2+0x6>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret

0000036e <__fixunssfsi>:
 36e:	57 d0       	rcall	.+174    	; 0x41e <__fp_splitA>
 370:	88 f0       	brcs	.+34     	; 0x394 <__fixunssfsi+0x26>
 372:	9f 57       	subi	r25, 0x7F	; 127
 374:	90 f0       	brcs	.+36     	; 0x39a <__fixunssfsi+0x2c>
 376:	b9 2f       	mov	r27, r25
 378:	99 27       	eor	r25, r25
 37a:	b7 51       	subi	r27, 0x17	; 23
 37c:	a0 f0       	brcs	.+40     	; 0x3a6 <__fixunssfsi+0x38>
 37e:	d1 f0       	breq	.+52     	; 0x3b4 <__fixunssfsi+0x46>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	1a f0       	brmi	.+6      	; 0x390 <__fixunssfsi+0x22>
 38a:	ba 95       	dec	r27
 38c:	c9 f7       	brne	.-14     	; 0x380 <__fixunssfsi+0x12>
 38e:	12 c0       	rjmp	.+36     	; 0x3b4 <__fixunssfsi+0x46>
 390:	b1 30       	cpi	r27, 0x01	; 1
 392:	81 f0       	breq	.+32     	; 0x3b4 <__fixunssfsi+0x46>
 394:	5e d0       	rcall	.+188    	; 0x452 <__fp_zero>
 396:	b1 e0       	ldi	r27, 0x01	; 1
 398:	08 95       	ret
 39a:	5b c0       	rjmp	.+182    	; 0x452 <__fp_zero>
 39c:	67 2f       	mov	r22, r23
 39e:	78 2f       	mov	r23, r24
 3a0:	88 27       	eor	r24, r24
 3a2:	b8 5f       	subi	r27, 0xF8	; 248
 3a4:	39 f0       	breq	.+14     	; 0x3b4 <__fixunssfsi+0x46>
 3a6:	b9 3f       	cpi	r27, 0xF9	; 249
 3a8:	cc f3       	brlt	.-14     	; 0x39c <__fixunssfsi+0x2e>
 3aa:	86 95       	lsr	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b3 95       	inc	r27
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <__fixunssfsi+0x3c>
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__fixunssfsi+0x56>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	08 95       	ret

000003c6 <__fp_cmp>:
 3c6:	99 0f       	add	r25, r25
 3c8:	00 08       	sbc	r0, r0
 3ca:	55 0f       	add	r21, r21
 3cc:	aa 0b       	sbc	r26, r26
 3ce:	e0 e8       	ldi	r30, 0x80	; 128
 3d0:	fe ef       	ldi	r31, 0xFE	; 254
 3d2:	16 16       	cp	r1, r22
 3d4:	17 06       	cpc	r1, r23
 3d6:	e8 07       	cpc	r30, r24
 3d8:	f9 07       	cpc	r31, r25
 3da:	c0 f0       	brcs	.+48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3dc:	12 16       	cp	r1, r18
 3de:	13 06       	cpc	r1, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	98 f0       	brcs	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e6:	62 1b       	sub	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	95 0b       	sbc	r25, r21
 3ee:	39 f4       	brne	.+14     	; 0x3fe <__fp_cmp+0x38>
 3f0:	0a 26       	eor	r0, r26
 3f2:	61 f0       	breq	.+24     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f4:	23 2b       	or	r18, r19
 3f6:	24 2b       	or	r18, r20
 3f8:	25 2b       	or	r18, r21
 3fa:	21 f4       	brne	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	08 95       	ret
 3fe:	0a 26       	eor	r0, r26
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	a1 40       	sbci	r26, 0x01	; 1
 404:	a6 95       	lsr	r26
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	81 1d       	adc	r24, r1
 40a:	81 1d       	adc	r24, r1
 40c:	08 95       	ret

0000040e <__fp_split3>:
 40e:	57 fd       	sbrc	r21, 7
 410:	90 58       	subi	r25, 0x80	; 128
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	59 f0       	breq	.+22     	; 0x42e <__fp_splitA+0x10>
 418:	5f 3f       	cpi	r21, 0xFF	; 255
 41a:	71 f0       	breq	.+28     	; 0x438 <__fp_splitA+0x1a>
 41c:	47 95       	ror	r20

0000041e <__fp_splitA>:
 41e:	88 0f       	add	r24, r24
 420:	97 fb       	bst	r25, 7
 422:	99 1f       	adc	r25, r25
 424:	61 f0       	breq	.+24     	; 0x43e <__fp_splitA+0x20>
 426:	9f 3f       	cpi	r25, 0xFF	; 255
 428:	79 f0       	breq	.+30     	; 0x448 <__fp_splitA+0x2a>
 42a:	87 95       	ror	r24
 42c:	08 95       	ret
 42e:	12 16       	cp	r1, r18
 430:	13 06       	cpc	r1, r19
 432:	14 06       	cpc	r1, r20
 434:	55 1f       	adc	r21, r21
 436:	f2 cf       	rjmp	.-28     	; 0x41c <__fp_split3+0xe>
 438:	46 95       	lsr	r20
 43a:	f1 df       	rcall	.-30     	; 0x41e <__fp_splitA>
 43c:	08 c0       	rjmp	.+16     	; 0x44e <__fp_splitA+0x30>
 43e:	16 16       	cp	r1, r22
 440:	17 06       	cpc	r1, r23
 442:	18 06       	cpc	r1, r24
 444:	99 1f       	adc	r25, r25
 446:	f1 cf       	rjmp	.-30     	; 0x42a <__fp_splitA+0xc>
 448:	86 95       	lsr	r24
 44a:	71 05       	cpc	r23, r1
 44c:	61 05       	cpc	r22, r1
 44e:	08 94       	sec
 450:	08 95       	ret

00000452 <__fp_zero>:
 452:	e8 94       	clt

00000454 <__fp_szero>:
 454:	bb 27       	eor	r27, r27
 456:	66 27       	eor	r22, r22
 458:	77 27       	eor	r23, r23
 45a:	cb 01       	movw	r24, r22
 45c:	97 f9       	bld	r25, 7
 45e:	08 95       	ret

00000460 <__gesf2>:
 460:	b2 df       	rcall	.-156    	; 0x3c6 <__fp_cmp>
 462:	08 f4       	brcc	.+2      	; 0x466 <__gesf2+0x6>
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	08 95       	ret

00000468 <__mulsf3>:
 468:	0b d0       	rcall	.+22     	; 0x480 <__mulsf3x>
 46a:	78 c0       	rjmp	.+240    	; 0x55c <__fp_round>
 46c:	69 d0       	rcall	.+210    	; 0x540 <__fp_pscA>
 46e:	28 f0       	brcs	.+10     	; 0x47a <__mulsf3+0x12>
 470:	6e d0       	rcall	.+220    	; 0x54e <__fp_pscB>
 472:	18 f0       	brcs	.+6      	; 0x47a <__mulsf3+0x12>
 474:	95 23       	and	r25, r21
 476:	09 f0       	breq	.+2      	; 0x47a <__mulsf3+0x12>
 478:	5a c0       	rjmp	.+180    	; 0x52e <__fp_inf>
 47a:	5f c0       	rjmp	.+190    	; 0x53a <__fp_nan>
 47c:	11 24       	eor	r1, r1
 47e:	ea cf       	rjmp	.-44     	; 0x454 <__fp_szero>

00000480 <__mulsf3x>:
 480:	c6 df       	rcall	.-116    	; 0x40e <__fp_split3>
 482:	a0 f3       	brcs	.-24     	; 0x46c <__mulsf3+0x4>

00000484 <__mulsf3_pse>:
 484:	95 9f       	mul	r25, r21
 486:	d1 f3       	breq	.-12     	; 0x47c <__mulsf3+0x14>
 488:	95 0f       	add	r25, r21
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	55 1f       	adc	r21, r21
 48e:	62 9f       	mul	r22, r18
 490:	f0 01       	movw	r30, r0
 492:	72 9f       	mul	r23, r18
 494:	bb 27       	eor	r27, r27
 496:	f0 0d       	add	r31, r0
 498:	b1 1d       	adc	r27, r1
 49a:	63 9f       	mul	r22, r19
 49c:	aa 27       	eor	r26, r26
 49e:	f0 0d       	add	r31, r0
 4a0:	b1 1d       	adc	r27, r1
 4a2:	aa 1f       	adc	r26, r26
 4a4:	64 9f       	mul	r22, r20
 4a6:	66 27       	eor	r22, r22
 4a8:	b0 0d       	add	r27, r0
 4aa:	a1 1d       	adc	r26, r1
 4ac:	66 1f       	adc	r22, r22
 4ae:	82 9f       	mul	r24, r18
 4b0:	22 27       	eor	r18, r18
 4b2:	b0 0d       	add	r27, r0
 4b4:	a1 1d       	adc	r26, r1
 4b6:	62 1f       	adc	r22, r18
 4b8:	73 9f       	mul	r23, r19
 4ba:	b0 0d       	add	r27, r0
 4bc:	a1 1d       	adc	r26, r1
 4be:	62 1f       	adc	r22, r18
 4c0:	83 9f       	mul	r24, r19
 4c2:	a0 0d       	add	r26, r0
 4c4:	61 1d       	adc	r22, r1
 4c6:	22 1f       	adc	r18, r18
 4c8:	74 9f       	mul	r23, r20
 4ca:	33 27       	eor	r19, r19
 4cc:	a0 0d       	add	r26, r0
 4ce:	61 1d       	adc	r22, r1
 4d0:	23 1f       	adc	r18, r19
 4d2:	84 9f       	mul	r24, r20
 4d4:	60 0d       	add	r22, r0
 4d6:	21 1d       	adc	r18, r1
 4d8:	82 2f       	mov	r24, r18
 4da:	76 2f       	mov	r23, r22
 4dc:	6a 2f       	mov	r22, r26
 4de:	11 24       	eor	r1, r1
 4e0:	9f 57       	subi	r25, 0x7F	; 127
 4e2:	50 40       	sbci	r21, 0x00	; 0
 4e4:	8a f0       	brmi	.+34     	; 0x508 <__mulsf3_pse+0x84>
 4e6:	e1 f0       	breq	.+56     	; 0x520 <__mulsf3_pse+0x9c>
 4e8:	88 23       	and	r24, r24
 4ea:	4a f0       	brmi	.+18     	; 0x4fe <__mulsf3_pse+0x7a>
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	bb 1f       	adc	r27, r27
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	91 50       	subi	r25, 0x01	; 1
 4fa:	50 40       	sbci	r21, 0x00	; 0
 4fc:	a9 f7       	brne	.-22     	; 0x4e8 <__mulsf3_pse+0x64>
 4fe:	9e 3f       	cpi	r25, 0xFE	; 254
 500:	51 05       	cpc	r21, r1
 502:	70 f0       	brcs	.+28     	; 0x520 <__mulsf3_pse+0x9c>
 504:	14 c0       	rjmp	.+40     	; 0x52e <__fp_inf>
 506:	a6 cf       	rjmp	.-180    	; 0x454 <__fp_szero>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	ec f3       	brlt	.-6      	; 0x506 <__mulsf3_pse+0x82>
 50c:	98 3e       	cpi	r25, 0xE8	; 232
 50e:	dc f3       	brlt	.-10     	; 0x506 <__mulsf3_pse+0x82>
 510:	86 95       	lsr	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f7 95       	ror	r31
 51a:	e7 95       	ror	r30
 51c:	9f 5f       	subi	r25, 0xFF	; 255
 51e:	c1 f7       	brne	.-16     	; 0x510 <__mulsf3_pse+0x8c>
 520:	fe 2b       	or	r31, r30
 522:	88 0f       	add	r24, r24
 524:	91 1d       	adc	r25, r1
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	97 f9       	bld	r25, 7
 52c:	08 95       	ret

0000052e <__fp_inf>:
 52e:	97 f9       	bld	r25, 7
 530:	9f 67       	ori	r25, 0x7F	; 127
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	08 95       	ret

0000053a <__fp_nan>:
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	80 ec       	ldi	r24, 0xC0	; 192
 53e:	08 95       	ret

00000540 <__fp_pscA>:
 540:	00 24       	eor	r0, r0
 542:	0a 94       	dec	r0
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	09 06       	cpc	r0, r25
 54c:	08 95       	ret

0000054e <__fp_pscB>:
 54e:	00 24       	eor	r0, r0
 550:	0a 94       	dec	r0
 552:	12 16       	cp	r1, r18
 554:	13 06       	cpc	r1, r19
 556:	14 06       	cpc	r1, r20
 558:	05 06       	cpc	r0, r21
 55a:	08 95       	ret

0000055c <__fp_round>:
 55c:	09 2e       	mov	r0, r25
 55e:	03 94       	inc	r0
 560:	00 0c       	add	r0, r0
 562:	11 f4       	brne	.+4      	; 0x568 <__fp_round+0xc>
 564:	88 23       	and	r24, r24
 566:	52 f0       	brmi	.+20     	; 0x57c <__fp_round+0x20>
 568:	bb 0f       	add	r27, r27
 56a:	40 f4       	brcc	.+16     	; 0x57c <__fp_round+0x20>
 56c:	bf 2b       	or	r27, r31
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0x18>
 570:	60 ff       	sbrs	r22, 0
 572:	04 c0       	rjmp	.+8      	; 0x57c <__fp_round+0x20>
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
